'use strict';

var socket_io = require('socket.io');
var require$$0$1 = require('os');
var require$$0 = require('stream');
var http = require('http');
var EventEmitter$2 = require('events');
var require$$1 = require('repl');
var require$$1$1 = require('util');
var require$$0$2 = require('tty');
var require$$0$3 = require('fs');
var require$$2 = require('path');
var require$$0$4 = require('child_process');
var require$$0$5 = require('zlib');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var favicon = "AAABAAIAICAAAAEAIAAoEQAAJgAAABAQAAABACAAaAQAAE4RAAAoAAAAIAAAAEAAAAABACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAABSAAAAeQAAAIgAAAB+AAAAWwAAACcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAACgAAAA7QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA9gAAALMAAABEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABxAAAA8QAAAP8AAADtAAAArQAAAHwAAABpAAAAdgAAAKIAAADhAAAA/wAAAP0AAACQAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAhwAAAP8AAAD5AAAAiQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAAABxAAAA6wAAAP8AAACrAAAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGcAAAD/AAAA7QAAAE0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyAAAA2AAAAP8AAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiAAAA6gAAAPoAAABSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAA6gAAAPsAAABDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIkAAAD/AAAAnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAA/wAAALQAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAA2wAAAPgAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAADiAAAA9gAAACcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0AAAD9AAAAxwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEAAAD/AAAAWwAAAAAAAAAAAAAAMQAAAF0AAABcAAAAXAAAAFwAAABcAAAAXAAAAFwAAABZAAAAjgAAAP8AAADHAAAAWQAAAFwAAABcAAAAXAAAAFwAAABcAAAAXAAAAF0AAAAhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdgAAAP8AAAB+AAAAAAAAAAAAAACNAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAF8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABpAAAA/wAAAIgAAAAAAAAAAAAAAIkAAAD/AAAAwAAAAJMAAACVAAAAlQAAAJUAAACVAAAAlAAAALIAAAD/AAAA3wAAAJMAAACVAAAAlQAAAJUAAACVAAAAkwAAANMAAAD/AAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHsAAAD/AAAAegAAAAAAAAAAAAAAiQAAAP8AAABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgAAAPoAAADRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkQAAAP8AAABcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArAAAAP8AAABSAAAAAAAAAAAAAACJAAAA/wAAAGcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAzwAAAPwAAAA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACVAAAA/wAAAFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0AAADsAAAA7wAAAB0AAAAAAAAAAAAAAIkAAAD/AAAAZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2AAAA/wAAALMAAAACAAAAAAAAAAAAAAAAAAAAAAAAAJUAAAD/AAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAigAAAP8AAACiAAAAAAAAAAAAAAAAAAAAiQAAAP8AAABnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAAADaAAAA/wAAAHIAAAAAAAAAAAAAAAAAAAAAAAAAlQAAAP8AAABcAAAAAAAAAAAAAAAAAAAAAAAAAEwAAAD2AAAA8gAAAC8AAAAAAAAAAAAAAAAAAACJAAAA/wAAAGcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEoAAAD4AAAA+wAAAHIAAAACAAAAAAAAAAAAAACVAAAA/wAAAFwAAAAAAAAAAAAAAAAAAABTAAAA7QAAAP8AAABwAAAAAAAAAAAAAAAAAAAAAAAAAIkAAAD/AAAAZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGMAAAD4AAAA/wAAALEAAABBAAAABwAAAJMAAAD/AAAAWAAAAAMAAAAyAAAAmwAAAP0AAAD/AAAAhwAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAiQAAAP8AAABnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEsAAADYAAAA/wAAAP8AAADRAAAA3wAAAP8AAADHAAAAxwAAAPsAAAD/AAAA6QAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJAAAA/wAAAGcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAAAB1AAAAzQAAAPsAAAD/AAAA/wAAAP8AAAD/AAAA2QAAAIkAAAAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIkAAAD/AAAAZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAKwAAALIAAAD/AAAAjgAAADIAAAANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiQAAAP8AAABnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkgAAAP8AAABXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJAAAA/wAAAGcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACVAAAA/wAAAFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIkAAAD/AAAAZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJUAAAD/AAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiQAAAP8AAABnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlQAAAP8AAABcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJAAAA/wAAAGcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACVAAAA/wAAAFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIkAAAD/AAAAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJEAAAD/AAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiQAAAP8AAACkAAAAZgAAAGcAAABnAAAAZwAAAGcAAABnAAAAZwAAAGcAAABnAAAAZwAAAGcAAABnAAAAZwAAAGcAAABmAAAAwAAAAP8AAABcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACPAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEkAAACKAAAAiQAAAIkAAACJAAAAiQAAAIkAAACJAAAAiQAAAIkAAACJAAAAiQAAAIkAAACJAAAAiQAAAIkAAACJAAAAiQAAAIkoAAAAEAAAACAAAAABACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAABwAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+AAAAsQAAAMsAAADKAAAAxgAAAHkAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABXAAAA2QAAAGEAAAAYAAAADwAAADUAAACvAAAArwAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdAAAA1gAAADcAAAAAAAAAAAAAAAAAAAAAAAAAAgAAALEAAAB5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbwAAAJcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyAAAAyQAAAAgAAAAQAAAAjAAAAJ0AAACdAAAAnAAAANgAAADGAAAAnAAAAJ0AAACbAAAAVwAAAAAAAAAAAAAADQAAAMsAAAAdAAAAHwAAAN8AAABsAAAAZQAAAGQAAAC4AAAAswAAAGMAAABkAAAApwAAAKAAAAAAAAAAAAAAABUAAADNAAAAFQAAAB8AAADIAAAAAgAAAAAAAAAAAAAASgAAAL0AAAAAAAAAAAAAAGAAAACdAAAAAAAAAAAAAABhAAAAtAAAAAEAAAAfAAAAyQAAAAsAAAAAAAAAAAAAAAUAAAC0AAAAjQAAAAIAAABeAAAAmQAAAAAAAAA4AAAA2gAAAD0AAAAAAAAAHwAAAMkAAAALAAAAAAAAAAAAAAAAAAAAFwAAALQAAAC6AAAAsgAAAMYAAACYAAAA1AAAAFcAAAAAAAAAAAAAAB8AAADJAAAACwAAAAAAAAAAAAAAAAAAAAAAAAADAAAATgAAALcAAADXAAAAcQAAAB0AAAAAAAAAAAAAAAAAAAAfAAAAyQAAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABfAAAAmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHwAAAMkAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZAAAAJ0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8AAADMAAAAFgAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAG0AAACeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAA2QAAAMsAAADJAAAAyQAAAMkAAADJAAAAyQAAAMgAAADYAAAAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAABoAAAAfAAAAHwAAAB8AAAAfAAAAHwAAAB8AAAAfAAAAHgAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";

var index = "PCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiIC8+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIgLz4KICAgIDx0aXRsZT5ibG9rZG90czwvdGl0bGU+CiAgICA8bGluayByZWw9Imljb24iIGhyZWY9Ii9mYXZpY29uLmljbyIgLz4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSJzdHlsZS5jc3MiIC8+CgogICAgPHNjcmlwdCBzcmM9InNvY2tldC1pby5taW4uanMiPjwvc2NyaXB0PgogIDwvaGVhZD4KCiAgPGJvZHk+CiAgICA8ZGl2IGlkPSJ3cmFwcGVyIj4KICAgICAgPGgxPmJsb2tkb3RzPC9oMT4KCiAgICAgIDxwPgogICAgICAgIFRoaXMgcGFnZSBpcyBnZW5lcmF0ZWQgYnkgdGhlIGludGVybmFsIGJsb2tkb3RzIHNlcnZlci4gWW91IGNhbiBjb25uZWN0CiAgICAgICAgdG8gdGhlIGludGVncmF0aW9ucyBieSBjb25uZWN0aW5nIHdpdGggYSBTb2NrZXQuSU8gY2xpZW50IHRvIHRoaXMKICAgICAgICBhZGRyZXNzLgogICAgICA8L3A+CiAgICAgIDxwPgogICAgICAgIEZvciBtb3JlIGluZm9ybWF0aW9uLCBjaGVjayBvdXQgdGhlCiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9ibG9rZG90cy5jb20vZG9jdW1lbnRhdGlvbi9jb21wb25lbnRzL2ludGVncmF0aW9ucy9zb2NrZXQtaW8tc2VydmVyIgogICAgICAgICAgPmJsb2tkb3RzIGRvY3VtZW50YXRpb248L2EKICAgICAgICA+LgogICAgICA8L3A+CgogICAgICA8YnIgLz4KCiAgICAgIDxoMT5Db25uZWN0aW9uIFN0YXR1czwvaDE+CgogICAgICA8cD4KICAgICAgICBTZXJ2ZXIKICAgICAgICA8c3BhbiBpZD0ic2VydmVyQWRkcmVzcyI+PC9zcGFuPgogICAgICAgIDxzcGFuIGlkPSJjb25uZWN0aW9uU3RhdHVzIj5ub3QgY29ubmVjdGVkPC9zcGFuPgogICAgICA8L3A+CgogICAgICA8aDE+QWN0aXZlIEludGVncmF0aW9uczwvaDE+CiAgICAgIDxkaXYgaWQ9ImFjdGl2ZUludGVncmF0aW9ucyI+PC9kaXY+CgogICAgICA8c2VjdGlvbiBpZD0idGVzdE1lc3NhZ2VzIj4KICAgICAgICA8aDE+VGVzdCBNZXNzYWdlczwvaDE+CgogICAgICAgIDxwPgogICAgICAgICAgWW91IGNhbiBzZW5kIGFuZCByZWNlaXZlIHRlc3QgbWVzc2FnZXMgYmVsb3cuIFBsZWFzZSBtYWtlIHN1cmUgdGhhdCBhCiAgICAgICAgICBoYXJkd2FyZSBib2FyZCAobGlrZSBBcmR1aW5vKSBpcyBjb25uZWN0ZWQgYW5kIG1hcmtlZCBhcyAiUmVhZHkiIGluCiAgICAgICAgICBibG9rZG90cy4KICAgICAgICA8L3A+CgogICAgICAgIDxkaXYgaWQ9InRlc3RJbnB1dCI+CiAgICAgICAgICA8bGFiZWwKICAgICAgICAgICAgPjxzcGFuPk1lc3NhZ2U6PC9zcGFuPgogICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgIGlkPSJ0ZXN0TWVzc2FnZSIKICAgICAgICAgICAgICBuYW1lPSJ0ZXN0TWVzc2FnZSIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0ibWVzc2FnZSIKICAgICAgICAgICAgLz4KICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICA8bGFiZWwKICAgICAgICAgICAgPjxzcGFuPlZhbHVlOjwvc3Bhbj4KICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICBpZD0idGVzdFZhbHVlIgogICAgICAgICAgICAgIG5hbWU9InRlc3RWYWx1ZSIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0idmFsdWUiCiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgPGJ1dHRvbj5TZW5kPC9idXR0b24+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDx1bCBpZD0ic29ja2V0LWhpc3RvcnkiPgogICAgICAgICAgPCEtLSBtZXNzYWdlcyBnbyBoZXJlIC0tPgogICAgICAgIDwvdWw+CiAgICAgIDwvc2VjdGlvbj4KICAgIDwvZGl2PgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgY29uc3QgZ2VuZXJhbFNvY2tldCA9IGlvKHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pOwoKICAgICAgZ2VuZXJhbFNvY2tldC5vbigiaW5mbyIsIChkYXRhKSA9PiB7CiAgICAgICAgY29uc29sZS5sb2coZGF0YSk7CiAgICAgIH0pOwoKICAgICAgY29uc3Qgc29ja2V0ID0gaW8od2luZG93LmxvY2F0aW9uLm9yaWdpbiArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSk7CiAgICAgIGNvbnN0IGludGVncmF0aW9uID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cmluZygxKTsKCiAgICAgIGxldCBzb2NrZXRDb250YWluZXIgPSBudWxsOwoKICAgICAgc29ja2V0Lm9uKCJjb25uZWN0IiwgKCkgPT4gewogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNjb25uZWN0aW9uU3RhdHVzIikudGV4dENvbnRlbnQgPQogICAgICAgICAgImlzIGNvbm5lY3RlZCI7CiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2Nvbm5lY3Rpb25TdGF0dXMiKS5jbGFzc0xpc3QuYWRkKCJvayIpOwogICAgICB9KTsKCiAgICAgIHNvY2tldC5vbigiZGlzY29ubmVjdCIsICgpID0+IHsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjY29ubmVjdGlvblN0YXR1cyIpLnRleHRDb250ZW50ID0KICAgICAgICAgICJub3QgY29ubmVjdGVkIjsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjY29ubmVjdGlvblN0YXR1cyIpLmNsYXNzTGlzdC5yZW1vdmUoIm9rIik7CiAgICAgIH0pOwoKICAgICAgc29ja2V0Lm9uKCJpbmZvIiwgKHZhbCkgPT4gewogICAgICAgIGlmICh2YWwuYWN0aXZlSW50ZWdyYXRpb25zKSB7CiAgICAgICAgICBjb25zdCBpbnRlZ3JhdGlvbnNIdG1sID0gdmFsLmFjdGl2ZUludGVncmF0aW9ucwogICAgICAgICAgICAubWFwKChpbnRlZ3JhdGlvbk5hbWUpID0+IHsKICAgICAgICAgICAgICByZXR1cm4gYDxzcGFuIGNsYXNzPSJjb2RlICR7CiAgICAgICAgICAgICAgICBpbnRlZ3JhdGlvbk5hbWUgPT09IGludGVncmF0aW9uID8gIm9rIiA6ICIiCiAgICAgICAgICAgICAgfSI+JHtpbnRlZ3JhdGlvbk5hbWV9PC9zcGFuPmA7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5qb2luKCIgIik7CiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjYWN0aXZlSW50ZWdyYXRpb25zIikuaW5uZXJIVE1MID0KICAgICAgICAgICAgaW50ZWdyYXRpb25zSHRtbDsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgaWYgKGludGVncmF0aW9uID09PSAiIikgewogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiN0ZXN0TWVzc2FnZXMiKS5pbm5lckhUTUwgPQogICAgICAgICAgIlBsZWFzZSBvcGVuIHRoaXMgcGFnZSB3aXRoIHRoZSBzcGVjaWZpYyBVUkwgZm9yIGFuIGFjdGl2ZSBpbnRlZ3JhdGlvbi4iOwogICAgICB9CgogICAgICBpZiAoaW50ZWdyYXRpb24gPT09ICJibG9rZG90cyIpIHsKICAgICAgICBzb2NrZXQub24oImJsb2tkb3RzIiwgKHZhbCkgPT4gewogICAgICAgICAgYWRkTWVzc2FnZVRvTGlzdCh2YWwpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAoaW50ZWdyYXRpb24gPT09ICJwcm90b3BpZSIpIHsKICAgICAgICBzb2NrZXQub24oInBwTWVzc2FnZSIsICh2YWwpID0+IHsKICAgICAgICAgIGNvbnN0IHBwVmFsID0gewogICAgICAgICAgICBtc2c6IHZhbC5tZXNzYWdlSWQsCiAgICAgICAgICAgIHZhbDogdmFsLnZhbHVlLAogICAgICAgICAgfTsKICAgICAgICAgIGFkZE1lc3NhZ2VUb0xpc3QocHBWYWwpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBjb25zdCBhZGRNZXNzYWdlVG9MaXN0ID0gKHZhbCwgZGlyID0gImluIikgPT4gewogICAgICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGkiKTsKCiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoRGF0ZS5ub3coKSkudG9Mb2NhbGVUaW1lU3RyaW5nKCk7CiAgICAgICAgY29uc3Qgc2lnbmFsRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsKICAgICAgICBzaWduYWxEYXRlLmNsYXNzTGlzdC5hZGQoIm1lc3NhZ2VUaW1lIik7CiAgICAgICAgc2lnbmFsRGF0ZS50ZXh0Q29udGVudCA9IHRpbWVzdGFtcDsKICAgICAgICBsaS5hcHBlbmRDaGlsZChzaWduYWxEYXRlKTsKCiAgICAgICAgY29uc3QgYXJyb3dJbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImltZyIpOwogICAgICAgIGFycm93SW1hZ2UuY2xhc3NMaXN0LmFkZCgibWVzc2FnZUFycm93Iik7CiAgICAgICAgYXJyb3dJbWFnZS5zcmMgPSAibG9nLWFycm93LSIgKyBkaXIgKyAiLnN2ZyI7CiAgICAgICAgbGkuYXBwZW5kQ2hpbGQoYXJyb3dJbWFnZSk7CgogICAgICAgIGNvbnN0IG1lc3NhZ2VET00gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7CiAgICAgICAgbWVzc2FnZURPTS5jbGFzc0xpc3QuYWRkKCJtZXNzYWdlQ29udGVudERpc3BsYXkiKTsKICAgICAgICBtZXNzYWdlRE9NLnRleHRDb250ZW50ID0gdmFsLm1zZzsKICAgICAgICBsaS5hcHBlbmRDaGlsZChtZXNzYWdlRE9NKTsKCiAgICAgICAgaWYgKHZhbC52YWwgIT09IHVuZGVmaW5lZCAmJiB2YWwudmFsICE9PSBudWxsICYmIHZhbC52YWwgIT09ICIiKSB7CiAgICAgICAgICBjb25zdCB2YWx1ZURPTSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsKICAgICAgICAgIHZhbHVlRE9NLmNsYXNzTGlzdC5hZGQoIm1lc3NhZ2VWYWx1ZURpc3BsYXkiKTsKICAgICAgICAgIGlmICghaXNOYU4odmFsLnZhbCkpIHsKICAgICAgICAgICAgdmFsdWVET00uY2xhc3NMaXN0LmFkZCgibWVzc2FnZVZhbHVlRGlzcGxheS1pcy1udW1iZXIiKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhbHVlRE9NLnRleHRDb250ZW50ID0gdmFsLnZhbDsKICAgICAgICAgIGxpLmFwcGVuZENoaWxkKHZhbHVlRE9NKTsKICAgICAgICB9CgogICAgICAgIHNvY2tldENvbnRhaW5lci5wcmVwZW5kKGxpKTsKICAgICAgfTsKCiAgICAgIGNvbnN0IHNlbmRNZXNzYWdlID0gKCkgPT4gewogICAgICAgIGNvbnN0IG1zZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiN0ZXN0TWVzc2FnZSIpLnZhbHVlOwogICAgICAgIGxldCB2YWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjdGVzdFZhbHVlIikudmFsdWU7CgogICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7CiAgICAgICAgICBtc2csCiAgICAgICAgICB2YWwsCiAgICAgICAgfTsKICAgICAgICBhZGRNZXNzYWdlVG9MaXN0KG1lc3NhZ2UsICJvdXQiKTsKCiAgICAgICAgaWYgKGludGVncmF0aW9uID09PSAiYmxva2RvdHMiKSB7CiAgICAgICAgICBzb2NrZXQuZW1pdCgiYmxva2RvdHMiLCBtZXNzYWdlKTsKICAgICAgICB9CiAgICAgICAgaWYgKGludGVncmF0aW9uID09PSAicHJvdG9waWUiKSB7CiAgICAgICAgICBzb2NrZXQuZW1pdCgicHBNZXNzYWdlIiwgeyBtZXNzYWdlSWQ6IG1zZywgdmFsdWU6IHZhbCB9KTsKICAgICAgICB9CiAgICAgIH07CgogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgKCkgPT4gewogICAgICAgIHNvY2tldENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNzb2NrZXQtaGlzdG9yeSIpOwogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNzZXJ2ZXJBZGRyZXNzIikudGV4dENvbnRlbnQgPQogICAgICAgICAgd2luZG93LmxvY2F0aW9uLm9yaWdpbiArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTsKCiAgICAgICAgaWYgKGludGVncmF0aW9uICE9PSAiIikgewogICAgICAgICAgZG9jdW1lbnQKICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoIiN0ZXN0SW5wdXQgYnV0dG9uIikKICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgc2VuZE1lc3NhZ2UpOwogICAgICAgIH0KICAgICAgfSk7CiAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K";

var logArrowIn = "PHN2ZyB3aWR0aD0iMTIiIGhlaWdodD0iMTIiIHZpZXdCb3g9IjAgMCAxMiAxMiIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTAgNS43NDIwNUw0LjcyODIyIDEwLjQ4NDFMNS42ODc1NSA5LjUyNDc3TDIuNTQ3NjEgNi4zOTcwNUwxMS4xNjg0IDYuMzk3MDVWNS4wODcwNUwyLjU0NzYxIDUuMDg3MDVMNS42ODc1NSAxLjk1OTMzTDQuNzI4MjMgMUwwIDUuNzQyMDVaIiBmaWxsPSIjQThBOEE4Ii8+Cjwvc3ZnPgo=";

var logArrowOut = "PHN2ZyB3aWR0aD0iMTIiIGhlaWdodD0iMTIiIHZpZXdCb3g9IjAgMCAxMiAxMiIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTkuODExOTcgMi4wNjYyNkwzLjExNTQ3IDIuMDU2NDlMMy4xMTU0NyAzLjQxMzE4TDcuNTQ3MzggMy40MDQ1NEwxLjQ1MTU0IDkuNTAwMzhMMi4zNzc4NSAxMC40MjY3TDguNDczNjkgNC4zMzA4NUw4LjQ2NTA1IDguNzYyNzZIOS44MjE3NEw5LjgxMTk3IDIuMDY2MjZaIiBmaWxsPSIjMUFCQzlDIi8+Cjwvc3ZnPgo=";

var socketIOJS = "";

var style = "LyogVmFyaWFibGVzICovCjpyb290IHsKICAvKiBmb250cyAqLwogIC0tZm9udC1mYW1pbHktcmVnOiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICJTZWdvZSBVSSIsIFJvYm90bywKICAgIE94eWdlbi1TYW5zLCBVYnVudHUsIENhbnRhcmVsbCwgIkhlbHZldGljYSBOZXVlIiwgc2Fucy1zZXJpZjsKICAtLWZvbnQtZmFtaWx5LW1vbm86ICJTRiBNb25vIiwgIlJvYm90byBNb25vIiwgIk1lbmxvIiwgbW9ub3NwYWNlOwoKICAtLWZvbnQtc2l6ZS1yZWc6IDE2cHg7CiAgLS1mb250LXNpemUtc21hbGw6IDEzcHg7CiAgLS1mb250LXNpemUtdGlueTogMTBweDsKCiAgLS1mb250LXdlaWdodC1tZWQ6IDUwMDsKICAtLWZvbnQtd2VpZ2h0LXJlZzogNDAwOwogIC0tZm9udC13ZWlnaHQtdGhpbjogMzAwOwoKICAvKiBTaXplcyAqLwogIC0tbWF4LXdpZHRoOiA2NDBweDsKCiAgLyogQ29sb3JzICovCgogIC0tY29sb3Itd2hpdGU6ICNmZmZmZmY7CiAgLS1jb2xvci1ibGFjazogIzAwMDAwMDsKCiAgLS1jb2xvci1mb250LXJlZzogdmFyKC0tY29sb3ItYmxhY2spOwogIC0tY29sb3ItZm9udC1tZWQ6ICM4MDgwODA7CiAgLS1jb2xvci1mb250LWRpczogI2IzYjNiMzsKCiAgLS1jb2xvci1ncmF5LTE6ICNmOGY4Zjg7CiAgLS1jb2xvci1ncmF5LTI6ICNmNWY1ZjU7CiAgLS1jb2xvci1ncmF5LTM6ICNmMmYyZjI7CiAgLS1jb2xvci1ncmF5LTQ6ICNmMGYwZjA7CiAgLS1jb2xvci1ncmF5LTU6ICNlYWVhZWE7CiAgLS1jb2xvci1ncmF5LTY6ICNkY2RjZGM7CiAgLS1jb2xvci1ncmF5LTc6ICNjMWMxYzE7CiAgLS1jb2xvci1ncmF5LTg6ICNhOGE4YTg7CiAgLS1jb2xvci1ncmF5LTk6ICM2MDYwNjA7CgogIC0tY29sb3ItYnJhbmQ6ICNmYmU5NDE7CiAgLS1jb2xvci1icmFuZC1tZWRpdW06ICNmYmQ4NDE7CiAgLS1jb2xvci1icmFuZC1kYXJrOiAjZjdjNTEwOwoKICAtLWNvbG9yLXJlZDogI2U3NGMzYzsKICAtLWNvbG9yLWdyZWVuOiAjMWFiYzljOwogIC0tY29sb3ItZ3JlZW4tZGFyazogIzE3YTM4NzsKICAtLWNvbG9yLWJsdWU6ICM1ZDliYzU7CiAgLS1jb2xvci12aW9sZXQ6ICM5ZjYzYjc7CiAgLS1jb2xvci1vcmFuZ2U6ICNmMzljMTI7CiAgLS1jb2xvci15ZWxsb3c6IHZhcigtLWNvbG9yLWJyYW5kLW1lZGl1bSk7CgogIC0tY29sb3ItYWxlcnQtaGlnaDogdmFyKC0tY29sb3ItcmVkKTsKICAtLWNvbG9yLWFsZXJ0LW1lZGl1bTogdmFyKC0tY29sb3Itb3JhbmdlKTsKICAtLWNvbG9yLWFsZXJ0LWxvdzogdmFyKC0tY29sb3IteWVsbG93KTsKCiAgLyogU2l6ZXMgKi8KCiAgLS1ib3JkZXItcmFkaXVzLXJlZzogMnB4OwogIC0td2luZG93cy1tZW51LWJhci1oZWlnaHQ6IDI4cHg7Cn0KCkBtZWRpYSAocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspIHsKICA6cm9vdCB7CiAgICAtLWNvbG9yLXdoaXRlOiAjMzkzOTNhOwogICAgLS1jb2xvci1ibGFjazogI2ZmZmZmZjsKCiAgICAtLWNvbG9yLWdyYXktMTogIzQyNDI0MzsKICAgIC0tY29sb3ItZ3JheS0yOiAjNGQ0ZDRkOwogICAgLS1jb2xvci1ncmF5LTM6ICM4MDgwODA7CiAgICAtLWNvbG9yLWdyYXktNDogIzNkM2QzZTsKICAgIC0tY29sb3ItZ3JheS01OiAjMmQyZDJlOwogICAgLS1jb2xvci1ncmF5LTY6ICM1MDUwNTE7CiAgICAtLWNvbG9yLWdyYXktNzogIzU2NTY1NzsKICAgIC0tY29sb3ItZ3JheS04OiAjNmY2Zjc0OwogICAgLS1jb2xvci1ncmF5LTk6ICM3ODc4N2M7CgogICAgLS1jb2xvci1mb250LXJlZzogdmFyKC0tY29sb3ItYmxhY2spOwogICAgLS1jb2xvci1mb250LW1lZDogIzkwOTA5MDsKICAgIC0tY29sb3ItZm9udC1kaXM6IHZhcigtLWNvbG9yLWdyYXktNik7CiAgfQp9CgpAbWVkaWEgKG1heC13aWR0aDogNDgwcHgpIHsKICA6cm9vdCB7CiAgICAtLW1heC13aWR0aDogMTAwdnc7CiAgfQp9CgovKiBSZXNldCAqLwpodG1sLApib2R5LApkaXYsCnNwYW4sCmFwcGxldCwKb2JqZWN0LAppZnJhbWUsCmgxLApoMiwKaDMsCmg0LApoNSwKaDYsCnAsCmEsCmltZywKb2wsCnVsLApsaSwKZmllbGRzZXQsCmZvcm0sCmxhYmVsLApsZWdlbmQsCnRhYmxlLApjYXB0aW9uLAp0Ym9keSwKdGZvb3QsCnRoZWFkLAp0ciwKdGgsCnRkIHsKICBib3JkZXI6IDA7CiAgb3V0bGluZTogMDsKICBmb250LXdlaWdodDogaW5oZXJpdDsKICBmb250LXN0eWxlOiBpbmhlcml0OwogIGZvbnQtc2l6ZTogMTAwJTsKICBmb250LWZhbWlseTogaW5oZXJpdDsKICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7CiAgbWFyZ2luOiAwOwogIHBhZGRpbmc6IDA7Cn0KOmZvY3VzIHsKICBvdXRsaW5lOiAwOwp9Cm9sLAp1bCB7CiAgbGlzdC1zdHlsZTogbm9uZTsKfQp0YWJsZSB7CiAgYm9yZGVyLWNvbGxhcHNlOiBzZXBhcmF0ZTsKICBib3JkZXItc3BhY2luZzogMDsKfQpjYXB0aW9uLAp0aCwKdGQgewogIHRleHQtYWxpZ246IGxlZnQ7CiAgZm9udC13ZWlnaHQ6IDQwMDsKfQpibG9ja3F1b3RlOmJlZm9yZSwKYmxvY2txdW90ZTphZnRlciwKcTpiZWZvcmUsCnE6YWZ0ZXIgewogIGNvbnRlbnQ6ICIiOwp9Ci5jbGVhcmZpeDphZnRlciB7CiAgY29udGVudDogIi4iOwogIGRpc3BsYXk6IGJsb2NrOwogIGNsZWFyOiBib3RoOwogIHZpc2liaWxpdHk6IGhpZGRlbjsKICBsaW5lLWhlaWdodDogMDsKICBoZWlnaHQ6IDA7Cn0KLmNsZWFyZml4IHsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Cn0KaHRtbFt4bWxuc10gLmNsZWFyZml4IHsKICBkaXNwbGF5OiBibG9jazsKfQoqIGh0bWwgLmNsZWFyZml4IHsKICBoZWlnaHQ6IDElOwp9Ci5jbGVhciB7CiAgY2xlYXI6IGJvdGg7CiAgaGVpZ2h0OiAwOwogIHdpZHRoOiAwOwogIG1hcmdpbjogMDsKICBwYWRkaW5nOiAwOwp9Ci5ubywKLmF1c2JsZW5kZW4gewogIGRpc3BsYXk6IG5vbmU7Cn0KaGVhZGVyLApzZWN0aW9uLApmb290ZXIsCmFzaWRlLApuYXYsCmFydGljbGUsCmZpZ3VyZSB7CiAgZGlzcGxheTogYmxvY2s7Cn0KCi8qIEFjdHVhbCBTdHlsZSAqLwoqIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKfQoKaHRtbCwKYm9keSB7CiAgZm9udC1mYW1pbHk6IHZhcigtLWZvbnQtZmFtaWx5LXJlZyk7CgogIGNvbG9yOiB2YXIoLS1jb2xvci1mb250LXJlZyk7CiAgYmFja2dyb3VuZDogdmFyKC0tY29sb3Itd2hpdGUpOwoKICBmb250LXNpemU6IHZhcigtLWZvbnQtc2l6ZS1yZWcpOwogIGxpbmUtaGVpZ2h0OiAxLjY7CiAgZm9udC13ZWlnaHQ6IHZhcigtLWZvbnQtd2VpZ2h0LXJlZyk7Cn0KCmgxIHsKICBmb250LXdlaWdodDogNTAwOwogIG1hcmdpbjogMXJlbSAwOwp9CgphIHsKICBjb2xvcjogdmFyKC0tY29sb3ItZ3JlZW4pOwp9CgpwICsgcCB7CiAgbWFyZ2luLXRvcDogOHB4Owp9Cgojd3JhcHBlciB7CiAgbWF4LXdpZHRoOiB2YXIoLS1tYXgtd2lkdGgpOwogIG1hcmdpbjogMCBhdXRvOwogIHBhZGRpbmc6IDIwcHg7Cn0KCiN0ZXN0SW5wdXQgewogIG1hcmdpbjogM3JlbSAwOwogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogIGdhcDogOHB4Owp9CiN0ZXN0SW5wdXQgbGFiZWwgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleDogMTsKICBhbGlnbi1pdGVtczogY2VudGVyOwp9CiN0ZXN0SW5wdXQgaW5wdXQsCmJ1dHRvbiB7CiAgb3V0bGluZTogbm9uZTsKICBib3JkZXI6IG5vbmU7CiAgYmFja2dyb3VuZDogbm9uZTsKICBib3JkZXItcmFkaXVzOiAwOwogIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseS1yZWcpOwogIGZvbnQtc2l6ZTogdmFyKC0tZm9udC1zaXplLXJlZyk7CiAgY29sb3I6IHZhcigtLWNvbG9yLWZvbnQtcmVnKTsKfQojdGVzdElucHV0IGxhYmVsIHNwYW4gewogIGZsZXg6IDA7CiAgcGFkZGluZy1yaWdodDogM3B4Owp9CiN0ZXN0SW5wdXQgaW5wdXQgewogIGJvcmRlci1ib3R0b206IHNvbGlkIDFweCB2YXIoLS1jb2xvci1ncmF5LTcpOwogIGZsZXg6IDE7Cn0KI3Rlc3RJbnB1dCBpbnB1dDo6cGxhY2Vob2xkZXIgewogIGNvbG9yOiB2YXIoLS1jb2xvci1mb250LWRpcyk7Cn0KI3Rlc3RJbnB1dCBidXR0b24gewogIGN1cnNvcjogcG9pbnRlcjsKICBiYWNrZ3JvdW5kOiB2YXIoLS1jb2xvci1ncmVlbik7CiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cy1yZWcpOwogIHBhZGRpbmc6IDAuM2VtIDAuNmVtOwogIGNvbG9yOiAjZmZmOwogIGZsZXgtZ3JvdzogMDsKfQpAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHsKICAjdGVzdElucHV0IHsKICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgfQogICN0ZXN0SW5wdXQgbGFiZWwgewogICAgd2lkdGg6IDEwMCU7CiAgICBmbGV4OiAxOwogIH0KICAjdGVzdElucHV0IGJ1dHRvbiB7CiAgICB3aWR0aDogMTAwJTsKICAgIGZsZXgtZ3JvdzogMTsKICB9CiAgI3Rlc3RJbnB1dCBsYWJlbCBzcGFuIHsKICAgIGZsZXg6IDE7CiAgfQogICN0ZXN0SW5wdXQgbGFiZWwgaW5wdXQgewogICAgZmxleDogMzsKICB9Cn0KCiNzb2NrZXQtaGlzdG9yeSB7CiAgbWFyZ2luOiA0MHB4IDA7Cn0KI3NvY2tldC1oaXN0b3J5IGxpIHsKICB3aWR0aDogMTAwJTsKICBwYWRkaW5nOiA4cHggMDsKICBib3JkZXItdG9wOiBzb2xpZCAxcHggdmFyKC0tY29sb3ItZ3JheS02KTsKfQoKI3NlcnZlckFkZHJlc3MsCiNjb25uZWN0aW9uU3RhdHVzLAouY29kZSB7CiAgZm9udC1mYW1pbHk6IHZhcigtLWZvbnQtZmFtaWx5LW1vbm8pOwogIGZvbnQtc2l6ZTogMC45ZW07CiAgYmFja2dyb3VuZDogdmFyKC0tY29sb3ItZ3JheS00KTsKICBwYWRkaW5nOiAycHggNHB4OwogIGJvcmRlci1yYWRpdXM6IDJweDsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Cn0KCiNjb25uZWN0aW9uU3RhdHVzLm9rLAouY29kZS5vayB7CiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItZ3JlZW4pOwogIGNvbG9yOiAjZmZmOwp9CgoubWVzc2FnZVRpbWUgewogIGNvbG9yOiB2YXIoLS1jb2xvci1ncmF5LTgpOwogIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseS1tb25vKTsKICBtYXJnaW4tcmlnaHQ6IDhweDsKfQoubWVzc2FnZUFycm93IHsKICBoZWlnaHQ6IDAuOGVtOwogIG1hcmdpbi1yaWdodDogOHB4Owp9Ci5tZXNzYWdlQ29udGVudERpc3BsYXkgewp9Ci5tZXNzYWdlVmFsdWVEaXNwbGF5OmJlZm9yZSB7CiAgY29udGVudDogIlsiOwogIGNvbG9yOiB2YXIoLS1jb2xvci1ncmF5LTgpOwp9Ci5tZXNzYWdlVmFsdWVEaXNwbGF5OmFmdGVyIHsKICBjb250ZW50OiAiXSI7CiAgY29sb3I6IHZhcigtLWNvbG9yLWdyYXktOCk7Cn0KLm1lc3NhZ2VWYWx1ZURpc3BsYXkgewogIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseS1tb25vKTsKICBjb2xvcjogdmFyKC0tY29sb3ItZ3JheS04KTsKICBtYXJnaW4tbGVmdDogOHB4Owp9Ci5tZXNzYWdlVmFsdWVEaXNwbGF5LWlzLW51bWJlciB7CiAgY29sb3I6IHZhcigtLWNvbG9yLXZpb2xldCk7Cn0K";

const setupHttpServer = () => {
    const httpServer = http.createServer((req, res) => {
        const headers = {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "OPTIONS, POST, GET",
            "Access-Control-Max-Age": 2592000,
            "Cache-Control": "max-age=86400",
            /** add other headers as per requirement */
        };
        if (req.method === "OPTIONS") {
            res.writeHead(204, headers);
            res.end();
            return;
        }
        let file = null;
        switch (req.url) {
            case "/favicon.ico":
                headers["Content-Type"] = "image/x-icon";
                file = favicon;
                break;
            case "/style.css":
                headers["Content-Type"] = "text/css";
                file = style;
                break;
            case "/socket-io.min.js":
                headers["Content-Type"] = "text/javascript";
                file = socketIOJS;
                break;
            case "/log-arrow-out.svg":
                headers["Content-Type"] = "image/svg+xml";
                file = logArrowOut;
                break;
            case "/log-arrow-in.svg":
                headers["Content-Type"] = "image/svg+xml";
                file = logArrowIn;
                break;
            default:
                headers["Content-Type"] = "text/html";
                delete headers["Cache-Control"];
                file = index;
        }
        res.writeHead(200, headers);
        const buffer = Buffer.from(file, "base64");
        const stream = new require$$0.Readable();
        stream.push(buffer);
        stream.push(null);
        stream.pipe(res);
    });
    return httpServer;
};

const BLOKDOTS_SOCKET_IO_SERVER_DEFAULT_PORT = 8777;
const getBlokdotsSocketIOServerAddress = () => {
    var _a;
    const currentIP = (_a = Object.values(require$$0$1.networkInterfaces())
        .flat()
        .find((i) => (i === null || i === void 0 ? void 0 : i.family) === "IPv4" && !i.internal)) === null || _a === void 0 ? void 0 : _a.address;
    if (!currentIP)
        return null;
    return `http://${currentIP}:${BLOKDOTS_SOCKET_IO_SERVER_DEFAULT_PORT}`;
};
class BlokdotsSocketIOServer {
    constructor() {
        this.activeIntegrations = {};
        this.io = null;
    }
    // Init is a separate function, because the constructor can
    // not be async
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                this.start();
                resolve(null);
            });
        });
    }
    start() {
        const httpServer = setupHttpServer();
        this.io = new socket_io.Server(httpServer, {
            // wsEngine: WebSocket.Server,
            pingInterval: 5000,
            pingTimeout: 5000,
            allowEIO3: true,
            cors: {
                origin: "*",
                methods: ["GET", "POST"],
            },
        });
        httpServer.listen(BLOKDOTS_SOCKET_IO_SERVER_DEFAULT_PORT, "0.0.0.0");
        // Sockets can connect to the general namespace to get updates about
        // all available integrations
        this.io.on("connection", (socket) => {
            // Updates are emitted whenever something about an integration changes,
            // but they can also be explicitely requested
            socket.on("requestInfo", () => {
                this.emitInfo(socket);
            });
            this.emitInfo(socket);
        });
    }
    emitInfo(socket) {
        if (!this.io)
            return;
        // If no specific socket requested it, we send it to all
        // sockets in the general namespace
        let socketsToEmitTo;
        if (!socket) {
            socketsToEmitTo = this.io.sockets;
        }
        else {
            socketsToEmitTo = socket;
        }
        socketsToEmitTo.emit("info", {
            url: getBlokdotsSocketIOServerAddress(),
            integrations: Object.values(this.activeIntegrations).map((i) => ({
                id: i.id,
                url: i.url,
                connections: i.ioNamespace.sockets.size,
            })),
        });
    }
    stop(callback) {
        if (!this.io)
            return;
        this.io.close(callback);
    }
    registerIntegration({ integrationName, handlers = [], onClientConnect, onClientDisconnect, }) {
        if (!this.io)
            return;
        let integration = this.activeIntegrations[integrationName];
        // The namespace already exists
        if (integration) {
            // Add the new handlers to the list of handlers to register for new connections
            integration.handlers = integration.handlers.concat(handlers);
            onClientConnect && integration.onClientConnect.push(onClientConnect);
            onClientDisconnect &&
                integration.onClientDisconnect.push(onClientDisconnect);
            // Register the new handlers on the already existing connections
            for (let [, socket] of integration.ioNamespace.sockets) {
                handlers.forEach(({ eventName, callback }) => {
                    socket.on(eventName, callback);
                });
            }
        }
        else {
            // Initialize the namespace for the first time
            this.activeIntegrations[integrationName] = {
                id: integrationName,
                url: `${getBlokdotsSocketIOServerAddress()}/${integrationName}`,
                handlers: [...handlers],
                ioNamespace: this.io.of("/" + integrationName),
                emit: (event, data) => {
                    var _a;
                    (_a = this.io) === null || _a === void 0 ? void 0 : _a.of("/" + integrationName).emit(event, data);
                    this.activeIntegrations[integrationName].handlers.forEach(({ eventName, callback }) => {
                        if (eventName === event) {
                            callback(data);
                        }
                    });
                },
                onClientConnect: onClientConnect ? [onClientConnect] : [],
                onClientDisconnect: onClientDisconnect ? [onClientDisconnect] : [],
                connections: 0,
            };
            integration = this.activeIntegrations[integrationName];
            // When a new socket connects to this namespace
            integration.ioNamespace.on("connection", (socket) => {
                // console.info("🕹 Client connected to", integrationName);
                // We register all existing handlers to this new socket
                integration.handlers.forEach(({ eventName, callback }) => {
                    socket.on(eventName, callback);
                });
                // We emit a message to all other sockets …
                integration.ioNamespace.emit("client-connect", {
                    integration: integrationName,
                    connections: integration.ioNamespace.sockets.size,
                });
                // … as well as to the integration registerers
                integration.onClientConnect.forEach((h) => {
                    h({
                        integration: integrationName,
                        connections: integration.ioNamespace.sockets.size,
                    });
                });
                this.emitInfo();
                socket.on("disconnect", (reason) => {
                    // We emit a message to all other sockets …
                    integration.ioNamespace.emit("client-disconnect", {
                        reason: reason,
                        integration: integrationName,
                        connections: integration.ioNamespace.sockets.size,
                    });
                    // … as well as to the integration registerers
                    integration.onClientDisconnect.forEach((h) => {
                        h({
                            reason: reason,
                            integration: integrationName,
                            connections: integration.ioNamespace.sockets.size,
                        });
                    });
                    this.emitInfo();
                });
            });
            this.emitInfo();
        }
        return Object.assign(Object.assign({}, integration), { connections: integration.ioNamespace.sockets.size });
    }
    unregisterIntegration({ integrationName, handlers = [], onClientConnect, onClientDisconnect, }) {
        let integration = this.activeIntegrations[integrationName];
        if (!integration) {
            return;
        }
        // Remove the handlers from the list of handlers to register for new connections
        integration.handlers = integration.handlers.filter((h) => handlers.some((hU) => hU.eventName === h.eventName && hU.callback === h.callback));
        integration.onClientConnect = integration.onClientConnect.filter((h) => h !== onClientConnect);
        integration.onClientDisconnect = integration.onClientDisconnect.filter((h) => h !== onClientDisconnect);
        // Remove the handlers from the existing connections
        for (let [, socket] of integration.ioNamespace.sockets) {
            handlers.forEach(({ eventName, callback }) => {
                socket.off(eventName, callback);
            });
        }
        // Nobody is listening anymore, remove the integration
        if (integration.handlers.length === 0) {
            integration.ioNamespace.disconnectSockets();
            delete this.activeIntegrations[integrationName];
            this.emitInfo();
        }
    }
}
let blokdotsSocketIOServer = null;
const getBlokdotsSocketIOServer = () => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve) => {
        // If the server hasn’t been setup yet, do that, then resolve the promise
        if (blokdotsSocketIOServer === null) {
            blokdotsSocketIOServer = new BlokdotsSocketIOServer();
            blokdotsSocketIOServer.init().then(() => {
                resolve(blokdotsSocketIOServer);
            });
        }
        else {
            // Else resolve the promise with the existing server immediately
            resolve(blokdotsSocketIOServer);
        }
    });
});

class Counter extends EventEmitter$2 {
    constructor(initialValue = 0) {
        super();
        this.value = initialValue;
    }
    countUp() {
        this.value++;
        this.emit("change", this.value);
    }
    countDown() {
        this.value--;
        this.emit("change", this.value);
    }
    setCountTo(value) {
        this.value = value;
        this.emit("change", this.value);
    }
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var johnnyFive = {exports: {}};

const EventEmitter$1 = EventEmitter$2;
const wm = new WeakMap();

let Emitter$h = class Emitter extends EventEmitter$1 {
  pause() {
    wm.set(this, {
      ...this._events
    });

    this._events = { __proto__: null };
  }
  resume() {
    const events = wm.get(this);
    if (events) {
      this._events = {
        __proto__: null,
        ...events
      };
      wm.set(this, null);
    }
  }
};

Object.assign(
  Emitter$h.prototype,
  EventEmitter$1.prototype
);

var emitter = Emitter$h;

var chalk = {exports: {}};

var escapeStringRegexp;
var hasRequiredEscapeStringRegexp;

function requireEscapeStringRegexp () {
	if (hasRequiredEscapeStringRegexp) return escapeStringRegexp;
	hasRequiredEscapeStringRegexp = 1;

	var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

	escapeStringRegexp = function (str) {
		if (typeof str !== 'string') {
			throw new TypeError('Expected a string');
		}

		return str.replace(matchOperatorsRe, '\\$&');
	};
	return escapeStringRegexp;
}

var ansiStyles = {exports: {}};

var conversions$3 = {exports: {}};

var colorName$1;
var hasRequiredColorName;

function requireColorName () {
	if (hasRequiredColorName) return colorName$1;
	hasRequiredColorName = 1;

	colorName$1 = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};
	return colorName$1;
}

/* MIT license */

var hasRequiredConversions;

function requireConversions () {
	if (hasRequiredConversions) return conversions$3.exports;
	hasRequiredConversions = 1;
	var cssKeywords = requireColorName();

	// NOTE: conversions should only return primitive values (i.e. arrays, or
	//       values that give correct `typeof` results).
	//       do not use box values types (i.e. Number(), String(), etc.)

	var reverseKeywords = {};
	for (var key in cssKeywords) {
		if (cssKeywords.hasOwnProperty(key)) {
			reverseKeywords[cssKeywords[key]] = key;
		}
	}

	var convert = conversions$3.exports = {
		rgb: {channels: 3, labels: 'rgb'},
		hsl: {channels: 3, labels: 'hsl'},
		hsv: {channels: 3, labels: 'hsv'},
		hwb: {channels: 3, labels: 'hwb'},
		cmyk: {channels: 4, labels: 'cmyk'},
		xyz: {channels: 3, labels: 'xyz'},
		lab: {channels: 3, labels: 'lab'},
		lch: {channels: 3, labels: 'lch'},
		hex: {channels: 1, labels: ['hex']},
		keyword: {channels: 1, labels: ['keyword']},
		ansi16: {channels: 1, labels: ['ansi16']},
		ansi256: {channels: 1, labels: ['ansi256']},
		hcg: {channels: 3, labels: ['h', 'c', 'g']},
		apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
		gray: {channels: 1, labels: ['gray']}
	};

	// hide .channels and .labels properties
	for (var model in convert) {
		if (convert.hasOwnProperty(model)) {
			if (!('channels' in convert[model])) {
				throw new Error('missing channels property: ' + model);
			}

			if (!('labels' in convert[model])) {
				throw new Error('missing channel labels property: ' + model);
			}

			if (convert[model].labels.length !== convert[model].channels) {
				throw new Error('channel and label counts mismatch: ' + model);
			}

			var channels = convert[model].channels;
			var labels = convert[model].labels;
			delete convert[model].channels;
			delete convert[model].labels;
			Object.defineProperty(convert[model], 'channels', {value: channels});
			Object.defineProperty(convert[model], 'labels', {value: labels});
		}
	}

	convert.rgb.hsl = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var min = Math.min(r, g, b);
		var max = Math.max(r, g, b);
		var delta = max - min;
		var h;
		var s;
		var l;

		if (max === min) {
			h = 0;
		} else if (r === max) {
			h = (g - b) / delta;
		} else if (g === max) {
			h = 2 + (b - r) / delta;
		} else if (b === max) {
			h = 4 + (r - g) / delta;
		}

		h = Math.min(h * 60, 360);

		if (h < 0) {
			h += 360;
		}

		l = (min + max) / 2;

		if (max === min) {
			s = 0;
		} else if (l <= 0.5) {
			s = delta / (max + min);
		} else {
			s = delta / (2 - max - min);
		}

		return [h, s * 100, l * 100];
	};

	convert.rgb.hsv = function (rgb) {
		var rdif;
		var gdif;
		var bdif;
		var h;
		var s;

		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var v = Math.max(r, g, b);
		var diff = v - Math.min(r, g, b);
		var diffc = function (c) {
			return (v - c) / 6 / diff + 1 / 2;
		};

		if (diff === 0) {
			h = s = 0;
		} else {
			s = diff / v;
			rdif = diffc(r);
			gdif = diffc(g);
			bdif = diffc(b);

			if (r === v) {
				h = bdif - gdif;
			} else if (g === v) {
				h = (1 / 3) + rdif - bdif;
			} else if (b === v) {
				h = (2 / 3) + gdif - rdif;
			}
			if (h < 0) {
				h += 1;
			} else if (h > 1) {
				h -= 1;
			}
		}

		return [
			h * 360,
			s * 100,
			v * 100
		];
	};

	convert.rgb.hwb = function (rgb) {
		var r = rgb[0];
		var g = rgb[1];
		var b = rgb[2];
		var h = convert.rgb.hsl(rgb)[0];
		var w = 1 / 255 * Math.min(r, Math.min(g, b));

		b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

		return [h, w * 100, b * 100];
	};

	convert.rgb.cmyk = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var c;
		var m;
		var y;
		var k;

		k = Math.min(1 - r, 1 - g, 1 - b);
		c = (1 - r - k) / (1 - k) || 0;
		m = (1 - g - k) / (1 - k) || 0;
		y = (1 - b - k) / (1 - k) || 0;

		return [c * 100, m * 100, y * 100, k * 100];
	};

	/**
	 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	 * */
	function comparativeDistance(x, y) {
		return (
			Math.pow(x[0] - y[0], 2) +
			Math.pow(x[1] - y[1], 2) +
			Math.pow(x[2] - y[2], 2)
		);
	}

	convert.rgb.keyword = function (rgb) {
		var reversed = reverseKeywords[rgb];
		if (reversed) {
			return reversed;
		}

		var currentClosestDistance = Infinity;
		var currentClosestKeyword;

		for (var keyword in cssKeywords) {
			if (cssKeywords.hasOwnProperty(keyword)) {
				var value = cssKeywords[keyword];

				// Compute comparative distance
				var distance = comparativeDistance(rgb, value);

				// Check if its less, if so set as closest
				if (distance < currentClosestDistance) {
					currentClosestDistance = distance;
					currentClosestKeyword = keyword;
				}
			}
		}

		return currentClosestKeyword;
	};

	convert.keyword.rgb = function (keyword) {
		return cssKeywords[keyword];
	};

	convert.rgb.xyz = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;

		// assume sRGB
		r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
		g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
		b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

		var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
		var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
		var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

		return [x * 100, y * 100, z * 100];
	};

	convert.rgb.lab = function (rgb) {
		var xyz = convert.rgb.xyz(rgb);
		var x = xyz[0];
		var y = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;

		x /= 95.047;
		y /= 100;
		z /= 108.883;

		x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

		l = (116 * y) - 16;
		a = 500 * (x - y);
		b = 200 * (y - z);

		return [l, a, b];
	};

	convert.hsl.rgb = function (hsl) {
		var h = hsl[0] / 360;
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var t1;
		var t2;
		var t3;
		var rgb;
		var val;

		if (s === 0) {
			val = l * 255;
			return [val, val, val];
		}

		if (l < 0.5) {
			t2 = l * (1 + s);
		} else {
			t2 = l + s - l * s;
		}

		t1 = 2 * l - t2;

		rgb = [0, 0, 0];
		for (var i = 0; i < 3; i++) {
			t3 = h + 1 / 3 * -(i - 1);
			if (t3 < 0) {
				t3++;
			}
			if (t3 > 1) {
				t3--;
			}

			if (6 * t3 < 1) {
				val = t1 + (t2 - t1) * 6 * t3;
			} else if (2 * t3 < 1) {
				val = t2;
			} else if (3 * t3 < 2) {
				val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
			} else {
				val = t1;
			}

			rgb[i] = val * 255;
		}

		return rgb;
	};

	convert.hsl.hsv = function (hsl) {
		var h = hsl[0];
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var smin = s;
		var lmin = Math.max(l, 0.01);
		var sv;
		var v;

		l *= 2;
		s *= (l <= 1) ? l : 2 - l;
		smin *= lmin <= 1 ? lmin : 2 - lmin;
		v = (l + s) / 2;
		sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

		return [h, sv * 100, v * 100];
	};

	convert.hsv.rgb = function (hsv) {
		var h = hsv[0] / 60;
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var hi = Math.floor(h) % 6;

		var f = h - Math.floor(h);
		var p = 255 * v * (1 - s);
		var q = 255 * v * (1 - (s * f));
		var t = 255 * v * (1 - (s * (1 - f)));
		v *= 255;

		switch (hi) {
			case 0:
				return [v, t, p];
			case 1:
				return [q, v, p];
			case 2:
				return [p, v, t];
			case 3:
				return [p, q, v];
			case 4:
				return [t, p, v];
			case 5:
				return [v, p, q];
		}
	};

	convert.hsv.hsl = function (hsv) {
		var h = hsv[0];
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var vmin = Math.max(v, 0.01);
		var lmin;
		var sl;
		var l;

		l = (2 - s) * v;
		lmin = (2 - s) * vmin;
		sl = s * vmin;
		sl /= (lmin <= 1) ? lmin : 2 - lmin;
		sl = sl || 0;
		l /= 2;

		return [h, sl * 100, l * 100];
	};

	// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
	convert.hwb.rgb = function (hwb) {
		var h = hwb[0] / 360;
		var wh = hwb[1] / 100;
		var bl = hwb[2] / 100;
		var ratio = wh + bl;
		var i;
		var v;
		var f;
		var n;

		// wh + bl cant be > 1
		if (ratio > 1) {
			wh /= ratio;
			bl /= ratio;
		}

		i = Math.floor(6 * h);
		v = 1 - bl;
		f = 6 * h - i;

		if ((i & 0x01) !== 0) {
			f = 1 - f;
		}

		n = wh + f * (v - wh); // linear interpolation

		var r;
		var g;
		var b;
		switch (i) {
			default:
			case 6:
			case 0: r = v; g = n; b = wh; break;
			case 1: r = n; g = v; b = wh; break;
			case 2: r = wh; g = v; b = n; break;
			case 3: r = wh; g = n; b = v; break;
			case 4: r = n; g = wh; b = v; break;
			case 5: r = v; g = wh; b = n; break;
		}

		return [r * 255, g * 255, b * 255];
	};

	convert.cmyk.rgb = function (cmyk) {
		var c = cmyk[0] / 100;
		var m = cmyk[1] / 100;
		var y = cmyk[2] / 100;
		var k = cmyk[3] / 100;
		var r;
		var g;
		var b;

		r = 1 - Math.min(1, c * (1 - k) + k);
		g = 1 - Math.min(1, m * (1 - k) + k);
		b = 1 - Math.min(1, y * (1 - k) + k);

		return [r * 255, g * 255, b * 255];
	};

	convert.xyz.rgb = function (xyz) {
		var x = xyz[0] / 100;
		var y = xyz[1] / 100;
		var z = xyz[2] / 100;
		var r;
		var g;
		var b;

		r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
		g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
		b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

		// assume sRGB
		r = r > 0.0031308
			? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
			: r * 12.92;

		g = g > 0.0031308
			? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
			: g * 12.92;

		b = b > 0.0031308
			? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
			: b * 12.92;

		r = Math.min(Math.max(0, r), 1);
		g = Math.min(Math.max(0, g), 1);
		b = Math.min(Math.max(0, b), 1);

		return [r * 255, g * 255, b * 255];
	};

	convert.xyz.lab = function (xyz) {
		var x = xyz[0];
		var y = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;

		x /= 95.047;
		y /= 100;
		z /= 108.883;

		x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

		l = (116 * y) - 16;
		a = 500 * (x - y);
		b = 200 * (y - z);

		return [l, a, b];
	};

	convert.lab.xyz = function (lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var x;
		var y;
		var z;

		y = (l + 16) / 116;
		x = a / 500 + y;
		z = y - b / 200;

		var y2 = Math.pow(y, 3);
		var x2 = Math.pow(x, 3);
		var z2 = Math.pow(z, 3);
		y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
		x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
		z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

		x *= 95.047;
		y *= 100;
		z *= 108.883;

		return [x, y, z];
	};

	convert.lab.lch = function (lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var hr;
		var h;
		var c;

		hr = Math.atan2(b, a);
		h = hr * 360 / 2 / Math.PI;

		if (h < 0) {
			h += 360;
		}

		c = Math.sqrt(a * a + b * b);

		return [l, c, h];
	};

	convert.lch.lab = function (lch) {
		var l = lch[0];
		var c = lch[1];
		var h = lch[2];
		var a;
		var b;
		var hr;

		hr = h / 360 * 2 * Math.PI;
		a = c * Math.cos(hr);
		b = c * Math.sin(hr);

		return [l, a, b];
	};

	convert.rgb.ansi16 = function (args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];
		var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

		value = Math.round(value / 50);

		if (value === 0) {
			return 30;
		}

		var ansi = 30
			+ ((Math.round(b / 255) << 2)
			| (Math.round(g / 255) << 1)
			| Math.round(r / 255));

		if (value === 2) {
			ansi += 60;
		}

		return ansi;
	};

	convert.hsv.ansi16 = function (args) {
		// optimization here; we already know the value and don't need to get
		// it converted for us.
		return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
	};

	convert.rgb.ansi256 = function (args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];

		// we use the extended greyscale palette here, with the exception of
		// black and white. normal palette only has 4 greyscale shades.
		if (r === g && g === b) {
			if (r < 8) {
				return 16;
			}

			if (r > 248) {
				return 231;
			}

			return Math.round(((r - 8) / 247) * 24) + 232;
		}

		var ansi = 16
			+ (36 * Math.round(r / 255 * 5))
			+ (6 * Math.round(g / 255 * 5))
			+ Math.round(b / 255 * 5);

		return ansi;
	};

	convert.ansi16.rgb = function (args) {
		var color = args % 10;

		// handle greyscale
		if (color === 0 || color === 7) {
			if (args > 50) {
				color += 3.5;
			}

			color = color / 10.5 * 255;

			return [color, color, color];
		}

		var mult = (~~(args > 50) + 1) * 0.5;
		var r = ((color & 1) * mult) * 255;
		var g = (((color >> 1) & 1) * mult) * 255;
		var b = (((color >> 2) & 1) * mult) * 255;

		return [r, g, b];
	};

	convert.ansi256.rgb = function (args) {
		// handle greyscale
		if (args >= 232) {
			var c = (args - 232) * 10 + 8;
			return [c, c, c];
		}

		args -= 16;

		var rem;
		var r = Math.floor(args / 36) / 5 * 255;
		var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
		var b = (rem % 6) / 5 * 255;

		return [r, g, b];
	};

	convert.rgb.hex = function (args) {
		var integer = ((Math.round(args[0]) & 0xFF) << 16)
			+ ((Math.round(args[1]) & 0xFF) << 8)
			+ (Math.round(args[2]) & 0xFF);

		var string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert.hex.rgb = function (args) {
		var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
		if (!match) {
			return [0, 0, 0];
		}

		var colorString = match[0];

		if (match[0].length === 3) {
			colorString = colorString.split('').map(function (char) {
				return char + char;
			}).join('');
		}

		var integer = parseInt(colorString, 16);
		var r = (integer >> 16) & 0xFF;
		var g = (integer >> 8) & 0xFF;
		var b = integer & 0xFF;

		return [r, g, b];
	};

	convert.rgb.hcg = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var max = Math.max(Math.max(r, g), b);
		var min = Math.min(Math.min(r, g), b);
		var chroma = (max - min);
		var grayscale;
		var hue;

		if (chroma < 1) {
			grayscale = min / (1 - chroma);
		} else {
			grayscale = 0;
		}

		if (chroma <= 0) {
			hue = 0;
		} else
		if (max === r) {
			hue = ((g - b) / chroma) % 6;
		} else
		if (max === g) {
			hue = 2 + (b - r) / chroma;
		} else {
			hue = 4 + (r - g) / chroma + 4;
		}

		hue /= 6;
		hue %= 1;

		return [hue * 360, chroma * 100, grayscale * 100];
	};

	convert.hsl.hcg = function (hsl) {
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var c = 1;
		var f = 0;

		if (l < 0.5) {
			c = 2.0 * s * l;
		} else {
			c = 2.0 * s * (1.0 - l);
		}

		if (c < 1.0) {
			f = (l - 0.5 * c) / (1.0 - c);
		}

		return [hsl[0], c * 100, f * 100];
	};

	convert.hsv.hcg = function (hsv) {
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;

		var c = s * v;
		var f = 0;

		if (c < 1.0) {
			f = (v - c) / (1 - c);
		}

		return [hsv[0], c * 100, f * 100];
	};

	convert.hcg.rgb = function (hcg) {
		var h = hcg[0] / 360;
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;

		if (c === 0.0) {
			return [g * 255, g * 255, g * 255];
		}

		var pure = [0, 0, 0];
		var hi = (h % 1) * 6;
		var v = hi % 1;
		var w = 1 - v;
		var mg = 0;

		switch (Math.floor(hi)) {
			case 0:
				pure[0] = 1; pure[1] = v; pure[2] = 0; break;
			case 1:
				pure[0] = w; pure[1] = 1; pure[2] = 0; break;
			case 2:
				pure[0] = 0; pure[1] = 1; pure[2] = v; break;
			case 3:
				pure[0] = 0; pure[1] = w; pure[2] = 1; break;
			case 4:
				pure[0] = v; pure[1] = 0; pure[2] = 1; break;
			default:
				pure[0] = 1; pure[1] = 0; pure[2] = w;
		}

		mg = (1.0 - c) * g;

		return [
			(c * pure[0] + mg) * 255,
			(c * pure[1] + mg) * 255,
			(c * pure[2] + mg) * 255
		];
	};

	convert.hcg.hsv = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;

		var v = c + g * (1.0 - c);
		var f = 0;

		if (v > 0.0) {
			f = c / v;
		}

		return [hcg[0], f * 100, v * 100];
	};

	convert.hcg.hsl = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;

		var l = g * (1.0 - c) + 0.5 * c;
		var s = 0;

		if (l > 0.0 && l < 0.5) {
			s = c / (2 * l);
		} else
		if (l >= 0.5 && l < 1.0) {
			s = c / (2 * (1 - l));
		}

		return [hcg[0], s * 100, l * 100];
	};

	convert.hcg.hwb = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		var v = c + g * (1.0 - c);
		return [hcg[0], (v - c) * 100, (1 - v) * 100];
	};

	convert.hwb.hcg = function (hwb) {
		var w = hwb[1] / 100;
		var b = hwb[2] / 100;
		var v = 1 - b;
		var c = v - w;
		var g = 0;

		if (c < 1) {
			g = (v - c) / (1 - c);
		}

		return [hwb[0], c * 100, g * 100];
	};

	convert.apple.rgb = function (apple) {
		return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
	};

	convert.rgb.apple = function (rgb) {
		return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
	};

	convert.gray.rgb = function (args) {
		return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
	};

	convert.gray.hsl = convert.gray.hsv = function (args) {
		return [0, 0, args[0]];
	};

	convert.gray.hwb = function (gray) {
		return [0, 100, gray[0]];
	};

	convert.gray.cmyk = function (gray) {
		return [0, 0, 0, gray[0]];
	};

	convert.gray.lab = function (gray) {
		return [gray[0], 0, 0];
	};

	convert.gray.hex = function (gray) {
		var val = Math.round(gray[0] / 100 * 255) & 0xFF;
		var integer = (val << 16) + (val << 8) + val;

		var string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert.rgb.gray = function (rgb) {
		var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
		return [val / 255 * 100];
	};
	return conversions$3.exports;
}

var route$2;
var hasRequiredRoute;

function requireRoute () {
	if (hasRequiredRoute) return route$2;
	hasRequiredRoute = 1;
	var conversions = requireConversions();

	/*
		this function routes a model to all other models.

		all functions that are routed have a property `.conversion` attached
		to the returned synthetic function. This property is an array
		of strings, each with the steps in between the 'from' and 'to'
		color models (inclusive).

		conversions that are not possible simply are not included.
	*/

	function buildGraph() {
		var graph = {};
		// https://jsperf.com/object-keys-vs-for-in-with-closure/3
		var models = Object.keys(conversions);

		for (var len = models.length, i = 0; i < len; i++) {
			graph[models[i]] = {
				// http://jsperf.com/1-vs-infinity
				// micro-opt, but this is simple.
				distance: -1,
				parent: null
			};
		}

		return graph;
	}

	// https://en.wikipedia.org/wiki/Breadth-first_search
	function deriveBFS(fromModel) {
		var graph = buildGraph();
		var queue = [fromModel]; // unshift -> queue -> pop

		graph[fromModel].distance = 0;

		while (queue.length) {
			var current = queue.pop();
			var adjacents = Object.keys(conversions[current]);

			for (var len = adjacents.length, i = 0; i < len; i++) {
				var adjacent = adjacents[i];
				var node = graph[adjacent];

				if (node.distance === -1) {
					node.distance = graph[current].distance + 1;
					node.parent = current;
					queue.unshift(adjacent);
				}
			}
		}

		return graph;
	}

	function link(from, to) {
		return function (args) {
			return to(from(args));
		};
	}

	function wrapConversion(toModel, graph) {
		var path = [graph[toModel].parent, toModel];
		var fn = conversions[graph[toModel].parent][toModel];

		var cur = graph[toModel].parent;
		while (graph[cur].parent) {
			path.unshift(graph[cur].parent);
			fn = link(conversions[graph[cur].parent][cur], fn);
			cur = graph[cur].parent;
		}

		fn.conversion = path;
		return fn;
	}

	route$2 = function (fromModel) {
		var graph = deriveBFS(fromModel);
		var conversion = {};

		var models = Object.keys(graph);
		for (var len = models.length, i = 0; i < len; i++) {
			var toModel = models[i];
			var node = graph[toModel];

			if (node.parent === null) {
				// no possible conversion, or this node is the source model.
				continue;
			}

			conversion[toModel] = wrapConversion(toModel, graph);
		}

		return conversion;
	};
	return route$2;
}

var colorConvert$1;
var hasRequiredColorConvert;

function requireColorConvert () {
	if (hasRequiredColorConvert) return colorConvert$1;
	hasRequiredColorConvert = 1;
	var conversions = requireConversions();
	var route = requireRoute();

	var convert = {};

	var models = Object.keys(conversions);

	function wrapRaw(fn) {
		var wrappedFn = function (args) {
			if (args === undefined || args === null) {
				return args;
			}

			if (arguments.length > 1) {
				args = Array.prototype.slice.call(arguments);
			}

			return fn(args);
		};

		// preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	function wrapRounded(fn) {
		var wrappedFn = function (args) {
			if (args === undefined || args === null) {
				return args;
			}

			if (arguments.length > 1) {
				args = Array.prototype.slice.call(arguments);
			}

			var result = fn(args);

			// we're assuming the result is an array here.
			// see notice in conversions.js; don't use box types
			// in conversion functions.
			if (typeof result === 'object') {
				for (var len = result.length, i = 0; i < len; i++) {
					result[i] = Math.round(result[i]);
				}
			}

			return result;
		};

		// preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	models.forEach(function (fromModel) {
		convert[fromModel] = {};

		Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
		Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

		var routes = route(fromModel);
		var routeModels = Object.keys(routes);

		routeModels.forEach(function (toModel) {
			var fn = routes[toModel];

			convert[fromModel][toModel] = wrapRounded(fn);
			convert[fromModel][toModel].raw = wrapRaw(fn);
		});
	});

	colorConvert$1 = convert;
	return colorConvert$1;
}

ansiStyles.exports;

var hasRequiredAnsiStyles;

function requireAnsiStyles () {
	if (hasRequiredAnsiStyles) return ansiStyles.exports;
	hasRequiredAnsiStyles = 1;
	(function (module) {
		const colorConvert = requireColorConvert();

		const wrapAnsi16 = (fn, offset) => function () {
			const code = fn.apply(colorConvert, arguments);
			return `\u001B[${code + offset}m`;
		};

		const wrapAnsi256 = (fn, offset) => function () {
			const code = fn.apply(colorConvert, arguments);
			return `\u001B[${38 + offset};5;${code}m`;
		};

		const wrapAnsi16m = (fn, offset) => function () {
			const rgb = fn.apply(colorConvert, arguments);
			return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
		};

		function assembleStyles() {
			const codes = new Map();
			const styles = {
				modifier: {
					reset: [0, 0],
					// 21 isn't widely supported and 22 does the same thing
					bold: [1, 22],
					dim: [2, 22],
					italic: [3, 23],
					underline: [4, 24],
					inverse: [7, 27],
					hidden: [8, 28],
					strikethrough: [9, 29]
				},
				color: {
					black: [30, 39],
					red: [31, 39],
					green: [32, 39],
					yellow: [33, 39],
					blue: [34, 39],
					magenta: [35, 39],
					cyan: [36, 39],
					white: [37, 39],
					gray: [90, 39],

					// Bright color
					redBright: [91, 39],
					greenBright: [92, 39],
					yellowBright: [93, 39],
					blueBright: [94, 39],
					magentaBright: [95, 39],
					cyanBright: [96, 39],
					whiteBright: [97, 39]
				},
				bgColor: {
					bgBlack: [40, 49],
					bgRed: [41, 49],
					bgGreen: [42, 49],
					bgYellow: [43, 49],
					bgBlue: [44, 49],
					bgMagenta: [45, 49],
					bgCyan: [46, 49],
					bgWhite: [47, 49],

					// Bright color
					bgBlackBright: [100, 49],
					bgRedBright: [101, 49],
					bgGreenBright: [102, 49],
					bgYellowBright: [103, 49],
					bgBlueBright: [104, 49],
					bgMagentaBright: [105, 49],
					bgCyanBright: [106, 49],
					bgWhiteBright: [107, 49]
				}
			};

			// Fix humans
			styles.color.grey = styles.color.gray;

			for (const groupName of Object.keys(styles)) {
				const group = styles[groupName];

				for (const styleName of Object.keys(group)) {
					const style = group[styleName];

					styles[styleName] = {
						open: `\u001B[${style[0]}m`,
						close: `\u001B[${style[1]}m`
					};

					group[styleName] = styles[styleName];

					codes.set(style[0], style[1]);
				}

				Object.defineProperty(styles, groupName, {
					value: group,
					enumerable: false
				});

				Object.defineProperty(styles, 'codes', {
					value: codes,
					enumerable: false
				});
			}

			const ansi2ansi = n => n;
			const rgb2rgb = (r, g, b) => [r, g, b];

			styles.color.close = '\u001B[39m';
			styles.bgColor.close = '\u001B[49m';

			styles.color.ansi = {
				ansi: wrapAnsi16(ansi2ansi, 0)
			};
			styles.color.ansi256 = {
				ansi256: wrapAnsi256(ansi2ansi, 0)
			};
			styles.color.ansi16m = {
				rgb: wrapAnsi16m(rgb2rgb, 0)
			};

			styles.bgColor.ansi = {
				ansi: wrapAnsi16(ansi2ansi, 10)
			};
			styles.bgColor.ansi256 = {
				ansi256: wrapAnsi256(ansi2ansi, 10)
			};
			styles.bgColor.ansi16m = {
				rgb: wrapAnsi16m(rgb2rgb, 10)
			};

			for (let key of Object.keys(colorConvert)) {
				if (typeof colorConvert[key] !== 'object') {
					continue;
				}

				const suite = colorConvert[key];

				if (key === 'ansi16') {
					key = 'ansi';
				}

				if ('ansi16' in suite) {
					styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
					styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
				}

				if ('ansi256' in suite) {
					styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
					styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
				}

				if ('rgb' in suite) {
					styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
					styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
				}
			}

			return styles;
		}

		// Make the export immutable
		Object.defineProperty(module, 'exports', {
			enumerable: true,
			get: assembleStyles
		}); 
	} (ansiStyles));
	return ansiStyles.exports;
}

var hasFlag$1;
var hasRequiredHasFlag$1;

function requireHasFlag$1 () {
	if (hasRequiredHasFlag$1) return hasFlag$1;
	hasRequiredHasFlag$1 = 1;
	hasFlag$1 = function (flag, argv) {
		argv = argv || process.argv;

		var terminatorPos = argv.indexOf('--');
		var prefix = /^-{1,2}/.test(flag) ? '' : '--';
		var pos = argv.indexOf(prefix + flag);

		return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
	};
	return hasFlag$1;
}

var supportsColor;
var hasRequiredSupportsColor$1;

function requireSupportsColor$1 () {
	if (hasRequiredSupportsColor$1) return supportsColor;
	hasRequiredSupportsColor$1 = 1;
	const os = require$$0$1;
	const hasFlag = requireHasFlag$1();

	const env = process.env;

	const support = level => {
		if (level === 0) {
			return false;
		}

		return {
			level,
			hasBasic: true,
			has256: level >= 2,
			has16m: level >= 3
		};
	};

	let supportLevel = (() => {
		if (hasFlag('no-color') ||
			hasFlag('no-colors') ||
			hasFlag('color=false')) {
			return 0;
		}

		if (hasFlag('color=16m') ||
			hasFlag('color=full') ||
			hasFlag('color=truecolor')) {
			return 3;
		}

		if (hasFlag('color=256')) {
			return 2;
		}

		if (hasFlag('color') ||
			hasFlag('colors') ||
			hasFlag('color=true') ||
			hasFlag('color=always')) {
			return 1;
		}

		if (process.stdout && !process.stdout.isTTY) {
			return 0;
		}

		if (process.platform === 'win32') {
			// Node.js 7.5.0 is the first version of Node.js to include a patch to
			// libuv that enables 256 color output on Windows. Anything earlier and it
			// won't work. However, here we target Node.js 8 at minimum as it is an LTS
			// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
			// release that supports 256 colors.
			const osRelease = os.release().split('.');
			if (
				Number(process.versions.node.split('.')[0]) >= 8 &&
				Number(osRelease[0]) >= 10 &&
				Number(osRelease[2]) >= 10586
			) {
				return 2;
			}

			return 1;
		}

		if ('CI' in env) {
			if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
				return 1;
			}

			return 0;
		}

		if ('TEAMCITY_VERSION' in env) {
			return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
		}

		if ('TERM_PROGRAM' in env) {
			const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

			switch (env.TERM_PROGRAM) {
				case 'iTerm.app':
					return version >= 3 ? 3 : 2;
				case 'Hyper':
					return 3;
				case 'Apple_Terminal':
					return 2;
				// No default
			}
		}

		if (/-256(color)?$/i.test(env.TERM)) {
			return 2;
		}

		if (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
			return 1;
		}

		if ('COLORTERM' in env) {
			return 1;
		}

		if (env.TERM === 'dumb') {
			return 0;
		}

		return 0;
	})();

	if ('FORCE_COLOR' in env) {
		supportLevel = parseInt(env.FORCE_COLOR, 10) === 0 ? 0 : (supportLevel || 1);
	}

	supportsColor = process && support(supportLevel);
	return supportsColor;
}

var templates;
var hasRequiredTemplates;

function requireTemplates () {
	if (hasRequiredTemplates) return templates;
	hasRequiredTemplates = 1;
	const TEMPLATE_REGEX = /(?:\\(u[a-f0-9]{4}|x[a-f0-9]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
	const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
	const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
	const ESCAPE_REGEX = /\\(u[0-9a-f]{4}|x[0-9a-f]{2}|.)|([^\\])/gi;

	const ESCAPES = {
		n: '\n',
		r: '\r',
		t: '\t',
		b: '\b',
		f: '\f',
		v: '\v',
		0: '\0',
		'\\': '\\',
		e: '\u001b',
		a: '\u0007'
	};

	function unescape(c) {
		if ((c[0] === 'u' && c.length === 5) || (c[0] === 'x' && c.length === 3)) {
			return String.fromCharCode(parseInt(c.slice(1), 16));
		}

		return ESCAPES[c] || c;
	}

	function parseArguments(name, args) {
		const results = [];
		const chunks = args.trim().split(/\s*,\s*/g);
		let matches;

		for (const chunk of chunks) {
			if (!isNaN(chunk)) {
				results.push(Number(chunk));
			} else if ((matches = chunk.match(STRING_REGEX))) {
				results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));
			} else {
				throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
			}
		}

		return results;
	}

	function parseStyle(style) {
		STYLE_REGEX.lastIndex = 0;

		const results = [];
		let matches;

		while ((matches = STYLE_REGEX.exec(style)) !== null) {
			const name = matches[1];

			if (matches[2]) {
				const args = parseArguments(name, matches[2]);
				results.push([name].concat(args));
			} else {
				results.push([name]);
			}
		}

		return results;
	}

	function buildStyle(chalk, styles) {
		const enabled = {};

		for (const layer of styles) {
			for (const style of layer.styles) {
				enabled[style[0]] = layer.inverse ? null : style.slice(1);
			}
		}

		let current = chalk;
		for (const styleName of Object.keys(enabled)) {
			if (Array.isArray(enabled[styleName])) {
				if (!(styleName in current)) {
					throw new Error(`Unknown Chalk style: ${styleName}`);
				}

				if (enabled[styleName].length > 0) {
					current = current[styleName].apply(current, enabled[styleName]);
				} else {
					current = current[styleName];
				}
			}
		}

		return current;
	}

	templates = (chalk, tmp) => {
		const styles = [];
		const chunks = [];
		let chunk = [];

		// eslint-disable-next-line max-params
		tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
			if (escapeChar) {
				chunk.push(unescape(escapeChar));
			} else if (style) {
				const str = chunk.join('');
				chunk = [];
				chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
				styles.push({inverse, styles: parseStyle(style)});
			} else if (close) {
				if (styles.length === 0) {
					throw new Error('Found extraneous } in Chalk template literal');
				}

				chunks.push(buildStyle(chalk, styles)(chunk.join('')));
				chunk = [];
				styles.pop();
			} else {
				chunk.push(chr);
			}
		});

		chunks.push(chunk.join(''));

		if (styles.length > 0) {
			const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
			throw new Error(errMsg);
		}

		return chunks.join('');
	};
	return templates;
}

var hasRequiredChalk;

function requireChalk () {
	if (hasRequiredChalk) return chalk.exports;
	hasRequiredChalk = 1;
	const escapeStringRegexp = requireEscapeStringRegexp();
	const ansiStyles = requireAnsiStyles();
	const supportsColor = requireSupportsColor$1();

	const template = requireTemplates();

	const isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm');

	// `supportsColor.level` → `ansiStyles.color[name]` mapping
	const levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];

	// `color-convert` models to exclude from the Chalk API due to conflicts and such
	const skipModels = new Set(['gray']);

	const styles = Object.create(null);

	function applyOptions(obj, options) {
		options = options || {};

		// Detect level if not set manually
		const scLevel = supportsColor ? supportsColor.level : 0;
		obj.level = options.level === undefined ? scLevel : options.level;
		obj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;
	}

	function Chalk(options) {
		// We check for this.template here since calling `chalk.constructor()`
		// by itself will have a `this` of a previously constructed chalk object
		if (!this || !(this instanceof Chalk) || this.template) {
			const chalk = {};
			applyOptions(chalk, options);

			chalk.template = function () {
				const args = [].slice.call(arguments);
				return chalkTag.apply(null, [chalk.template].concat(args));
			};

			Object.setPrototypeOf(chalk, Chalk.prototype);
			Object.setPrototypeOf(chalk.template, chalk);

			chalk.template.constructor = Chalk;

			return chalk.template;
		}

		applyOptions(this, options);
	}

	// Use bright blue on Windows as the normal blue color is illegible
	if (isSimpleWindowsTerm) {
		ansiStyles.blue.open = '\u001B[94m';
	}

	for (const key of Object.keys(ansiStyles)) {
		ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');

		styles[key] = {
			get() {
				const codes = ansiStyles[key];
				return build.call(this, this._styles ? this._styles.concat(codes) : [codes], key);
			}
		};
	}

	ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');
	for (const model of Object.keys(ansiStyles.color.ansi)) {
		if (skipModels.has(model)) {
			continue;
		}

		styles[model] = {
			get() {
				const level = this.level;
				return function () {
					const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
					const codes = {
						open,
						close: ansiStyles.color.close,
						closeRe: ansiStyles.color.closeRe
					};
					return build.call(this, this._styles ? this._styles.concat(codes) : [codes], model);
				};
			}
		};
	}

	ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');
	for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
		if (skipModels.has(model)) {
			continue;
		}

		const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
		styles[bgModel] = {
			get() {
				const level = this.level;
				return function () {
					const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
					const codes = {
						open,
						close: ansiStyles.bgColor.close,
						closeRe: ansiStyles.bgColor.closeRe
					};
					return build.call(this, this._styles ? this._styles.concat(codes) : [codes], model);
				};
			}
		};
	}

	const proto = Object.defineProperties(() => {}, styles);

	function build(_styles, key) {
		const builder = function () {
			return applyStyle.apply(builder, arguments);
		};

		builder._styles = _styles;

		const self = this;

		Object.defineProperty(builder, 'level', {
			enumerable: true,
			get() {
				return self.level;
			},
			set(level) {
				self.level = level;
			}
		});

		Object.defineProperty(builder, 'enabled', {
			enumerable: true,
			get() {
				return self.enabled;
			},
			set(enabled) {
				self.enabled = enabled;
			}
		});

		// See below for fix regarding invisible grey/dim combination on Windows
		builder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey';

		// `__proto__` is used because we must return a function, but there is
		// no way to create a function with a different prototype
		builder.__proto__ = proto; // eslint-disable-line no-proto

		return builder;
	}

	function applyStyle() {
		// Support varags, but simply cast to string in case there's only one arg
		const args = arguments;
		const argsLen = args.length;
		let str = String(arguments[0]);

		if (argsLen === 0) {
			return '';
		}

		if (argsLen > 1) {
			// Don't slice `arguments`, it prevents V8 optimizations
			for (let a = 1; a < argsLen; a++) {
				str += ' ' + args[a];
			}
		}

		if (!this.enabled || this.level <= 0 || !str) {
			return str;
		}

		// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
		// see https://github.com/chalk/chalk/issues/58
		// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.
		const originalDim = ansiStyles.dim.open;
		if (isSimpleWindowsTerm && this.hasGrey) {
			ansiStyles.dim.open = '';
		}

		for (const code of this._styles.slice().reverse()) {
			// Replace any instances already present with a re-opening code
			// otherwise only the part of the string until said closing code
			// will be colored, and the rest will simply be 'plain'.
			str = code.open + str.replace(code.closeRe, code.open) + code.close;

			// Close the styling before a linebreak and reopen
			// after next line to fix a bleed issue on macOS
			// https://github.com/chalk/chalk/pull/92
			str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
		}

		// Reset the original `dim` if we changed it to work around the Windows dimmed gray issue
		ansiStyles.dim.open = originalDim;

		return str;
	}

	function chalkTag(chalk, strings) {
		if (!Array.isArray(strings)) {
			// If chalk() was called by itself or with a string,
			// return the string itself as a string.
			return [].slice.call(arguments, 1).join(' ');
		}

		const args = [].slice.call(arguments, 2);
		const parts = [strings.raw[0]];

		for (let i = 1; i < strings.length; i++) {
			parts.push(String(args[i - 1]).replace(/[{}\\]/g, '\\$&'));
			parts.push(String(strings.raw[i]));
		}

		return template(chalk, parts.join(''));
	}

	Object.defineProperties(Chalk.prototype, styles);

	chalk.exports = Chalk(); // eslint-disable-line new-cap
	chalk.exports.supportsColor = supportsColor;
	return chalk.exports;
}

const EventEmitter = EventEmitter$2;
const Emitter$g = emitter;

/**
 * Collection
 *
 * Make Collections for output classes
 *
 * @param {[type]} numsOrObjects
 */
let Collection$d = class Collection {
  constructor(numsOrObjects) {
    const Type = this.type;
    let initObjects = [];

    this.length = 0;

    if (Array.isArray(numsOrObjects)) {
      initObjects = numsOrObjects;
    } else {
      // Initialize with a Shared Properties object
      /* istanbul ignore else */
      if (Array.isArray(numsOrObjects.pins)) {
        const keys = Object.keys(numsOrObjects).filter(key => key !== "pins");
        initObjects = numsOrObjects.pins.map(pin => {
          const obj = {};

          if (Array.isArray(pin)) {
            obj.pins = pin;
          } else {
            obj.pin = pin;
          }

          return keys.reduce((accum, key) => {
            accum[key] = numsOrObjects[key];
            return accum;
          }, obj);
        });
      }
    }

    /* istanbul ignore else */
    if (initObjects.length) {
      while (initObjects.length) {
        let numOrObject = initObjects.shift();
        // When a Type exists, respect it!
        if (typeof Type === "function") {
          if (!(numOrObject instanceof Type || numOrObject instanceof this.constructor)) {
            numOrObject = new Type(numOrObject);
          }
        }
        this.add(numOrObject);
      }
    }
  }
  slice() {
    return new this.constructor([].slice.apply(this, arguments));
  }
};

Collection$d.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];

Collection$d.prototype.add = function(...args) {
  let length = this.length;

  if (args.length === 1 &&
      args[0] instanceof this.constructor) {
    args = args[0];
  }

  for (let i = 0; i < args.length; i++) {
    // When a Type exists, respect it!
    if (this.type) {
      if (args[i] instanceof this.type ||
          args[i] instanceof this.constructor) {
        this[length++] = args[i];
      }
    } else {
      // Otherwise allow user to directly instantiate
      // Collection or Collection.Emitter to create
      // a mixed collection
      this[length++] = args[i];
    }
  }

  return (this.length = length);
};

Collection$d.prototype.each = function(callback) {
  let length = this.length;

  for (let i = 0; i < length; i++) {
    callback.call(this[i], this[i], i);
  }

  return this;
};

Collection$d.prototype.forEach = function() {
  [].forEach.apply(this, arguments);
};

Collection$d.prototype.includes = function() {
  return [].includes.apply(this, arguments);
};

Collection$d.prototype.indexOf = function() {
  return [].indexOf.apply(this, arguments);
};

Collection$d.prototype.map = function() {
  return [].map.apply(this, arguments);
};

Collection$d.prototype.byId = function(id) {
  return [].find.call(this, function(entry) {
    return entry.id !== undefined && entry.id === id;
  });
};

/**
 * Collection.installMethodForwarding
 *
 * Copy single method to collection class
 *
 * @param  {Object} target Target prototype
 * @param  {Object} source Source prototype
 * @param  {Object} options Options for how to define dispatch
 * @return {Object} target Modified Target prototype
 */
Collection$d.installMethodForwarding = (target, source, options = {}) => {
  const {skip = []} = options;
  const nevercopy = "apply|arguments|bind|call|caller|constructor|domain|length|name|prototype|toString".split("|");

  return Object.getOwnPropertyNames(source).reduce((accum, method) => {
    if (skip.includes(method) || nevercopy.includes(method)) {
      return accum;
    }
    // Create Inputs wrappers for each method listed.
    // This will allow us control over all Input instances
    // simultaneously.
    accum[method] = function(...args) {
      const length = this.length;

      for (let i = 0; i < length; i++) {
        this[i][method](...args);
      }
      return this;
    };

    return accum;
  }, target);
};

const noop = () => {};

Collection$d.installCallbackReconciliation = (target, methods) => {
  // Methods with callbacks need to have the callback called
  // as a result of all entries reaching completion, not
  // calling the callback once for each entry completion.
  // Uses an array to match pattern in Led, and may be more
  // in future.
  methods.forEach(method => {
    target[method] = function(duration, callback) {
      const length = this.length;
      const signals = [];

      if (typeof duration === "function") {
        callback = duration;
        duration = 1000;
      }

      if (typeof callback !== "function") {
        callback = noop;
      }

      for (let i = 0; i < length; i++) {
        signals.push(
          /* jshint ignore:start */
          new Promise(resolve => this[i][method](duration, () => resolve()))
          /* jshint ignore:end */
        );
      }

      Promise.all(signals).then(callback);

      return this;
    };
  });
};



/**
 * Collection.Emitter
 *
 * Make Collections for input classes
 *
 * @param {[type]} numsOrObjects
 *
 */

Collection$d.Emitter = class extends Collection$d {
  constructor(numsOrObjects) {
    super(numsOrObjects);

    // If the Collection.Emitter was created
    // with a Shared Properties object, then
    // we should abide by the freq or period
    // properties...
    let interval = null;
    let period = 5;

    if (!Array.isArray(numsOrObjects) &&
        (typeof numsOrObjects === "object" && numsOrObjects !== null))  {

      period = numsOrObjects.freq || numsOrObjects.period || period;

      // _However_, looking to the future, we
      // need to start thinking about replacing
      // the garbage named _freq_ (the value is
      // actually a period), with real _frequency_
      // in Hz.

      // If provided, convert frequency to period
      /* istanbul ignore else */
      if (numsOrObjects.frequency) {
        period = (1 / numsOrObjects.frequency) * 1000;
      }
    }

    Object.defineProperties(this, {
      period: {
        get() {
          return period;
        },
        set(value) {
          if (period !== value) {
            period = value;
          }

          if (interval) {
            clearInterval(interval);
          }

          interval = setInterval(() => {
            this.emit("data", this);
          }, period);
        }
      },
    });

    this.period = period;

    this.on("newListener", event => {
      if (event === "change" || event === "data") {
        return;
      }

      this.forEach(input => {
        input.on(event, data => this.emit(event, input, data));
      });
    });
  }

  add(...inputs) {
    /* istanbul ignore else */
    if (inputs.length) {
      super.add(...inputs);

      inputs.forEach(input => {
        if (input) {
          input.on("change", () => this.emit("change", input));
        }
      });
    }
    return this.length;
  }

};

Object.assign(
  Collection$d.Emitter.prototype,
  EventEmitter.prototype,
  Emitter$g.prototype
);

Collection$d.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];

var collection = Collection$d;

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

var lodash_debounce = debounce;

var lodash_clonedeep = {exports: {}};

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
lodash_clonedeep.exports;

(function (module, exports) {
	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	cloneableTags[boolTag] = cloneableTags[dateTag] =
	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	cloneableTags[int32Tag] = cloneableTags[mapTag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[setTag] =
	cloneableTags[stringTag] = cloneableTags[symbolTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[weakMapTag] = false;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/**
	 * Adds the key-value `pair` to `map`.
	 *
	 * @private
	 * @param {Object} map The map to modify.
	 * @param {Array} pair The key-value pair to add.
	 * @returns {Object} Returns `map`.
	 */
	function addMapEntry(map, pair) {
	  // Don't return `map.set` because it's not chainable in IE 11.
	  map.set(pair[0], pair[1]);
	  return map;
	}

	/**
	 * Adds `value` to `set`.
	 *
	 * @private
	 * @param {Object} set The set to modify.
	 * @param {*} value The value to add.
	 * @returns {Object} Returns `set`.
	 */
	function addSetEntry(set, value) {
	  // Don't return `set.add` because it's not chainable in IE 11.
	  set.add(value);
	  return set;
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array ? array.length : 0;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    getPrototype = overArg(Object.getPrototypeOf, Object),
	    objectCreate = Object.create,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols,
	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	    nativeKeys = overArg(Object.keys, Object);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView'),
	    Map = getNative(root, 'Map'),
	    Promise = getNative(root, 'Promise'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  this.__data__ = new ListCache(entries);
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  return this.__data__['delete'](key);
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var cache = this.__data__;
	  if (cache instanceof ListCache) {
	    var pairs = cache.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      return this;
	    }
	    cache = this.__data__ = new MapCache(pairs);
	  }
	  cache.set(key, value);
	  return this;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = (isArray(value) || isArguments(value))
	    ? baseTimes(value.length, String)
	    : [];

	  var length = result.length,
	      skipIndexes = !!length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {boolean} [isFull] Specify a clone including symbols.
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      if (isHostObject(value)) {
	        return object ? value : {};
	      }
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, baseClone, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack);
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (!isArr) {
	    var props = isFull ? getAllKeys(value) : keys(value);
	  }
	  arrayEach(props || value, function(subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	  });
	  return result;
	}

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} prototype The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	function baseCreate(proto) {
	  return isObject(proto) ? objectCreate(proto) : {};
	}

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	/**
	 * The base implementation of `getTag`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  return objectToString.call(value);
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var result = new buffer.constructor(buffer.length);
	  buffer.copy(result);
	  return result;
	}

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	/**
	 * Creates a clone of `map`.
	 *
	 * @private
	 * @param {Object} map The map to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned map.
	 */
	function cloneMap(map, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	  return arrayReduce(array, addMapEntry, new map.constructor);
	}

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	/**
	 * Creates a clone of `set`.
	 *
	 * @private
	 * @param {Object} set The set to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned set.
	 */
	function cloneSet(set, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	  return arrayReduce(array, addSetEntry, new set.constructor);
	}

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    assignValue(object, key, newValue === undefined ? source[key] : newValue);
	  }
	  return object;
	}

	/**
	 * Copies own symbol properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Creates an array of the own enumerable symbol properties of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11,
	// for data views in Edge < 14, and promises in Node.js.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, cloneFunc, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return cloneMap(object, isDeep, cloneFunc);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return cloneSet(object, isDeep, cloneFunc);

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * This method is like `_.clone` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.clone
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var deep = _.cloneDeep(objects);
	 * console.log(deep[0] === objects[0]);
	 * // => false
	 */
	function cloneDeep(value) {
	  return baseClone(value, true, true);
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = cloneDeep; 
} (lodash_clonedeep, lodash_clonedeep.exports));

var lodash_clonedeepExports = lodash_clonedeep.exports;

const Fn$a = {
  debounce: lodash_debounce,
  cloneDeep: lodash_clonedeepExports,
};

const { ceil, max, min, PI: PI$1 } = Math;

/**
 * Format a number such that it has a given number of digits after the
 * decimal point.
 *
 * @param {Number} number - The number to format
 * @param {Number} [digits = 0] - The number of digits after the decimal point
 * @return {Number} Formatted number
 * @example
 * Fn.toFixed(5.4564, 2); // -> 5.46
 * @example
 * Fn.toFixed(1.5, 2); // -> 1.5
 */
Fn$a.toFixed = (number, digits) => +(number || 0).toFixed(digits);


/**
 * Map a value (number) from one range to another. Based on Arduino's map().
 *
 * @param {Number} value    - value to map
 * @param {Number} fromLow  - low end of originating range
 * @param {Number} fromHigh - high end of originating range
 * @param {Number} toLow    - low end of target range
 * @param {Number} toHigh   - high end of target range
 * @return {Number} mapped value (integer)
 * @example
 * Fn.map(500, 0, 1000, 0, 255); // ->
 */

Fn$a.map = (value, fromLow, fromHigh, toLow, toHigh) => ((value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow) | 0;
// Alias
Fn$a.scale = Fn$a.map;

/**
 * Like map, but returns a Float32
 *
 * For @param info, @see Fn.map
 * @return {Float32}
 */
const f32A = new Float32Array(1);

Fn$a.fmap = (value, fromLow, fromHigh, toLow, toHigh) => {
  f32A[0] = (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow;
  return f32A[0];
};
// Alias
Fn$a.fscale = Fn$a.fmap;

/**
 * Constrains a number to be within a range. Based on Arduino's constrain()
 *
 * @param {Number} value
 * @param {Number} lower - lower bound of range for constraint
 * @param {Number} upper - upper bound of range for constraint
 * @return {Number | NaN} constrained number or NaN if any of the provided
 *   parameters are not a {Number}.
 */
Fn$a.constrain = (value, lower, upper) => min(upper, max(lower, value));

/**
 * Is value between the bounds of lower and upper?
 *
 * @param {Number} value
 * @param {Number} lower - Lower end of bounds to check
 * @param {Number} upper - Upper ends of bounds to check
 * @return {Boolean}
 */
Fn$a.inRange = (value, lower, upper) => value >= lower && value <= upper;

/**
 * Generate an Array of Numbers with values between lower and upper; the
 * step (increment/decrement) between each defined by tick.
 *
 * @param {Number} lower - The value of the lowest element in the resulting
 *                         Array. If `Fn.range` invoked with only one
 *                         argument, this parameter will instead define the
 *                         length of the Array, which will start from 0.
 * @param {Number} upper - The value of the final element of the Array.
 * @param {Number} [tick = 1] - The difference between each element in the
 *                              Array. This value may be negative.
 * @return {Array} of {Numbers}
 *
 * @example
 * Fn.range(5, 10); // -> [5, 6, 7, 8, 9, 10];
 * @example
 * Fn.range(5); // -> [0, 1, 2, 3, 4];
 * @example
 * Fn.range(3, 27, 3); // -> [3, 6, 9, 12, 15, 18, 21, 24, 27];
 * @example
 * Fn.range(0, -9, -3); // -> [0, -3, -6, -9];
 */
Fn$a.range = function(lower, upper, tick) {
  if (arguments.length === 1) {
    upper = lower - 1;
    lower = 0;
  }

  lower = lower || 0;
  upper = upper || 0;
  tick = tick || 1;

  const len = max(ceil((upper - lower) / tick), 0);
  let idx = 0;
  const range = [];

  while (idx <= len) {
    range[idx++] = lower;
    lower += tick;
  }

  return range;
};

/**
 * Generate a reasonably-unique ID string
 *
 * @return {String} - 36-character random-ish string
 */
Fn$a.uid = () => "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, chr => {
  const rnd = Math.random() * 16 | 0;
  return (chr === "x" ? rnd : (rnd & 0x3 | 0x8)).toString(16);
}).toUpperCase();


/**
 * Square your x!
 *
 * @param {Number} x
 * @return {Number| Nan} - x^2—unless you were goofy enough to provide a
 *   non-numeric x, in which case it's NaN for you!
 */
Fn$a.square = x => x * x;

/**
 * Get a sum for all the values in an Array. This works best if the elements
 * in the Array are Numbers.
 *
 * @param {Array} values
 * @return {Number | String} - You probably want a Number so you'll want to
 *                             pass a values Array entirely consisting of
 *                             numeric elements.
 */
Fn$a.sum = function sum(values) {
  let vals;
  if (Array.isArray(values)) {
    vals = values;
  } else {
    vals = [].slice.call(arguments);
  }
  return vals.reduce((accum, value) => accum + value, 0);
};

/**
 * Fused multiply-add for precise floating-point calculations.
 */
// fma function
// Copyright (c) 2012, Jens Nockert
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//  1. Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
Fn$a.fma = (a, b, c) => {
  let aHigh = 134217729 * a;
  let aLow;

  aHigh = aHigh + (a - aHigh);
  aLow = a - aHigh;

  let bHigh = 134217729 * b;
  let bLow;

  bHigh = bHigh + (b - bHigh);
  bLow = b - bHigh;

  const r1 = a * b;
  const r2 = -r1 + aHigh * bHigh + aHigh * bLow + aLow * bHigh + aLow * bLow;

  const s = r1 + c;
  const t = (r1 - (s - c)) + (c - (s - r1));

  return s + (t + r2);
};
// end fma function copyright

/**
 * Return a value with the bit at the position indicated set (to 1).
 * From avr/io.h "BV" => Bit Value
 *
 * An example: logically OR these bits together:
 * var ORed = _BV(0) | _BV(2) | _BV(7);
 *
 * BIT         7  6  5  4  3  2  1  0
 * ---------------------------------------------------------
 * _BV(0)  =   0  0  0  0  0  0  0  1
 * _BV(2)  =   0  0  0  0  0  1  0  0
 * _BV(7)  =   1  0  0  0  0  0  0  0
 * ORed    =   1  0  0  0  0  1  0  1
 *
 * ORed === 133;
 *
 * @param {Number} bit - bit position to set
 * @return {Number}
 * @example
 * Fn.bitValue(0); // --> 1
 * @example
 * Fn.bitValue(4); // --> 16
 *
 */
Fn$a._BV = Fn$a.bitValue = Fn$a.bv = bit => 1 << bit;

/**
 * int16 Combine two bytes to make an signed 16-bit integer
 * @param  {byte} msb   Most signifcant byte
 * @param  {byte} lsb   Least signifcant byte
 * @return {word}       Signed 16-bit integer
 */
Fn$a.int16 = (msb, lsb) => {
  const result = (msb << 8) | lsb;

  // Check highest bit for sign. If on, value is negative
  return result >> 15 ? ((result ^ 0xFFFF) + 1) * -1 : result;
};

/**
 * uint16 Combine two bytes to make an unsigned 16-bit integer
 * @param  {byte} msb   Most signifcant byte
 * @param  {byte} lsb   Least signifcant byte
 * @return {word}       unsigned 16-bit integer
 */
Fn$a.uint16 = (msb, lsb) => (msb << 8) | lsb;


/**
 * int24 Combine three bytes to make a signed 24-bit integer
 * @param  {byte} b16   b[16:23]
 * @param  {byte} b8    b[8:15]
 * @param  {byte} b0    b[0:7]
 * @return {word}       Signed 24-bit integer
 */
Fn$a.int24 = (b16, b8, b0) => {
  const result = (b16 << 16) | (b8 << 8) | b0;

  // Check highest bit for sign. If on, value is negative
  return result >> 23 ? ((result ^ 0xFFFFFF) + 1) * -1 : result;
};

/**
 * uint24 Combine three bytes to make an unsigned 24-bit integer
 * @param  {byte} b16   b[16:23]
 * @param  {byte} b8    b[8:15]
 * @param  {byte} b0    b[0:7]
 * @return {word}       Unsigned 24-bit integer
 */
Fn$a.uint24 = (b16, b8, b0) => (b16 << 16) | (b8 << 8) | b0;

/**
 * int32 Combine four bytes to make a signed 24-bit integer
 * @param  {byte} b24   b[24:31]
 * @param  {byte} b16   b[16:23]
 * @param  {byte} b8    b[8:15]
 * @param  {byte} b0    b[0:7]
 * @return {word}       Signed 32-bit integer
 */
Fn$a.int32 = (b24, b16, b8, b0) => {
  const result = (b24 << 24) | (b16 << 16) | (b8 << 8) | b0;
  // Check highest bit for sign. If on, value is negative
  return result >> 31 ? ((result ^ 0xFFFFFFFF) + 1) * -1 : result;
};

/**
 * int32 Combine four bytes to make an unsigned 32-bit integer
 * @param  {byte} b24   b[24:31]
 * @param  {byte} b16   b[16:23]
 * @param  {byte} b8    b[8:15]
 * @param  {byte} b0    b[0:7]
 * @return {Number}       unsigned 32-bit integer
 */
Fn$a.uint32 = (b24, b16, b8, b0) => // Note: If you left-shift a byte by 24 in JS and that byte's
// MSbit is 1, the resulting value will be negative because JS casts
// bitwise operands (temporarily) to SIGNED 32-bit numbers. The
// final >>> 0 causes the sign bit to be disregarded, making sure our
// result is non-negative.
((b24 << 24) | (b16 << 16) | (b8 << 8) | b0) >>> 0;

/**
 * bitSize Get the number of bits in a given number
 * @param  {number} n   The number to evaluate
 * @return {number}     The bit count
 */
Fn$a.bitSize = n => Math.round(Math.log2(n));

/**
 * The following generates functions and constants for utility when working
 * with binary numbers:
 *   - Fn.POW_2_0 through Fn.POW_2_53
 *   - Fn.u4(value) through Fn.u32(value)
 *   - Fn.s4(value) through Fn.s32(value)
 */
const POW = "POW_2_";
const U = "u";
const S = "s";
const MAX = Fn$a.bitSize(Number.MAX_SAFE_INTEGER) + 1;
const bitSizes = [ 4, 8, 10, 12, 16, 20, 24, 32 ];

/**
 * Generate "constants" that represent powers of 2. Available for powers
 * 0 through 53.
 * @example
 * Fn.POW_2_17; // -> 131072
 */
for (let i = 0; i < MAX; i++) {
  Fn$a[POW + i] = 2 ** i;
}

bitSizes.forEach(bitSize => {
  const decimal = Fn$a[POW + bitSize];
  const half = decimal / 2 >>> 0;
  const halfMinusOne = half - 1;

  /**
   * The function Fn["u" + bitSize] will constrain a value to an unsigned
   * value of that bit size.
   *
   * @param {Number} value
   * @return {Number} constrained to an unsigned int
   * @example
   * Fn.u8(255); // --> 255
   * Fn.u8(256); // --> 255
   * Fn.u8(-255); // --> 0
   * Fn.u8(-254); // -- 1
   */
  Fn$a[U + bitSize] = value => {
    if (value < 0) {
      value += decimal;
    }
    return Fn$a.constrain(value, 0, decimal - 1);
  };

  /**
   * The function Fn["s" + bitSize] will constrain a value to a signed value
   * of that bit size. Remember that, e.g., range for signed 8-bit numbers
   * is -128 to 127.
   *
   * @param {Number} value
   * @return {Number} constrained to a SIGNED integer in bitsize range
   * @example
   * Fn.s8(100); // --> 100
   * Fn.s8(128); // --> -128
   * Fn.s8(127); // --> 127
   * Fn.s8(255); // --> -1
   */
  Fn$a[S + bitSize] = value => {
    if (value > halfMinusOne) {
      value -= decimal;
    }
    return Fn$a.constrain(value, -half, halfMinusOne);
  };
});
/*
  Fn.POW_2_0   => 1
  Fn.POW_2_1   => 2
  Fn.POW_2_2   => 4
  Fn.POW_2_3   => 8
  Fn.POW_2_4   => 16
  Fn.POW_2_5   => 32
  Fn.POW_2_6   => 64
  Fn.POW_2_7   => 128
  Fn.POW_2_8   => 256
  Fn.POW_2_9   => 512
  Fn.POW_2_10  => 1024
  Fn.POW_2_11  => 2048
  Fn.POW_2_12  => 4096
  Fn.POW_2_13  => 8192
  Fn.POW_2_14  => 16384
  Fn.POW_2_15  => 32768
  Fn.POW_2_16  => 65536
  Fn.POW_2_17  => 131072
  Fn.POW_2_18  => 262144
  Fn.POW_2_19  => 524288
  Fn.POW_2_20  => 1048576
  Fn.POW_2_21  => 2097152
  Fn.POW_2_22  => 4194304
  Fn.POW_2_23  => 8388608
  Fn.POW_2_24  => 16777216
  Fn.POW_2_25  => 33554432
  Fn.POW_2_26  => 67108864
  Fn.POW_2_27  => 134217728
  Fn.POW_2_28  => 268435456
  Fn.POW_2_29  => 536870912
  Fn.POW_2_30  => 1073741824
  Fn.POW_2_31  => 2147483648
  Fn.POW_2_32  => 4294967296
  Fn.POW_2_33  => 8589934592
  Fn.POW_2_34  => 17179869184
  Fn.POW_2_35  => 34359738368
  Fn.POW_2_36  => 68719476736
  Fn.POW_2_37  => 137438953472
  Fn.POW_2_38  => 274877906944
  Fn.POW_2_39  => 549755813888
  Fn.POW_2_40  => 1099511627776
  Fn.POW_2_41  => 2199023255552
  Fn.POW_2_42  => 4398046511104
  Fn.POW_2_43  => 8796093022208
  Fn.POW_2_44  => 17592186044416
  Fn.POW_2_45  => 35184372088832
  Fn.POW_2_46  => 70368744177664
  Fn.POW_2_47  => 140737488355328
  Fn.POW_2_48  => 281474976710656
  Fn.POW_2_49  => 562949953421312
  Fn.POW_2_50  => 1125899906842624
  Fn.POW_2_51  => 2251799813685248
  Fn.POW_2_52  => 4503599627370496
  Fn.POW_2_53  => 9007199254740992

  Fn.u4(value) => 4-bit Unsigned Integer
  Fn.s4(value) => 4-bit Signed Integer

  Fn.u8(value) => 8-bit Unsigned Integer
  Fn.s8(value) => 8-bit Signed Integer

  Fn.u10(value) => 10-bit Unsigned Integer
  Fn.s10(value) => 10-bit Signed Integer

  Fn.u12(value) => 12-bit Unsigned Integer
  Fn.s12(value) => 12-bit Signed Integer

  Fn.u16(value) => 16-bit Unsigned Integer
  Fn.s16(value) => 16-bit Signed Integer

  Fn.u20(value) => 20-bit Unsigned Integer
  Fn.s20(value) => 20-bit Signed Integer

  Fn.u24(value) => 24-bit Unsigned Integer
  Fn.s24(value) => 24-bit Signed Integer

  Fn.u32(value) => 32-bit Unsigned Integer
  Fn.s32(value) => 32-bit Signed Integer

}
*/

Fn$a.RAD_TO_DEG = 180 / PI$1;
Fn$a.DEG_TO_RAD = PI$1 / 180;
Fn$a.TAU = 2 * PI$1;

var fn = Fn$a;

const Emitter$f = emitter;
const repl = require$$1;
const priv$n = new Map();

// Ported from
// https://github.com/jgautier/firmata

class Repl extends Emitter$f {
  constructor(opts) {
    if (!Repl.isActive) {
      super();

      Repl.isActive = true;

      // Store context values in instance property
      // this will be used for managing scope when
      // injecting new values into an existing Repl
      // session.
      this.context = {};
      this.ready = false;

      const state = {
        opts,
        board: opts.board,
      };

      priv$n.set(this, state);

      // Store an accessible copy of the Repl instance
      // on a static property. This is later used by the
      // Board constructor to automattically setup Repl
      // sessions for all programs, which reduces the
      // boilerplate requirement.
      Repl.ref = this;
    } else {
      return Repl.ref;
    }
  }

  initialize(callback) {
    const state = priv$n.get(this);

    process.stdin.resume();
    process.stdin.setEncoding("utf8");

    const replDefaults = {
      prompt: ">> ",
      useGlobal: false
    };

    // Call this immediately before repl.start to
    // avoid crash on Intel Edison
    state.board.info("Repl", "Initialized");

    // Initialize the REPL session with the default
    // repl settings.
    // Assign the returned repl instance to "cmd"
    const cmd = repl.start(replDefaults);

    this.ready = true;

    // Assign a reference to the REPL's "content" object
    // This will be use later by the Repl.prototype.inject
    // method for allowing user programs to inject their
    // own explicit values and reference
    this.cmd = cmd;
    this.context = cmd.context;

    cmd.on("exit", () => {
      // Time to wait before forcing exit
      const failExitTimeout = 1000;

      state.board.emit("exit");
      state.board.warn("Board", "Closing.");

      // A fail safe timeout if 1 second to force exit.
      const timeout = setTimeout(() => {
        process.reallyExit();
      }, failExitTimeout);

      const interval = setInterval(() => {
        let pendingIo = false;
        // More than one board is attached, wait until everyone has no
        // io pending before exit.
        if (state.board.length) {
          for (let i = 0; i < state.board.length; i++) {
            if (state.board[i].io.pending) {
              pendingIo = true;
              break;
            }
          }
        }
        // Only one board connected, wait until there is no io pending before exit.
        else {
          pendingIo = state.board.io.pending;
        }

        if (!pendingIo) {
          clearInterval(interval);
          clearTimeout(timeout);
          process.nextTick(process.reallyExit);
        }
      }, 1);
    });

    this.inject(state.opts);

    /* istanbul ignore else */
    if (callback) {
      process.nextTick(callback);
    }
  }

  close() {
    this.cmd.emit("exit");
  }

  inject(obj) {
    Object.keys(obj).forEach(function(key) {
      Object.defineProperty(
        this.context, key, Object.getOwnPropertyDescriptor(obj, key)
      );
    }, this);
  }
}

Repl.isActive = false;
Repl.isBlocked = false;

// See Repl.ref notes above.
Repl.ref = null;

var repl_1 = Repl;

/**
 * Many pins have common aliases, especially SPI!
 */


/**
 * Options
 *
 * @param {String} arg Pin address.
 * @param {Number} arg Pin address.
 * @param {Array} arg List of Pin addresses.
 *
 * @return {Options} normalized board options instance.
 */

let Options$1 = class Options {
  constructor(arg) {
    var options = {};

    if (typeof arg === "number" ||
      typeof arg === "string") {
      options.pin = arg;
    } else if (Array.isArray(arg)) {
      options.pins = arg;
    } else {
      options = arg;

      // @Nick, this is where you want to focus.
      // Anytime this path is taken, the constructor
      // received an object. If the object contains
      // a "pins" property that is ALSO an object, we need
      // to normalize the keys of that object, using the
      // "aliases" map defined above.
      //
      // This change will require renaming pin properties in
      // a few classes, but I'm ok with that, because if we do this
      // right, no existing code will break.
      //
    }

    Object.assign(this, options);
  }
};
var board_options = Options$1;

const Options = board_options;

const MODES = {
  INPUT: 0x00,
  OUTPUT: 0x01,
  ANALOG: 0x02,
  PWM: 0x03,
  SERVO: 0x04
};


/**
 * Pin Capability Signature Mapping
 */

const pinsToType = {
  20: "UNO",
  25: "LEONARDO",
  70: "MEGA"
};

function Pins$7(board) {
  if (!(this instanceof Pins$7)) {
    return new Pins$7(board);
  }

  const io = board.io;
  const pins = io.pins.slice();
  const length = pins.length;
  const type = pinsToType[length] || "OTHER";

  board.type = type;

  // Copy pin data to index
  for (let i = 0; i < length; i++) {
    this[i] = pins[i];
  }

  Object.defineProperties(this, {
    type: {
      value: type
    },
    length: {
      value: length
    }
  });

  // If an IO Plugin or Expander defines
  // these, override the default
  [
    "isInput",
    "isOutput",
    "isAnalog",
    "isPwm",
    "isServo",
  ].forEach(isType => {
    if (io[isType]) {
      this[isType] = io[isType];
    }
  });
}

Object.entries(MODES).forEach(([mode, value]) => {
  Object.defineProperty(Pins$7, mode, { value });
});

function isFirmata({io}) {
  return io.name === "Firmata" || io.name === "Mock";
}

function hasPins({pin, pins}) {
  return typeof pin !== "undefined" ||
    (typeof pins !== "undefined" && pins.length);
}

Pins$7.isFirmata = isFirmata;

Pins$7.Error = ({pin, type, via}) => {
  throw new Error(
    `Pin Error: ${pin} is not a valid ${type} pin (${via})`
  );
};

const normalizers = new Map();

Pins$7.normalize = function(options, board) {
  var type = board.pins.type;
  var isArduino = isFirmata(board);
  var normalizer = normalizers.get(board);
  var isNormalizing;

  if (typeof options === "string" ||
    typeof options === "number" ||
    Array.isArray(options)) {

    options = new Options(options);
  }

  if (!normalizer) {
    isNormalizing = board.io && typeof board.io.normalize === "function";

    normalizer = function(pin) {
      return isArduino ?
        Pins$7.fromAnalog(Pins$7.translate(pin, type)) :
        (isNormalizing ? board.io.normalize(pin) : pin);
    };

    normalizers.set(board, normalizer);
  }

  // Auto-normalize pin values, this reduces boilerplate code
  // inside module constructors
  if (hasPins(options)) {

    // When an array of pins is present, attempt to
    // normalize them if necessary
    if (options.pins) {
      options.pins = options.pins.map(normalizer);
    } else {
      options.pin = normalizer(options.pin);
    }
  }

  return options;
};

Pins$7.normalize.clear = function() {
  normalizers.clear();
};

// Special kit-centric pin translations
Pins$7.translations = {
  UNO: {
    dtoa: {
      14: "A0",
      15: "A1",
      16: "A2",
      17: "A3",
      18: "A4",
      19: "A5"
    },

    // TinkerKit
    tinker: {
      I0: "A0",
      I1: "A1",
      I2: "A2",
      I3: "A3",
      I4: "A4",
      I5: "A5",

      O0: 11,
      O1: 10,
      O2: 9,
      O3: 6,
      O4: 5,
      O5: 3,

      D13: 13,
      D12: 12,
      D8: 8,
      D7: 7,
      D4: 4,
      D2: 2
    }
  },
  MEGA: {
    dtoa: {
      54: "A0",
      55: "A1",
      56: "A2",
      57: "A3",
      58: "A4",
      59: "A5",
      60: "A6",
      61: "A7",
      62: "A8",
      63: "A9"
    },

    // TinkerKit
    tinker: {
      I0: "A0",
      I1: "A1",
      I2: "A2",
      I3: "A3",
      I4: "A4",
      I5: "A5",
      I6: "A6",
      I7: "A7",
      I8: "A8",
      I9: "A9",

      O0: 11,
      O1: 10,
      O2: 9,
      O3: 6,
      O4: 5,
      O5: 3,

      D13: 13,
      D12: 12,
      D8: 8,
      D7: 7,
      D4: 4,
      D2: 2
    }
  }
};

Pins$7.translations.LEONARDO = Pins$7.translations.UNO;

Pins$7.translate = function(pin, type) {
  var translations = Pins$7.translations[type.toUpperCase()];

  if (!translations) {
    return pin;
  }

  return Object.keys(translations).reduce(function(pin, map) {
    return translations[map][pin] || pin;
  }, pin);
};

Pins$7.fromAnalog = function(pin) {
  if (typeof pin === "string" && (pin.length > 1 && pin[0] === "A")) {
    return parseInt(pin.slice(1), 10);
  }
  return pin;
};

Pins$7.identity = function(pins, needle) {
  return [].findIndex.call(pins, function(pin) {
    return pin.name === needle || pin.id === needle || pin.port === needle;
  });
};

/**
 * (generated methods)
 *
 * Pins.prototype.isInput
 * Pins.prototype.isOutput
 * Pins.prototype.isAnalog
 * Pins.prototype.isPwm
 * Pins.prototype.isServo
 *
 */
Object.keys(MODES).forEach(function(key) {
  var name = key[0] + key.slice(1).toLowerCase();

  Pins$7.prototype["is" + name] = function(pin) {
    var attrs = this[pin] || this[Pins$7.identity(this, pin)];

    if (attrs && attrs.supportedModes.includes(MODES[key])) {
      return true;
    }
    return false;
  };
});

Pins$7.prototype.isDigital = function(pin) {
  var attrs = this[pin] || this[Pins$7.identity(this, pin)];

  if (attrs && attrs.supportedModes.length) {
    return true;
  }
  return false;
};

var board_pins = Pins$7;

var browserSerialport;
var hasRequiredBrowserSerialport;

function requireBrowserSerialport () {
	if (hasRequiredBrowserSerialport) return browserSerialport;
	hasRequiredBrowserSerialport = 1;

	var EE = EventEmitter$2.EventEmitter;
	var util = require$$1$1;

	var DATABITS = [7, 8];
	var STOPBITS = [1, 2];
	var PARITY = ['none', 'even', 'mark', 'odd', 'space'];
	var FLOWCONTROLS = ['RTSCTS'];

	var _options = {
	  baudrate: 9600,
	  parity: 'none',
	  rtscts: false,
	  databits: 8,
	  stopbits: 1,
	  buffersize: 256
	};

	function convertOptions(options){
	  switch (options.dataBits) {
	    case 7:
	      options.dataBits = 'seven';
	      break;
	    case 8:
	      options.dataBits = 'eight';
	      break;
	  }

	  switch (options.stopBits) {
	    case 1:
	      options.stopBits = 'one';
	      break;
	    case 2:
	      options.stopBits = 'two';
	      break;
	  }

	  switch (options.parity) {
	    case 'none':
	      options.parity = 'no';
	      break;
	  }

	  return options;
	}

	function SerialPort(path, options, openImmediately, callback) {

	  EE.call(this);

	  var self = this;

	  var args = Array.prototype.slice.call(arguments);
	  callback = args.pop();
	  if (typeof(callback) !== 'function') {
	    callback = null;
	  }

	  options = (typeof options !== 'function') && options || {};

	  openImmediately = (openImmediately === undefined || openImmediately === null) ? true : openImmediately;

	  callback = callback || function (err) {
	    if (err) {
	      self.emit('error', err);
	    }
	  };

	  var err;

	  options.baudRate = options.baudRate || options.baudrate || _options.baudrate;

	  options.dataBits = options.dataBits || options.databits || _options.databits;
	  if (DATABITS.indexOf(options.dataBits) === -1) {
	    err = new Error('Invalid "databits": ' + options.dataBits);
	    callback(err);
	    return;
	  }

	  options.stopBits = options.stopBits || options.stopbits || _options.stopbits;
	  if (STOPBITS.indexOf(options.stopBits) === -1) {
	    err = new Error('Invalid "stopbits": ' + options.stopbits);
	    callback(err);
	    return;
	  }

	  options.parity = options.parity || _options.parity;
	  if (PARITY.indexOf(options.parity) === -1) {
	    err = new Error('Invalid "parity": ' + options.parity);
	    callback(err);
	    return;
	  }

	  if (!path) {
	    err = new Error('Invalid port specified: ' + path);
	    callback(err);
	    return;
	  }

	  options.rtscts = _options.rtscts;

	  if (options.flowControl || options.flowcontrol) {
	    var fc = options.flowControl || options.flowcontrol;

	    if (typeof fc === 'boolean') {
	      options.rtscts = true;
	    } else {
	      var clean = fc.every(function (flowControl) {
	        var fcup = flowControl.toUpperCase();
	        var idx = FLOWCONTROLS.indexOf(fcup);
	        if (idx < 0) {
	          var err = new Error('Invalid "flowControl": ' + fcup + '. Valid options: ' + FLOWCONTROLS.join(', '));
	          callback(err);
	          return false;
	        } else {

	          // "XON", "XOFF", "XANY", "DTRDTS", "RTSCTS"
	          switch (idx) {
	            case 0: options.rtscts = true; break;
	          }
	          return true;
	        }
	      });
	      if(!clean){
	        return;
	      }
	    }
	  }

	  options.bufferSize = options.bufferSize || options.buffersize || _options.buffersize;

	  // defaults to chrome.serial if no options.serial passed
	  // inlined instead of on _options to allow mocking global chrome.serial for optional options test
	  options.serial = options.serial || (typeof chrome !== 'undefined' && chrome.serial);

	  if (!options.serial) {
	    throw new Error('No access to serial ports. Try loading as a Chrome Application.');
	  }

	  this.options = convertOptions(options);

	  this.options.serial.onReceiveError.addListener(function(info){

	    switch (info.error) {

	      case 'disconnected':
	      case 'device_lost':
	      case 'system_error':
	        err = new Error('Disconnected');
	        // send notification of disconnect
	        if (self.options.disconnectedCallback) {
	          self.options.disconnectedCallback(err);
	        } else {
	          self.emit('disconnect', err);
	        }
	        if(self.connectionId >= 0){
	          self.close();
	        }
	        break;
	    }

	  });

	  this.path = path;

	  if (openImmediately) {
	    process.nextTick(function () {
	      self.open(callback);
	    });
	  }
	}

	util.inherits(SerialPort, EE);

	SerialPort.prototype.connectionId = -1;

	SerialPort.prototype.open = function (callback) {
	  var options = {
	    bitrate: parseInt(this.options.baudRate, 10),
	    dataBits: this.options.dataBits,
	    parityBit: this.options.parity,
	    stopBits: this.options.stopBits,
	    ctsFlowControl: this.options.rtscts
	  };

	  this.options.serial.connect(this.path, options, this.proxy('onOpen', callback));
	};

	SerialPort.prototype.onOpen = function (callback, openInfo) {
	  if(chrome.runtime.lastError){
	    if(typeof callback === 'function'){
	      callback(chrome.runtime.lastError);
	    }else {
	      this.emit('error', chrome.runtime.lastError);
	    }
	    return;
	  }

	  this.connectionId = openInfo.connectionId;

	  if (this.connectionId === -1) {
	    this.emit('error', new Error('Could not open port.'));
	    return;
	  }

	  this.emit('open', openInfo);

	  this._reader = this.proxy('onRead');

	  this.options.serial.onReceive.addListener(this._reader);

	  if(typeof callback === 'function'){
	    callback(chrome.runtime.lastError, openInfo);
	  }
	};

	SerialPort.prototype.onRead = function (readInfo) {
	  if (readInfo && this.connectionId === readInfo.connectionId) {

	    if (this.options.dataCallback) {
	      this.options.dataCallback(toBuffer(readInfo.data));
	    } else {
	      this.emit('data', toBuffer(readInfo.data));
	    }

	  }
	};

	SerialPort.prototype.write = function (buffer, callback) {
	  if (this.connectionId < 0) {
	    var err = new Error('Serialport not open.');
	    if(typeof callback === 'function'){
	      callback(err);
	    }else {
	      this.emit('error', err);
	    }
	    return;
	  }

	  if (typeof buffer === 'string') {
	    buffer = str2ab(buffer);
	  }

	  //Make sure its not a browserify faux Buffer.
	  if (buffer instanceof ArrayBuffer === false) {
	    buffer = buffer2ArrayBuffer(buffer);
	  }

	  this.options.serial.send(this.connectionId, buffer, function(info) {
	    if (typeof callback === 'function') {
	      callback(chrome.runtime.lastError, info);
	    }
	  });
	};


	SerialPort.prototype.close = function (callback) {
	  if (this.connectionId < 0) {
	    var err = new Error('Serialport not open.');
	    if(typeof callback === 'function'){
	      callback(err);
	    }else {
	      this.emit('error', err);
	    }
	    return;
	  }

	  this.options.serial.disconnect(this.connectionId, this.proxy('onClose', callback));
	};

	SerialPort.prototype.onClose = function (callback, result) {
	  this.connectionId = -1;
	  this.emit('close');

	  this.removeAllListeners();
	  if(this._reader){
	    this.options.serial.onReceive.removeListener(this._reader);
	    this._reader = null;
	  }

	  if (typeof callback === 'function') {
	    callback(chrome.runtime.lastError, result);
	  }
	};

	SerialPort.prototype.flush = function (callback) {
	  if (this.connectionId < 0) {
	    var err = new Error('Serialport not open.');
	    if(typeof callback === 'function'){
	      callback(err);
	    }else {
	      this.emit('error', err);
	    }
	    return;
	  }

	  var self = this;

	  this.options.serial.flush(this.connectionId, function(result) {
	    if (chrome.runtime.lastError) {
	      if (typeof callback === 'function') {
	        callback(chrome.runtime.lastError, result);
	      } else {
	        self.emit('error', chrome.runtime.lastError);
	      }
	      return;
	    } else {
	      callback(null, result);
	    }
	  });
	};

	SerialPort.prototype.drain = function (callback) {
	  if (this.connectionId < 0) {
	    var err = new Error('Serialport not open.');
	    if(typeof callback === 'function'){
	      callback(err);
	    }else {
	      this.emit('error', err);
	    }
	    return;
	  }

	  if (typeof callback === 'function') {
	    callback();
	  }
	};


	SerialPort.prototype.proxy = function () {
	  var self = this;
	  var proxyArgs = [];

	  //arguments isnt actually an array.
	  for (var i = 0; i < arguments.length; i++) {
	      proxyArgs[i] = arguments[i];
	  }

	  var functionName = proxyArgs.splice(0, 1)[0];

	  var func = function() {
	    var funcArgs = [];
	    for (var i = 0; i < arguments.length; i++) {
	        funcArgs[i] = arguments[i];
	    }
	    var allArgs = proxyArgs.concat(funcArgs);

	    self[functionName].apply(self, allArgs);
	  };

	  return func;
	};

	SerialPort.prototype.set = function (options, callback) {
	  this.options.serial.setControlSignals(this.connectionId, options, function(result){
	    callback(chrome.runtime.lastError, result);
	  });
	};

	SerialPort.prototype.isOpen = function () {
	  return this.connectionId > -1;
	};

	function SerialPortList(callback) {
	  if (typeof chrome != 'undefined' && chrome.serial) {
	    chrome.serial.getDevices(function(ports) {
	      var portObjects = new Array(ports.length);
	      for (var i = 0; i < ports.length; i++) {
	        portObjects[i] = {
	          comName: ports[i].path,
	          manufacturer: ports[i].displayName,
	          serialNumber: '',
	          pnpId: '',
	          locationId:'',
	          vendorId: '0x' + (ports[i].vendorId||0).toString(16),
	          productId: '0x' + (ports[i].productId||0).toString(16)
	        };
	      }
	      callback(chrome.runtime.lastError, portObjects);
	    });
	  } else {
	    callback(new Error('No access to serial ports. Try loading as a Chrome Application.'), null);
	  }
	}

	// Convert string to ArrayBuffer
	function str2ab(str) {
	  var buf = new ArrayBuffer(str.length);
	  var bufView = new Uint8Array(buf);
	  for (var i = 0; i < str.length; i++) {
	    bufView[i] = str.charCodeAt(i);
	  }
	  return buf;
	}

	// Convert buffer to ArrayBuffer
	function buffer2ArrayBuffer(buffer) {
	  var buf = new ArrayBuffer(buffer.length);
	  var bufView = new Uint8Array(buf);
	  for (var i = 0; i < buffer.length; i++) {
	    bufView[i] = buffer[i];
	  }
	  return buf;
	}

	function toBuffer(ab) {
	  var buffer = new Buffer(ab.byteLength);
	  var view = new Uint8Array(ab);
	  for (var i = 0; i < buffer.length; ++i) {
	      buffer[i] = view[i];
	  }
	  return buffer;
	}

	browserSerialport = {
	  SerialPort: SerialPort,
	  list: SerialPortList,
	  buffer2ArrayBuffer: buffer2ArrayBuffer,
	  used: [] //TODO: Populate this somewhere.
	};
	return browserSerialport;
}

var dist$e = {};

var dist$d = {};

var hasRequiredDist$e;

function requireDist$e () {
	if (hasRequiredDist$e) return dist$d;
	hasRequiredDist$e = 1;
	Object.defineProperty(dist$d, "__esModule", { value: true });
	dist$d.ByteLengthParser = void 0;
	const stream_1 = require$$0;
	/**
	 * Emit data every number of bytes
	 *
	 * A transform stream that emits data as a buffer after a specific number of bytes are received. Runs in O(n) time.
	 */
	class ByteLengthParser extends stream_1.Transform {
	    constructor(options) {
	        super(options);
	        if (typeof options.length !== 'number') {
	            throw new TypeError('"length" is not a number');
	        }
	        if (options.length < 1) {
	            throw new TypeError('"length" is not greater than 0');
	        }
	        this.length = options.length;
	        this.position = 0;
	        this.buffer = Buffer.alloc(this.length);
	    }
	    _transform(chunk, _encoding, cb) {
	        let cursor = 0;
	        while (cursor < chunk.length) {
	            this.buffer[this.position] = chunk[cursor];
	            cursor++;
	            this.position++;
	            if (this.position === this.length) {
	                this.push(this.buffer);
	                this.buffer = Buffer.alloc(this.length);
	                this.position = 0;
	            }
	        }
	        cb();
	    }
	    _flush(cb) {
	        this.push(this.buffer.slice(0, this.position));
	        this.buffer = Buffer.alloc(this.length);
	        cb();
	    }
	}
	dist$d.ByteLengthParser = ByteLengthParser;
	return dist$d;
}

var dist$c = {};

var hasRequiredDist$d;

function requireDist$d () {
	if (hasRequiredDist$d) return dist$c;
	hasRequiredDist$d = 1;
	Object.defineProperty(dist$c, "__esModule", { value: true });
	dist$c.CCTalkParser = void 0;
	const stream_1 = require$$0;
	/**
	 * Parse the CCTalk protocol
	 * @extends Transform
	 *
	 * A transform stream that emits CCTalk packets as they are received.
	 */
	class CCTalkParser extends stream_1.Transform {
	    constructor(maxDelayBetweenBytesMs = 50) {
	        super();
	        this.array = [];
	        this.cursor = 0;
	        this.lastByteFetchTime = 0;
	        this.maxDelayBetweenBytesMs = maxDelayBetweenBytesMs;
	    }
	    _transform(buffer, encoding, cb) {
	        if (this.maxDelayBetweenBytesMs > 0) {
	            const now = Date.now();
	            if (now - this.lastByteFetchTime > this.maxDelayBetweenBytesMs) {
	                this.array = [];
	                this.cursor = 0;
	            }
	            this.lastByteFetchTime = now;
	        }
	        this.cursor += buffer.length;
	        // TODO: Better Faster es7 no supported by node 4
	        // ES7 allows directly push [...buffer]
	        // this.array = this.array.concat(Array.from(buffer)) //Slower ?!?
	        Array.from(buffer).map(byte => this.array.push(byte));
	        while (this.cursor > 1 && this.cursor >= this.array[1] + 5) {
	            // full frame accumulated
	            // copy command from the array
	            const FullMsgLength = this.array[1] + 5;
	            const frame = Buffer.from(this.array.slice(0, FullMsgLength));
	            // Preserve Extra Data
	            this.array = this.array.slice(frame.length, this.array.length);
	            this.cursor -= FullMsgLength;
	            this.push(frame);
	        }
	        cb();
	    }
	}
	dist$c.CCTalkParser = CCTalkParser;
	return dist$c;
}

var dist$b = {};

var hasRequiredDist$c;

function requireDist$c () {
	if (hasRequiredDist$c) return dist$b;
	hasRequiredDist$c = 1;
	Object.defineProperty(dist$b, "__esModule", { value: true });
	dist$b.DelimiterParser = void 0;
	const stream_1 = require$$0;
	/**
	 * A transform stream that emits data each time a byte sequence is received.
	 * @extends Transform
	 *
	 * To use the `Delimiter` parser, provide a delimiter as a string, buffer, or array of bytes. Runs in O(n) time.
	 */
	class DelimiterParser extends stream_1.Transform {
	    constructor({ delimiter, includeDelimiter = false, ...options }) {
	        super(options);
	        if (delimiter === undefined) {
	            throw new TypeError('"delimiter" is not a bufferable object');
	        }
	        if (delimiter.length === 0) {
	            throw new TypeError('"delimiter" has a 0 or undefined length');
	        }
	        this.includeDelimiter = includeDelimiter;
	        this.delimiter = Buffer.from(delimiter);
	        this.buffer = Buffer.alloc(0);
	    }
	    _transform(chunk, encoding, cb) {
	        let data = Buffer.concat([this.buffer, chunk]);
	        let position;
	        while ((position = data.indexOf(this.delimiter)) !== -1) {
	            this.push(data.slice(0, position + (this.includeDelimiter ? this.delimiter.length : 0)));
	            data = data.slice(position + this.delimiter.length);
	        }
	        this.buffer = data;
	        cb();
	    }
	    _flush(cb) {
	        this.push(this.buffer);
	        this.buffer = Buffer.alloc(0);
	        cb();
	    }
	}
	dist$b.DelimiterParser = DelimiterParser;
	return dist$b;
}

var dist$a = {};

var hasRequiredDist$b;

function requireDist$b () {
	if (hasRequiredDist$b) return dist$a;
	hasRequiredDist$b = 1;
	Object.defineProperty(dist$a, "__esModule", { value: true });
	dist$a.InterByteTimeoutParser = void 0;
	const stream_1 = require$$0;
	/**
	 * A transform stream that buffers data and emits it after not receiving any bytes for the specified amount of time or hitting a max buffer size.
	 */
	class InterByteTimeoutParser extends stream_1.Transform {
	    constructor({ maxBufferSize = 65536, interval, ...transformOptions }) {
	        super(transformOptions);
	        if (!interval) {
	            throw new TypeError('"interval" is required');
	        }
	        if (typeof interval !== 'number' || Number.isNaN(interval)) {
	            throw new TypeError('"interval" is not a number');
	        }
	        if (interval < 1) {
	            throw new TypeError('"interval" is not greater than 0');
	        }
	        if (typeof maxBufferSize !== 'number' || Number.isNaN(maxBufferSize)) {
	            throw new TypeError('"maxBufferSize" is not a number');
	        }
	        if (maxBufferSize < 1) {
	            throw new TypeError('"maxBufferSize" is not greater than 0');
	        }
	        this.maxBufferSize = maxBufferSize;
	        this.currentPacket = [];
	        this.interval = interval;
	    }
	    _transform(chunk, encoding, cb) {
	        if (this.intervalID) {
	            clearTimeout(this.intervalID);
	        }
	        for (let offset = 0; offset < chunk.length; offset++) {
	            this.currentPacket.push(chunk[offset]);
	            if (this.currentPacket.length >= this.maxBufferSize) {
	                this.emitPacket();
	            }
	        }
	        this.intervalID = setTimeout(this.emitPacket.bind(this), this.interval);
	        cb();
	    }
	    emitPacket() {
	        if (this.intervalID) {
	            clearTimeout(this.intervalID);
	        }
	        if (this.currentPacket.length > 0) {
	            this.push(Buffer.from(this.currentPacket));
	        }
	        this.currentPacket = [];
	    }
	    _flush(cb) {
	        this.emitPacket();
	        cb();
	    }
	}
	dist$a.InterByteTimeoutParser = InterByteTimeoutParser;
	return dist$a;
}

var dist$9 = {};

var hasRequiredDist$a;

function requireDist$a () {
	if (hasRequiredDist$a) return dist$9;
	hasRequiredDist$a = 1;
	Object.defineProperty(dist$9, "__esModule", { value: true });
	dist$9.PacketLengthParser = void 0;
	const stream_1 = require$$0;
	/**
	 * A transform stream that decodes packets with a delimiter and length of payload
	 * specified within the data stream.
	 * @extends Transform
	 * @summary Decodes packets of the general form:
	 *       [delimiter][len][payload0] ... [payload0 + len]
	 *
	 * The length field can be up to 4 bytes and can be at any offset within the packet
	 *       [delimiter][header0][header1][len0][len1[payload0] ... [payload0 + len]
	 *
	 * The offset and number of bytes of the length field need to be provided in options
	 * if not 1 byte immediately following the delimiter.
	 */
	class PacketLengthParser extends stream_1.Transform {
	    constructor(options = {}) {
	        super(options);
	        const { delimiter = 0xaa, packetOverhead = 2, lengthBytes = 1, lengthOffset = 1, maxLen = 0xff } = options;
	        this.opts = {
	            delimiter,
	            packetOverhead,
	            lengthBytes,
	            lengthOffset,
	            maxLen,
	        };
	        this.buffer = Buffer.alloc(0);
	        this.start = false;
	    }
	    _transform(chunk, encoding, cb) {
	        for (let ndx = 0; ndx < chunk.length; ndx++) {
	            const byte = chunk[ndx];
	            if (byte === this.opts.delimiter) {
	                this.start = true;
	            }
	            if (true === this.start) {
	                this.buffer = Buffer.concat([this.buffer, Buffer.from([byte])]);
	                if (this.buffer.length >= this.opts.lengthOffset + this.opts.lengthBytes) {
	                    const len = this.buffer.readUIntLE(this.opts.lengthOffset, this.opts.lengthBytes);
	                    if (this.buffer.length == len + this.opts.packetOverhead || len > this.opts.maxLen) {
	                        this.push(this.buffer);
	                        this.buffer = Buffer.alloc(0);
	                        this.start = false;
	                    }
	                }
	            }
	        }
	        cb();
	    }
	    _flush(cb) {
	        this.push(this.buffer);
	        this.buffer = Buffer.alloc(0);
	        cb();
	    }
	}
	dist$9.PacketLengthParser = PacketLengthParser;
	return dist$9;
}

var dist$8 = {};

var hasRequiredDist$9;

function requireDist$9 () {
	if (hasRequiredDist$9) return dist$8;
	hasRequiredDist$9 = 1;
	Object.defineProperty(dist$8, "__esModule", { value: true });
	dist$8.ReadlineParser = void 0;
	const parser_delimiter_1 = requireDist$c();
	/**
	 *  A transform stream that emits data after a newline delimiter is received.
	 * @summary To use the `Readline` parser, provide a delimiter (defaults to `\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).
	 */
	class ReadlineParser extends parser_delimiter_1.DelimiterParser {
	    constructor(options) {
	        const opts = {
	            delimiter: Buffer.from('\n', 'utf8'),
	            encoding: 'utf8',
	            ...options,
	        };
	        if (typeof opts.delimiter === 'string') {
	            opts.delimiter = Buffer.from(opts.delimiter, opts.encoding);
	        }
	        super(opts);
	    }
	}
	dist$8.ReadlineParser = ReadlineParser;
	return dist$8;
}

var dist$7 = {};

var hasRequiredDist$8;

function requireDist$8 () {
	if (hasRequiredDist$8) return dist$7;
	hasRequiredDist$8 = 1;
	Object.defineProperty(dist$7, "__esModule", { value: true });
	dist$7.ReadyParser = void 0;
	const stream_1 = require$$0;
	/**
	 * A transform stream that waits for a sequence of "ready" bytes before emitting a ready event and emitting data events
	 *
	 * To use the `Ready` parser provide a byte start sequence. After the bytes have been received a ready event is fired and data events are passed through.
	 */
	class ReadyParser extends stream_1.Transform {
	    constructor({ delimiter, ...options }) {
	        if (delimiter === undefined) {
	            throw new TypeError('"delimiter" is not a bufferable object');
	        }
	        if (delimiter.length === 0) {
	            throw new TypeError('"delimiter" has a 0 or undefined length');
	        }
	        super(options);
	        this.delimiter = Buffer.from(delimiter);
	        this.readOffset = 0;
	        this.ready = false;
	    }
	    _transform(chunk, encoding, cb) {
	        if (this.ready) {
	            this.push(chunk);
	            return cb();
	        }
	        const delimiter = this.delimiter;
	        let chunkOffset = 0;
	        while (this.readOffset < delimiter.length && chunkOffset < chunk.length) {
	            if (delimiter[this.readOffset] === chunk[chunkOffset]) {
	                this.readOffset++;
	            }
	            else {
	                this.readOffset = 0;
	            }
	            chunkOffset++;
	        }
	        if (this.readOffset === delimiter.length) {
	            this.ready = true;
	            this.emit('ready');
	            const chunkRest = chunk.slice(chunkOffset);
	            if (chunkRest.length > 0) {
	                this.push(chunkRest);
	            }
	        }
	        cb();
	    }
	}
	dist$7.ReadyParser = ReadyParser;
	return dist$7;
}

var dist$6 = {};

var hasRequiredDist$7;

function requireDist$7 () {
	if (hasRequiredDist$7) return dist$6;
	hasRequiredDist$7 = 1;
	Object.defineProperty(dist$6, "__esModule", { value: true });
	dist$6.RegexParser = void 0;
	const stream_1 = require$$0;
	/**
	 * A transform stream that uses a regular expression to split the incoming text upon.
	 *
	 * To use the `Regex` parser provide a regular expression to split the incoming text upon. Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).
	 */
	class RegexParser extends stream_1.Transform {
	    constructor({ regex, ...options }) {
	        const opts = {
	            encoding: 'utf8',
	            ...options,
	        };
	        if (regex === undefined) {
	            throw new TypeError('"options.regex" must be a regular expression pattern or object');
	        }
	        if (!(regex instanceof RegExp)) {
	            regex = new RegExp(regex.toString());
	        }
	        super(opts);
	        this.regex = regex;
	        this.data = '';
	    }
	    _transform(chunk, encoding, cb) {
	        const data = this.data + chunk;
	        const parts = data.split(this.regex);
	        this.data = parts.pop() || '';
	        parts.forEach(part => {
	            this.push(part);
	        });
	        cb();
	    }
	    _flush(cb) {
	        this.push(this.data);
	        this.data = '';
	        cb();
	    }
	}
	dist$6.RegexParser = RegexParser;
	return dist$6;
}

var dist$5 = {};

var decoder = {};

var hasRequiredDecoder;

function requireDecoder () {
	if (hasRequiredDecoder) return decoder;
	hasRequiredDecoder = 1;
	Object.defineProperty(decoder, "__esModule", { value: true });
	decoder.SlipDecoder = void 0;
	const stream_1 = require$$0;
	/**
	 * A transform stream that decodes slip encoded data.
	 * @extends Transform
	 *
	 * Runs in O(n) time, stripping out slip encoding and emitting decoded data. Optionally custom slip escape and delimiters can be provided.
	 */
	class SlipDecoder extends stream_1.Transform {
	    constructor(options = {}) {
	        super(options);
	        const { START, ESC = 0xdb, END = 0xc0, ESC_START, ESC_END = 0xdc, ESC_ESC = 0xdd } = options;
	        this.opts = {
	            START,
	            ESC,
	            END,
	            ESC_START,
	            ESC_END,
	            ESC_ESC,
	        };
	        this.buffer = Buffer.alloc(0);
	        this.escape = false;
	        this.start = false;
	    }
	    _transform(chunk, encoding, cb) {
	        for (let ndx = 0; ndx < chunk.length; ndx++) {
	            let byte = chunk[ndx];
	            if (byte === this.opts.START) {
	                this.start = true;
	                continue;
	            }
	            else if (undefined == this.opts.START) {
	                this.start = true;
	            }
	            if (this.escape) {
	                if (byte === this.opts.ESC_START && this.opts.START) {
	                    byte = this.opts.START;
	                }
	                else if (byte === this.opts.ESC_ESC) {
	                    byte = this.opts.ESC;
	                }
	                else if (byte === this.opts.ESC_END) {
	                    byte = this.opts.END;
	                }
	                else {
	                    this.escape = false;
	                    this.push(this.buffer);
	                    this.buffer = Buffer.alloc(0);
	                }
	            }
	            else {
	                if (byte === this.opts.ESC) {
	                    this.escape = true;
	                    continue;
	                }
	                if (byte === this.opts.END) {
	                    this.push(this.buffer);
	                    this.buffer = Buffer.alloc(0);
	                    this.escape = false;
	                    this.start = false;
	                    continue;
	                }
	            }
	            this.escape = false;
	            if (this.start) {
	                this.buffer = Buffer.concat([this.buffer, Buffer.from([byte])]);
	            }
	        }
	        cb();
	    }
	    _flush(cb) {
	        this.push(this.buffer);
	        this.buffer = Buffer.alloc(0);
	        cb();
	    }
	}
	decoder.SlipDecoder = SlipDecoder;
	return decoder;
}

var encoder = {};

var hasRequiredEncoder;

function requireEncoder () {
	if (hasRequiredEncoder) return encoder;
	hasRequiredEncoder = 1;
	Object.defineProperty(encoder, "__esModule", { value: true });
	encoder.SlipEncoder = void 0;
	const stream_1 = require$$0;
	/**
	 * A transform stream that emits SLIP-encoded data for each incoming packet.
	 *
	 * Runs in O(n) time, adding a 0xC0 character at the end of each
	 * received packet and escaping characters, according to RFC 1055.
	 */
	class SlipEncoder extends stream_1.Transform {
	    constructor(options = {}) {
	        super(options);
	        const { START, ESC = 0xdb, END = 0xc0, ESC_START, ESC_END = 0xdc, ESC_ESC = 0xdd, bluetoothQuirk = false } = options;
	        this.opts = {
	            START,
	            ESC,
	            END,
	            ESC_START,
	            ESC_END,
	            ESC_ESC,
	            bluetoothQuirk,
	        };
	    }
	    _transform(chunk, encoding, cb) {
	        const chunkLength = chunk.length;
	        if (this.opts.bluetoothQuirk && chunkLength === 0) {
	            // Edge case: push no data. Bluetooth-quirky SLIP parsers don't like
	            // lots of 0xC0s together.
	            return cb();
	        }
	        // Allocate memory for the worst-case scenario: all bytes are escaped,
	        // plus start and end separators.
	        const encoded = Buffer.alloc(chunkLength * 2 + 2);
	        let j = 0;
	        if (this.opts.bluetoothQuirk == true) {
	            encoded[j++] = this.opts.END;
	        }
	        if (this.opts.START !== undefined) {
	            encoded[j++] = this.opts.START;
	        }
	        for (let i = 0; i < chunkLength; i++) {
	            let byte = chunk[i];
	            if (byte === this.opts.START && this.opts.ESC_START) {
	                encoded[j++] = this.opts.ESC;
	                byte = this.opts.ESC_START;
	            }
	            else if (byte === this.opts.END) {
	                encoded[j++] = this.opts.ESC;
	                byte = this.opts.ESC_END;
	            }
	            else if (byte === this.opts.ESC) {
	                encoded[j++] = this.opts.ESC;
	                byte = this.opts.ESC_ESC;
	            }
	            encoded[j++] = byte;
	        }
	        encoded[j++] = this.opts.END;
	        cb(null, encoded.slice(0, j));
	    }
	}
	encoder.SlipEncoder = SlipEncoder;
	return encoder;
}

var hasRequiredDist$6;

function requireDist$6 () {
	if (hasRequiredDist$6) return dist$5;
	hasRequiredDist$6 = 1;
	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireDecoder(), exports);
		__exportStar(requireEncoder(), exports); 
	} (dist$5));
	return dist$5;
}

var dist$4 = {};

var utils$1 = {};

var hasRequiredUtils;

function requireUtils () {
	if (hasRequiredUtils) return utils$1;
	hasRequiredUtils = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.convertHeaderBufferToObj = exports.HEADER_LENGTH = void 0;
		exports.HEADER_LENGTH = 6;
		/**
		 * For numbers less than 255, will ensure that their string representation is at least 8 characters long.
		 */
		const toOctetStr = (num) => {
		    let str = Number(num).toString(2);
		    while (str.length < 8) {
		        str = `0${str}`;
		    }
		    return str;
		};
		/**
		 * Converts a Buffer of any length to an Object representation of a Space Packet header, provided
		 * the received data is in the correct format.
		 * @param buf - The buffer containing the Space Packet Header Data
		 */
		const convertHeaderBufferToObj = (buf) => {
		    const headerStr = Array.from(buf.slice(0, exports.HEADER_LENGTH)).reduce((accum, curr) => `${accum}${toOctetStr(curr)}`, '');
		    const isVersion1 = headerStr.slice(0, 3) === '000';
		    const versionNumber = isVersion1 ? 1 : 'UNKNOWN_VERSION';
		    const type = Number(headerStr[3]);
		    const secondaryHeader = Number(headerStr[4]);
		    const apid = parseInt(headerStr.slice(5, 16), 2);
		    const sequenceFlags = parseInt(headerStr.slice(16, 18), 2);
		    const packetName = parseInt(headerStr.slice(18, 32), 2);
		    const dataLength = parseInt(headerStr.slice(-16), 2) + 1;
		    return {
		        versionNumber,
		        identification: {
		            apid,
		            secondaryHeader,
		            type,
		        },
		        sequenceControl: {
		            packetName,
		            sequenceFlags,
		        },
		        dataLength,
		    };
		};
		exports.convertHeaderBufferToObj = convertHeaderBufferToObj; 
	} (utils$1));
	return utils$1;
}

var hasRequiredDist$5;

function requireDist$5 () {
	if (hasRequiredDist$5) return dist$4;
	hasRequiredDist$5 = 1;
	Object.defineProperty(dist$4, "__esModule", { value: true });
	dist$4.SpacePacketParser = void 0;
	const stream_1 = require$$0;
	const utils_1 = requireUtils();
	/**
	 * A Transform stream that accepts a stream of octet data and converts it into an object
	 * representation of a CCSDS Space Packet. See https://public.ccsds.org/Pubs/133x0b2e1.pdf for a
	 * description of the Space Packet format.
	 */
	class SpacePacketParser extends stream_1.Transform {
	    /**
	     * A Transform stream that accepts a stream of octet data and emits object representations of
	     * CCSDS Space Packets once a packet has been completely received.
	     * @param {Object} [options] Configuration options for the stream
	     * @param {Number} options.timeCodeFieldLength The length of the time code field within the data
	     * @param {Number} options.ancillaryDataFieldLength The length of the ancillary data field within the data
	     */
	    constructor(options = {}) {
	        super({ ...options, objectMode: true });
	        // Set the constants for this Space Packet Connection; these will help us parse incoming data
	        // fields:
	        this.timeCodeFieldLength = options.timeCodeFieldLength || 0;
	        this.ancillaryDataFieldLength = options.ancillaryDataFieldLength || 0;
	        this.dataSlice = this.timeCodeFieldLength + this.ancillaryDataFieldLength;
	        // These are stateful based on the current packet being received:
	        this.dataBuffer = Buffer.alloc(0);
	        this.headerBuffer = Buffer.alloc(0);
	        this.dataLength = 0;
	        this.expectingHeader = true;
	    }
	    /**
	     * Bundle the header, secondary header if present, and the data into a JavaScript object to emit.
	     * If more data has been received past the current packet, begin the process of parsing the next
	     * packet(s).
	     */
	    pushCompletedPacket() {
	        if (!this.header) {
	            throw new Error('Missing header');
	        }
	        const timeCode = Buffer.from(this.dataBuffer.slice(0, this.timeCodeFieldLength));
	        const ancillaryData = Buffer.from(this.dataBuffer.slice(this.timeCodeFieldLength, this.timeCodeFieldLength + this.ancillaryDataFieldLength));
	        const data = Buffer.from(this.dataBuffer.slice(this.dataSlice, this.dataLength));
	        const completedPacket = {
	            header: { ...this.header },
	            data: data.toString(),
	        };
	        if (timeCode.length > 0 || ancillaryData.length > 0) {
	            completedPacket.secondaryHeader = {};
	            if (timeCode.length) {
	                completedPacket.secondaryHeader.timeCode = timeCode.toString();
	            }
	            if (ancillaryData.length) {
	                completedPacket.secondaryHeader.ancillaryData = ancillaryData.toString();
	            }
	        }
	        this.push(completedPacket);
	        // If there is an overflow (i.e. we have more data than the packet we just pushed) begin parsing
	        // the next packet.
	        const nextChunk = Buffer.from(this.dataBuffer.slice(this.dataLength));
	        if (nextChunk.length >= utils_1.HEADER_LENGTH) {
	            this.extractHeader(nextChunk);
	        }
	        else {
	            this.headerBuffer = nextChunk;
	            this.dataBuffer = Buffer.alloc(0);
	            this.expectingHeader = true;
	            this.dataLength = 0;
	            this.header = undefined;
	        }
	    }
	    /**
	     * Build the Stream's headerBuffer property from the received Buffer chunk; extract data from it
	     * if it's complete. If there's more to the chunk than just the header, initiate handling the
	     * packet data.
	     * @param chunk -  Build the Stream's headerBuffer property from
	     */
	    extractHeader(chunk) {
	        const headerAsBuffer = Buffer.concat([this.headerBuffer, chunk]);
	        const startOfDataBuffer = headerAsBuffer.slice(utils_1.HEADER_LENGTH);
	        if (headerAsBuffer.length >= utils_1.HEADER_LENGTH) {
	            this.header = (0, utils_1.convertHeaderBufferToObj)(headerAsBuffer);
	            this.dataLength = this.header.dataLength;
	            this.headerBuffer = Buffer.alloc(0);
	            this.expectingHeader = false;
	        }
	        else {
	            this.headerBuffer = headerAsBuffer;
	        }
	        if (startOfDataBuffer.length > 0) {
	            this.dataBuffer = Buffer.from(startOfDataBuffer);
	            if (this.dataBuffer.length >= this.dataLength) {
	                this.pushCompletedPacket();
	            }
	        }
	    }
	    _transform(chunk, encoding, cb) {
	        if (this.expectingHeader) {
	            this.extractHeader(chunk);
	        }
	        else {
	            this.dataBuffer = Buffer.concat([this.dataBuffer, chunk]);
	            if (this.dataBuffer.length >= this.dataLength) {
	                this.pushCompletedPacket();
	            }
	        }
	        cb();
	    }
	    _flush(cb) {
	        const remaining = Buffer.concat([this.headerBuffer, this.dataBuffer]);
	        const remainingArray = Array.from(remaining);
	        this.push(remainingArray);
	        cb();
	    }
	}
	dist$4.SpacePacketParser = SpacePacketParser;
	return dist$4;
}

var serialportMock = {};

var dist$3 = {};

var src = {exports: {}};

var browser = {exports: {}};

/**
 * Helpers.
 */

var ms;
var hasRequiredMs;

function requireMs () {
	if (hasRequiredMs) return ms;
	hasRequiredMs = 1;
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var w = d * 7;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	ms = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isFinite(val)) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'weeks':
	    case 'week':
	    case 'w':
	      return n * w;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (msAbs >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (msAbs >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (msAbs >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return plural(ms, msAbs, d, 'day');
	  }
	  if (msAbs >= h) {
	    return plural(ms, msAbs, h, 'hour');
	  }
	  if (msAbs >= m) {
	    return plural(ms, msAbs, m, 'minute');
	  }
	  if (msAbs >= s) {
	    return plural(ms, msAbs, s, 'second');
	  }
	  return ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, msAbs, n, name) {
	  var isPlural = msAbs >= n * 1.5;
	  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
	}
	return ms;
}

var common;
var hasRequiredCommon;

function requireCommon () {
	if (hasRequiredCommon) return common;
	hasRequiredCommon = 1;
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 */

	function setup(env) {
		createDebug.debug = createDebug;
		createDebug.default = createDebug;
		createDebug.coerce = coerce;
		createDebug.disable = disable;
		createDebug.enable = enable;
		createDebug.enabled = enabled;
		createDebug.humanize = requireMs();
		createDebug.destroy = destroy;

		Object.keys(env).forEach(key => {
			createDebug[key] = env[key];
		});

		/**
		* The currently active debug mode names, and names to skip.
		*/

		createDebug.names = [];
		createDebug.skips = [];

		/**
		* Map of special "%n" handling functions, for the debug "format" argument.
		*
		* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		*/
		createDebug.formatters = {};

		/**
		* Selects a color for a debug namespace
		* @param {String} namespace The namespace string for the debug instance to be colored
		* @return {Number|String} An ANSI color code for the given namespace
		* @api private
		*/
		function selectColor(namespace) {
			let hash = 0;

			for (let i = 0; i < namespace.length; i++) {
				hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
				hash |= 0; // Convert to 32bit integer
			}

			return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
		}
		createDebug.selectColor = selectColor;

		/**
		* Create a debugger with the given `namespace`.
		*
		* @param {String} namespace
		* @return {Function}
		* @api public
		*/
		function createDebug(namespace) {
			let prevTime;
			let enableOverride = null;
			let namespacesCache;
			let enabledCache;

			function debug(...args) {
				// Disabled?
				if (!debug.enabled) {
					return;
				}

				const self = debug;

				// Set `diff` timestamp
				const curr = Number(new Date());
				const ms = curr - (prevTime || curr);
				self.diff = ms;
				self.prev = prevTime;
				self.curr = curr;
				prevTime = curr;

				args[0] = createDebug.coerce(args[0]);

				if (typeof args[0] !== 'string') {
					// Anything else let's inspect with %O
					args.unshift('%O');
				}

				// Apply any `formatters` transformations
				let index = 0;
				args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
					// If we encounter an escaped % then don't increase the array index
					if (match === '%%') {
						return '%';
					}
					index++;
					const formatter = createDebug.formatters[format];
					if (typeof formatter === 'function') {
						const val = args[index];
						match = formatter.call(self, val);

						// Now we need to remove `args[index]` since it's inlined in the `format`
						args.splice(index, 1);
						index--;
					}
					return match;
				});

				// Apply env-specific formatting (colors, etc.)
				createDebug.formatArgs.call(self, args);

				const logFn = self.log || createDebug.log;
				logFn.apply(self, args);
			}

			debug.namespace = namespace;
			debug.useColors = createDebug.useColors();
			debug.color = createDebug.selectColor(namespace);
			debug.extend = extend;
			debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

			Object.defineProperty(debug, 'enabled', {
				enumerable: true,
				configurable: false,
				get: () => {
					if (enableOverride !== null) {
						return enableOverride;
					}
					if (namespacesCache !== createDebug.namespaces) {
						namespacesCache = createDebug.namespaces;
						enabledCache = createDebug.enabled(namespace);
					}

					return enabledCache;
				},
				set: v => {
					enableOverride = v;
				}
			});

			// Env-specific initialization logic for debug instances
			if (typeof createDebug.init === 'function') {
				createDebug.init(debug);
			}

			return debug;
		}

		function extend(namespace, delimiter) {
			const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
			newDebug.log = this.log;
			return newDebug;
		}

		/**
		* Enables a debug mode by namespaces. This can include modes
		* separated by a colon and wildcards.
		*
		* @param {String} namespaces
		* @api public
		*/
		function enable(namespaces) {
			createDebug.save(namespaces);
			createDebug.namespaces = namespaces;

			createDebug.names = [];
			createDebug.skips = [];

			let i;
			const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
			const len = split.length;

			for (i = 0; i < len; i++) {
				if (!split[i]) {
					// ignore empty strings
					continue;
				}

				namespaces = split[i].replace(/\*/g, '.*?');

				if (namespaces[0] === '-') {
					createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
				} else {
					createDebug.names.push(new RegExp('^' + namespaces + '$'));
				}
			}
		}

		/**
		* Disable debug output.
		*
		* @return {String} namespaces
		* @api public
		*/
		function disable() {
			const namespaces = [
				...createDebug.names.map(toNamespace),
				...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
			].join(',');
			createDebug.enable('');
			return namespaces;
		}

		/**
		* Returns true if the given mode name is enabled, false otherwise.
		*
		* @param {String} name
		* @return {Boolean}
		* @api public
		*/
		function enabled(name) {
			if (name[name.length - 1] === '*') {
				return true;
			}

			let i;
			let len;

			for (i = 0, len = createDebug.skips.length; i < len; i++) {
				if (createDebug.skips[i].test(name)) {
					return false;
				}
			}

			for (i = 0, len = createDebug.names.length; i < len; i++) {
				if (createDebug.names[i].test(name)) {
					return true;
				}
			}

			return false;
		}

		/**
		* Convert regexp to namespace
		*
		* @param {RegExp} regxep
		* @return {String} namespace
		* @api private
		*/
		function toNamespace(regexp) {
			return regexp.toString()
				.substring(2, regexp.toString().length - 2)
				.replace(/\.\*\?$/, '*');
		}

		/**
		* Coerce `val`.
		*
		* @param {Mixed} val
		* @return {Mixed}
		* @api private
		*/
		function coerce(val) {
			if (val instanceof Error) {
				return val.stack || val.message;
			}
			return val;
		}

		/**
		* XXX DO NOT USE. This is a temporary stub function.
		* XXX It WILL be removed in the next major release.
		*/
		function destroy() {
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}

		createDebug.enable(createDebug.load());

		return createDebug;
	}

	common = setup;
	return common;
}

/* eslint-env browser */

var hasRequiredBrowser;

function requireBrowser () {
	if (hasRequiredBrowser) return browser.exports;
	hasRequiredBrowser = 1;
	(function (module, exports) {
		/**
		 * This is the web browser implementation of `debug()`.
		 */

		exports.formatArgs = formatArgs;
		exports.save = save;
		exports.load = load;
		exports.useColors = useColors;
		exports.storage = localstorage();
		exports.destroy = (() => {
			let warned = false;

			return () => {
				if (!warned) {
					warned = true;
					console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
				}
			};
		})();

		/**
		 * Colors.
		 */

		exports.colors = [
			'#0000CC',
			'#0000FF',
			'#0033CC',
			'#0033FF',
			'#0066CC',
			'#0066FF',
			'#0099CC',
			'#0099FF',
			'#00CC00',
			'#00CC33',
			'#00CC66',
			'#00CC99',
			'#00CCCC',
			'#00CCFF',
			'#3300CC',
			'#3300FF',
			'#3333CC',
			'#3333FF',
			'#3366CC',
			'#3366FF',
			'#3399CC',
			'#3399FF',
			'#33CC00',
			'#33CC33',
			'#33CC66',
			'#33CC99',
			'#33CCCC',
			'#33CCFF',
			'#6600CC',
			'#6600FF',
			'#6633CC',
			'#6633FF',
			'#66CC00',
			'#66CC33',
			'#9900CC',
			'#9900FF',
			'#9933CC',
			'#9933FF',
			'#99CC00',
			'#99CC33',
			'#CC0000',
			'#CC0033',
			'#CC0066',
			'#CC0099',
			'#CC00CC',
			'#CC00FF',
			'#CC3300',
			'#CC3333',
			'#CC3366',
			'#CC3399',
			'#CC33CC',
			'#CC33FF',
			'#CC6600',
			'#CC6633',
			'#CC9900',
			'#CC9933',
			'#CCCC00',
			'#CCCC33',
			'#FF0000',
			'#FF0033',
			'#FF0066',
			'#FF0099',
			'#FF00CC',
			'#FF00FF',
			'#FF3300',
			'#FF3333',
			'#FF3366',
			'#FF3399',
			'#FF33CC',
			'#FF33FF',
			'#FF6600',
			'#FF6633',
			'#FF9900',
			'#FF9933',
			'#FFCC00',
			'#FFCC33'
		];

		/**
		 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
		 * and the Firebug extension (any Firefox version) are known
		 * to support "%c" CSS customizations.
		 *
		 * TODO: add a `localStorage` variable to explicitly enable/disable colors
		 */

		// eslint-disable-next-line complexity
		function useColors() {
			// NB: In an Electron preload script, document will be defined but not fully
			// initialized. Since we know we're in Chrome, we'll just detect this case
			// explicitly
			if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
				return true;
			}

			// Internet Explorer and Edge do not support colors.
			if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
				return false;
			}

			// Is webkit? http://stackoverflow.com/a/16459606/376773
			// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
			return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
				// Is firebug? http://stackoverflow.com/a/398120/376773
				(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
				// Is firefox >= v31?
				// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
				(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
				// Double check webkit in userAgent just in case we are in a worker
				(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
		}

		/**
		 * Colorize log arguments if enabled.
		 *
		 * @api public
		 */

		function formatArgs(args) {
			args[0] = (this.useColors ? '%c' : '') +
				this.namespace +
				(this.useColors ? ' %c' : ' ') +
				args[0] +
				(this.useColors ? '%c ' : ' ') +
				'+' + module.exports.humanize(this.diff);

			if (!this.useColors) {
				return;
			}

			const c = 'color: ' + this.color;
			args.splice(1, 0, c, 'color: inherit');

			// The final "%c" is somewhat tricky, because there could be other
			// arguments passed either before or after the %c, so we need to
			// figure out the correct index to insert the CSS into
			let index = 0;
			let lastC = 0;
			args[0].replace(/%[a-zA-Z%]/g, match => {
				if (match === '%%') {
					return;
				}
				index++;
				if (match === '%c') {
					// We only are interested in the *last* %c
					// (the user may have provided their own)
					lastC = index;
				}
			});

			args.splice(lastC, 0, c);
		}

		/**
		 * Invokes `console.debug()` when available.
		 * No-op when `console.debug` is not a "function".
		 * If `console.debug` is not available, falls back
		 * to `console.log`.
		 *
		 * @api public
		 */
		exports.log = console.debug || console.log || (() => {});

		/**
		 * Save `namespaces`.
		 *
		 * @param {String} namespaces
		 * @api private
		 */
		function save(namespaces) {
			try {
				if (namespaces) {
					exports.storage.setItem('debug', namespaces);
				} else {
					exports.storage.removeItem('debug');
				}
			} catch (error) {
				// Swallow
				// XXX (@Qix-) should we be logging these?
			}
		}

		/**
		 * Load `namespaces`.
		 *
		 * @return {String} returns the previously persisted debug modes
		 * @api private
		 */
		function load() {
			let r;
			try {
				r = exports.storage.getItem('debug');
			} catch (error) {
				// Swallow
				// XXX (@Qix-) should we be logging these?
			}

			// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
			if (!r && typeof process !== 'undefined' && 'env' in process) {
				r = process.env.DEBUG;
			}

			return r;
		}

		/**
		 * Localstorage attempts to return the localstorage.
		 *
		 * This is necessary because safari throws
		 * when a user disables cookies/localstorage
		 * and you attempt to access it.
		 *
		 * @return {LocalStorage}
		 * @api private
		 */

		function localstorage() {
			try {
				// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
				// The Browser also has localStorage in the global context.
				return localStorage;
			} catch (error) {
				// Swallow
				// XXX (@Qix-) should we be logging these?
			}
		}

		module.exports = requireCommon()(exports);

		const {formatters} = module.exports;

		/**
		 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
		 */

		formatters.j = function (v) {
			try {
				return JSON.stringify(v);
			} catch (error) {
				return '[UnexpectedJSONParseError]: ' + error.message;
			}
		}; 
	} (browser, browser.exports));
	return browser.exports;
}

var node = {exports: {}};

var hasFlag;
var hasRequiredHasFlag;

function requireHasFlag () {
	if (hasRequiredHasFlag) return hasFlag;
	hasRequiredHasFlag = 1;
	hasFlag = (flag, argv) => {
		argv = argv || process.argv;
		const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
		const pos = argv.indexOf(prefix + flag);
		const terminatorPos = argv.indexOf('--');
		return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
	};
	return hasFlag;
}

var supportsColor_1;
var hasRequiredSupportsColor;

function requireSupportsColor () {
	if (hasRequiredSupportsColor) return supportsColor_1;
	hasRequiredSupportsColor = 1;
	const os = require$$0$1;
	const hasFlag = requireHasFlag();

	const env = process.env;

	let forceColor;
	if (hasFlag('no-color') ||
		hasFlag('no-colors') ||
		hasFlag('color=false')) {
		forceColor = false;
	} else if (hasFlag('color') ||
		hasFlag('colors') ||
		hasFlag('color=true') ||
		hasFlag('color=always')) {
		forceColor = true;
	}
	if ('FORCE_COLOR' in env) {
		forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
	}

	function translateLevel(level) {
		if (level === 0) {
			return false;
		}

		return {
			level,
			hasBasic: true,
			has256: level >= 2,
			has16m: level >= 3
		};
	}

	function supportsColor(stream) {
		if (forceColor === false) {
			return 0;
		}

		if (hasFlag('color=16m') ||
			hasFlag('color=full') ||
			hasFlag('color=truecolor')) {
			return 3;
		}

		if (hasFlag('color=256')) {
			return 2;
		}

		if (stream && !stream.isTTY && forceColor !== true) {
			return 0;
		}

		const min = forceColor ? 1 : 0;

		if (process.platform === 'win32') {
			// Node.js 7.5.0 is the first version of Node.js to include a patch to
			// libuv that enables 256 color output on Windows. Anything earlier and it
			// won't work. However, here we target Node.js 8 at minimum as it is an LTS
			// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
			// release that supports 256 colors. Windows 10 build 14931 is the first release
			// that supports 16m/TrueColor.
			const osRelease = os.release().split('.');
			if (
				Number(process.versions.node.split('.')[0]) >= 8 &&
				Number(osRelease[0]) >= 10 &&
				Number(osRelease[2]) >= 10586
			) {
				return Number(osRelease[2]) >= 14931 ? 3 : 2;
			}

			return 1;
		}

		if ('CI' in env) {
			if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
				return 1;
			}

			return min;
		}

		if ('TEAMCITY_VERSION' in env) {
			return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
		}

		if (env.COLORTERM === 'truecolor') {
			return 3;
		}

		if ('TERM_PROGRAM' in env) {
			const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

			switch (env.TERM_PROGRAM) {
				case 'iTerm.app':
					return version >= 3 ? 3 : 2;
				case 'Apple_Terminal':
					return 2;
				// No default
			}
		}

		if (/-256(color)?$/i.test(env.TERM)) {
			return 2;
		}

		if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
			return 1;
		}

		if ('COLORTERM' in env) {
			return 1;
		}

		if (env.TERM === 'dumb') {
			return min;
		}

		return min;
	}

	function getSupportLevel(stream) {
		const level = supportsColor(stream);
		return translateLevel(level);
	}

	supportsColor_1 = {
		supportsColor: getSupportLevel,
		stdout: getSupportLevel(process.stdout),
		stderr: getSupportLevel(process.stderr)
	};
	return supportsColor_1;
}

/**
 * Module dependencies.
 */

var hasRequiredNode;

function requireNode () {
	if (hasRequiredNode) return node.exports;
	hasRequiredNode = 1;
	(function (module, exports) {
		const tty = require$$0$2;
		const util = require$$1$1;

		/**
		 * This is the Node.js implementation of `debug()`.
		 */

		exports.init = init;
		exports.log = log;
		exports.formatArgs = formatArgs;
		exports.save = save;
		exports.load = load;
		exports.useColors = useColors;
		exports.destroy = util.deprecate(
			() => {},
			'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
		);

		/**
		 * Colors.
		 */

		exports.colors = [6, 2, 3, 4, 5, 1];

		try {
			// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
			// eslint-disable-next-line import/no-extraneous-dependencies
			const supportsColor = requireSupportsColor();

			if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
				exports.colors = [
					20,
					21,
					26,
					27,
					32,
					33,
					38,
					39,
					40,
					41,
					42,
					43,
					44,
					45,
					56,
					57,
					62,
					63,
					68,
					69,
					74,
					75,
					76,
					77,
					78,
					79,
					80,
					81,
					92,
					93,
					98,
					99,
					112,
					113,
					128,
					129,
					134,
					135,
					148,
					149,
					160,
					161,
					162,
					163,
					164,
					165,
					166,
					167,
					168,
					169,
					170,
					171,
					172,
					173,
					178,
					179,
					184,
					185,
					196,
					197,
					198,
					199,
					200,
					201,
					202,
					203,
					204,
					205,
					206,
					207,
					208,
					209,
					214,
					215,
					220,
					221
				];
			}
		} catch (error) {
			// Swallow - we only care if `supports-color` is available; it doesn't have to be.
		}

		/**
		 * Build up the default `inspectOpts` object from the environment variables.
		 *
		 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
		 */

		exports.inspectOpts = Object.keys(process.env).filter(key => {
			return /^debug_/i.test(key);
		}).reduce((obj, key) => {
			// Camel-case
			const prop = key
				.substring(6)
				.toLowerCase()
				.replace(/_([a-z])/g, (_, k) => {
					return k.toUpperCase();
				});

			// Coerce string value into JS value
			let val = process.env[key];
			if (/^(yes|on|true|enabled)$/i.test(val)) {
				val = true;
			} else if (/^(no|off|false|disabled)$/i.test(val)) {
				val = false;
			} else if (val === 'null') {
				val = null;
			} else {
				val = Number(val);
			}

			obj[prop] = val;
			return obj;
		}, {});

		/**
		 * Is stdout a TTY? Colored output is enabled when `true`.
		 */

		function useColors() {
			return 'colors' in exports.inspectOpts ?
				Boolean(exports.inspectOpts.colors) :
				tty.isatty(process.stderr.fd);
		}

		/**
		 * Adds ANSI color escape codes if enabled.
		 *
		 * @api public
		 */

		function formatArgs(args) {
			const {namespace: name, useColors} = this;

			if (useColors) {
				const c = this.color;
				const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
				const prefix = `  ${colorCode};1m${name} \u001B[0m`;

				args[0] = prefix + args[0].split('\n').join('\n' + prefix);
				args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
			} else {
				args[0] = getDate() + name + ' ' + args[0];
			}
		}

		function getDate() {
			if (exports.inspectOpts.hideDate) {
				return '';
			}
			return new Date().toISOString() + ' ';
		}

		/**
		 * Invokes `util.format()` with the specified arguments and writes to stderr.
		 */

		function log(...args) {
			return process.stderr.write(util.format(...args) + '\n');
		}

		/**
		 * Save `namespaces`.
		 *
		 * @param {String} namespaces
		 * @api private
		 */
		function save(namespaces) {
			if (namespaces) {
				process.env.DEBUG = namespaces;
			} else {
				// If you set a process.env field to null or undefined, it gets cast to the
				// string 'null' or 'undefined'. Just delete instead.
				delete process.env.DEBUG;
			}
		}

		/**
		 * Load `namespaces`.
		 *
		 * @return {String} returns the previously persisted debug modes
		 * @api private
		 */

		function load() {
			return process.env.DEBUG;
		}

		/**
		 * Init logic for `debug` instances.
		 *
		 * Create a new `inspectOpts` object in case `useColors` is set
		 * differently for a particular `debug` instance.
		 */

		function init(debug) {
			debug.inspectOpts = {};

			const keys = Object.keys(exports.inspectOpts);
			for (let i = 0; i < keys.length; i++) {
				debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
			}
		}

		module.exports = requireCommon()(exports);

		const {formatters} = module.exports;

		/**
		 * Map %o to `util.inspect()`, all on a single line.
		 */

		formatters.o = function (v) {
			this.inspectOpts.colors = this.useColors;
			return util.inspect(v, this.inspectOpts)
				.split('\n')
				.map(str => str.trim())
				.join(' ');
		};

		/**
		 * Map %O to `util.inspect()`, allowing multiple lines if needed.
		 */

		formatters.O = function (v) {
			this.inspectOpts.colors = this.useColors;
			return util.inspect(v, this.inspectOpts);
		}; 
	} (node, node.exports));
	return node.exports;
}

/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */

var hasRequiredSrc;

function requireSrc () {
	if (hasRequiredSrc) return src.exports;
	hasRequiredSrc = 1;
	if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
		src.exports = requireBrowser();
	} else {
		src.exports = requireNode();
	}
	return src.exports;
}

var hasRequiredDist$4;

function requireDist$4 () {
	if (hasRequiredDist$4) return dist$3;
	hasRequiredDist$4 = 1;
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(dist$3, "__esModule", { value: true });
	dist$3.SerialPortStream = dist$3.DisconnectedError = void 0;
	const stream_1 = require$$0;
	const debug_1 = __importDefault(requireSrc());
	const debug = (0, debug_1.default)('serialport/stream');
	class DisconnectedError extends Error {
	    constructor(message) {
	        super(message);
	        this.disconnected = true;
	    }
	}
	dist$3.DisconnectedError = DisconnectedError;
	const defaultSetFlags = {
	    brk: false,
	    cts: false,
	    dtr: true,
	    rts: true,
	};
	function allocNewReadPool(poolSize) {
	    const pool = Buffer.allocUnsafe(poolSize);
	    pool.used = 0;
	    return pool;
	}
	class SerialPortStream extends stream_1.Duplex {
	    /**
	     * Create a new serial port object for the `path`. In the case of invalid arguments or invalid options, when constructing a new SerialPort it will throw an error. The port will open automatically by default, which is the equivalent of calling `port.open(openCallback)` in the next tick. You can disable this by setting the option `autoOpen` to `false`.
	     * @emits open
	     * @emits data
	     * @emits close
	     * @emits error
	     */
	    constructor(options, openCallback) {
	        const settings = {
	            autoOpen: true,
	            endOnClose: false,
	            highWaterMark: 64 * 1024,
	            ...options,
	        };
	        super({
	            highWaterMark: settings.highWaterMark,
	        });
	        if (!settings.binding) {
	            throw new TypeError('"Bindings" is invalid pass it as `options.binding`');
	        }
	        if (!settings.path) {
	            throw new TypeError(`"path" is not defined: ${settings.path}`);
	        }
	        if (typeof settings.baudRate !== 'number') {
	            throw new TypeError(`"baudRate" must be a number: ${settings.baudRate}`);
	        }
	        this.settings = settings;
	        this.opening = false;
	        this.closing = false;
	        this._pool = allocNewReadPool(this.settings.highWaterMark);
	        this._kMinPoolSpace = 128;
	        if (this.settings.autoOpen) {
	            this.open(openCallback);
	        }
	    }
	    get path() {
	        return this.settings.path;
	    }
	    get baudRate() {
	        return this.settings.baudRate;
	    }
	    get isOpen() {
	        var _a, _b;
	        return ((_b = (_a = this.port) === null || _a === void 0 ? void 0 : _a.isOpen) !== null && _b !== void 0 ? _b : false) && !this.closing;
	    }
	    _error(error, callback) {
	        if (callback) {
	            callback.call(this, error);
	        }
	        else {
	            this.emit('error', error);
	        }
	    }
	    _asyncError(error, callback) {
	        process.nextTick(() => this._error(error, callback));
	    }
	    /**
	     * Opens a connection to the given serial port.
	     * @param {ErrorCallback=} openCallback - Called after a connection is opened. If this is not provided and an error occurs, it will be emitted on the port's `error` event.
	     * @emits open
	     */
	    open(openCallback) {
	        if (this.isOpen) {
	            return this._asyncError(new Error('Port is already open'), openCallback);
	        }
	        if (this.opening) {
	            return this._asyncError(new Error('Port is opening'), openCallback);
	        }
	        // eslint-disable-next-line @typescript-eslint/no-unused-vars
	        const { highWaterMark, binding, autoOpen, endOnClose, ...openOptions } = this.settings;
	        this.opening = true;
	        debug('opening', `path: ${this.path}`);
	        this.settings.binding.open(openOptions).then(port => {
	            debug('opened', `path: ${this.path}`);
	            this.port = port;
	            this.opening = false;
	            this.emit('open');
	            if (openCallback) {
	                openCallback.call(this, null);
	            }
	        }, err => {
	            this.opening = false;
	            debug('Binding #open had an error', err);
	            this._error(err, openCallback);
	        });
	    }
	    /**
	     * Changes the baud rate for an open port. Emits an error or calls the callback if the baud rate isn't supported.
	     * @param {object=} options Only supports `baudRate`.
	     * @param {number=} [options.baudRate] The baud rate of the port to be opened. This should match one of the commonly available baud rates, such as 110, 300, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 57600, or 115200. Custom rates are supported best effort per platform. The device connected to the serial port is not guaranteed to support the requested baud rate, even if the port itself supports that baud rate.
	     * @param {ErrorCallback=} [callback] Called once the port's baud rate changes. If `.update` is called without a callback, and there is an error, an error event is emitted.
	     * @returns {undefined}
	     */
	    update(options, callback) {
	        if (!this.isOpen || !this.port) {
	            debug('update attempted, but port is not open');
	            return this._asyncError(new Error('Port is not open'), callback);
	        }
	        debug('update', `baudRate: ${options.baudRate}`);
	        this.port.update(options).then(() => {
	            debug('binding.update', 'finished');
	            this.settings.baudRate = options.baudRate;
	            if (callback) {
	                callback.call(this, null);
	            }
	        }, err => {
	            debug('binding.update', 'error', err);
	            return this._error(err, callback);
	        });
	    }
	    write(data, encoding, callback) {
	        if (Array.isArray(data)) {
	            data = Buffer.from(data);
	        }
	        if (typeof encoding === 'function') {
	            return super.write(data, encoding);
	        }
	        return super.write(data, encoding, callback);
	    }
	    _write(data, encoding, callback) {
	        if (!this.isOpen || !this.port) {
	            this.once('open', () => {
	                this._write(data, encoding, callback);
	            });
	            return;
	        }
	        debug('_write', `${data.length} bytes of data`);
	        this.port.write(data).then(() => {
	            debug('binding.write', 'write finished');
	            callback(null);
	        }, err => {
	            debug('binding.write', 'error', err);
	            if (!err.canceled) {
	                this._disconnected(err);
	            }
	            callback(err);
	        });
	    }
	    _writev(data, callback) {
	        debug('_writev', `${data.length} chunks of data`);
	        const dataV = data.map(write => write.chunk);
	        this._write(Buffer.concat(dataV), undefined, callback);
	    }
	    _read(bytesToRead) {
	        if (!this.isOpen || !this.port) {
	            debug('_read', 'queueing _read for after open');
	            this.once('open', () => {
	                this._read(bytesToRead);
	            });
	            return;
	        }
	        if (!this._pool || this._pool.length - this._pool.used < this._kMinPoolSpace) {
	            debug('_read', 'discarding the read buffer pool because it is below kMinPoolSpace');
	            this._pool = allocNewReadPool(this.settings.highWaterMark);
	        }
	        // Grab another reference to the pool in the case that while we're
	        // in the thread pool another read() finishes up the pool, and
	        // allocates a new one.
	        const pool = this._pool;
	        // Read the smaller of rest of the pool or however many bytes we want
	        const toRead = Math.min(pool.length - pool.used, bytesToRead);
	        const start = pool.used;
	        // the actual read.
	        debug('_read', `reading`, { start, toRead });
	        this.port.read(pool, start, toRead).then(({ bytesRead }) => {
	            debug('binding.read', `finished`, { bytesRead });
	            // zero bytes means read means we've hit EOF? Maybe this should be an error
	            if (bytesRead === 0) {
	                debug('binding.read', 'Zero bytes read closing readable stream');
	                this.push(null);
	                return;
	            }
	            pool.used += bytesRead;
	            this.push(pool.slice(start, start + bytesRead));
	        }, err => {
	            debug('binding.read', `error`, err);
	            if (!err.canceled) {
	                this._disconnected(err);
	            }
	            this._read(bytesToRead); // prime to read more once we're reconnected
	        });
	    }
	    _disconnected(err) {
	        if (!this.isOpen) {
	            debug('disconnected aborted because already closed', err);
	            return;
	        }
	        debug('disconnected', err);
	        this.close(undefined, new DisconnectedError(err.message));
	    }
	    /**
	     * Closes an open connection.
	     *
	     * If there are in progress writes when the port is closed the writes will error.
	     * @param {ErrorCallback} callback Called once a connection is closed.
	     * @param {Error} disconnectError used internally to propagate a disconnect error
	     */
	    close(callback, disconnectError = null) {
	        if (!this.isOpen || !this.port) {
	            debug('close attempted, but port is not open');
	            return this._asyncError(new Error('Port is not open'), callback);
	        }
	        this.closing = true;
	        debug('#close');
	        this.port.close().then(() => {
	            this.closing = false;
	            debug('binding.close', 'finished');
	            this.emit('close', disconnectError);
	            if (this.settings.endOnClose) {
	                this.emit('end');
	            }
	            if (callback) {
	                callback.call(this, disconnectError);
	            }
	        }, err => {
	            this.closing = false;
	            debug('binding.close', 'had an error', err);
	            return this._error(err, callback);
	        });
	    }
	    /**
	     * Set control flags on an open port. Uses [`SetCommMask`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363257(v=vs.85).aspx) for Windows and [`ioctl`](http://linux.die.net/man/4/tty_ioctl) for OS X and Linux.
	     *
	     * All options are operating system default when the port is opened. Every flag is set on each call to the provided or default values. If options isn't provided default options is used.
	     */
	    set(options, callback) {
	        if (!this.isOpen || !this.port) {
	            debug('set attempted, but port is not open');
	            return this._asyncError(new Error('Port is not open'), callback);
	        }
	        const settings = { ...defaultSetFlags, ...options };
	        debug('#set', settings);
	        this.port.set(settings).then(() => {
	            debug('binding.set', 'finished');
	            if (callback) {
	                callback.call(this, null);
	            }
	        }, err => {
	            debug('binding.set', 'had an error', err);
	            return this._error(err, callback);
	        });
	    }
	    /**
	     * Returns the control flags (CTS, DSR, DCD) on the open port.
	     * Uses [`GetCommModemStatus`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363258(v=vs.85).aspx) for Windows and [`ioctl`](http://linux.die.net/man/4/tty_ioctl) for mac and linux.
	     */
	    get(callback) {
	        if (!this.isOpen || !this.port) {
	            debug('get attempted, but port is not open');
	            return this._asyncError(new Error('Port is not open'), callback);
	        }
	        debug('#get');
	        this.port.get().then(status => {
	            debug('binding.get', 'finished');
	            callback.call(this, null, status);
	        }, err => {
	            debug('binding.get', 'had an error', err);
	            return this._error(err, callback);
	        });
	    }
	    /**
	     * Flush discards data received but not read, and written but not transmitted by the operating system. For more technical details, see [`tcflush(fd, TCIOFLUSH)`](http://linux.die.net/man/3/tcflush) for Mac/Linux and [`FlushFileBuffers`](http://msdn.microsoft.com/en-us/library/windows/desktop/aa364439) for Windows.
	     */
	    flush(callback) {
	        if (!this.isOpen || !this.port) {
	            debug('flush attempted, but port is not open');
	            return this._asyncError(new Error('Port is not open'), callback);
	        }
	        debug('#flush');
	        this.port.flush().then(() => {
	            debug('binding.flush', 'finished');
	            if (callback) {
	                callback.call(this, null);
	            }
	        }, err => {
	            debug('binding.flush', 'had an error', err);
	            return this._error(err, callback);
	        });
	    }
	    /**
	     * Waits until all output data is transmitted to the serial port. After any pending write has completed it calls [`tcdrain()`](http://linux.die.net/man/3/tcdrain) or [FlushFileBuffers()](https://msdn.microsoft.com/en-us/library/windows/desktop/aa364439(v=vs.85).aspx) to ensure it has been written to the device.
	    * @example
	    Write the `data` and wait until it has finished transmitting to the target serial port before calling the callback. This will queue until the port is open and writes are finished.
	  
	    ```js
	    function writeAndDrain (data, callback) {
	      port.write(data);
	      port.drain(callback);
	    }
	    ```
	    */
	    drain(callback) {
	        debug('drain');
	        if (!this.isOpen || !this.port) {
	            debug('drain queuing on port open');
	            this.once('open', () => {
	                this.drain(callback);
	            });
	            return;
	        }
	        this.port.drain().then(() => {
	            debug('binding.drain', 'finished');
	            if (callback) {
	                callback.call(this, null);
	            }
	        }, err => {
	            debug('binding.drain', 'had an error', err);
	            return this._error(err, callback);
	        });
	    }
	}
	dist$3.SerialPortStream = SerialPortStream;
	/**
	 * The `error` event's callback is called with an error object whenever there is an error.
	 * @event error
	 */
	/**
	 * The `open` event's callback is called with no arguments when the port is opened and ready for writing. This happens if you have the constructor open immediately (which opens in the next tick) or if you open the port manually with `open()`. See [Useage/Opening a Port](#opening-a-port) for more information.
	 * @event open
	 */
	/**
	 * Request a number of bytes from the SerialPort. The `read()` method pulls some data out of the internal buffer and returns it. If no data is available to be read, null is returned. By default, the data is returned as a `Buffer` object unless an encoding has been specified using the `.setEncoding()` method.
	 * @method SerialPort.prototype.read
	 * @param {number=} size Specify how many bytes of data to return, if available
	 * @returns {(string|Buffer|null)} The data from internal buffers
	 */
	/**
	 * Listening for the `data` event puts the port in flowing mode. Data is emitted as soon as it's received. Data is a `Buffer` object with a varying amount of data in it. The `readLine` parser converts the data into string lines. See the [parsers](https://serialport.io/docs/api-parsers-overview) section for more information on parsers, and the [Node.js stream documentation](https://nodejs.org/api/stream.html#stream_event_data) for more information on the data event.
	 * @event data
	 */
	/**
	 * The `close` event's callback is called with no arguments when the port is closed. In the case of a disconnect it will be called with a Disconnect Error object (`err.disconnected == true`). In the event of a close error (unlikely), an error event is triggered.
	 * @event close
	 */
	/**
	 * The `pause()` method causes a stream in flowing mode to stop emitting 'data' events, switching out of flowing mode. Any data that becomes available remains in the internal buffer.
	 * @method SerialPort.prototype.pause
	 * @see resume
	 * @returns `this`
	 */
	/**
	 * The `resume()` method causes an explicitly paused, `Readable` stream to resume emitting 'data' events, switching the stream into flowing mode.
	 * @method SerialPort.prototype.resume
	 * @see pause
	 * @returns `this`
	 */
	return dist$3;
}

var dist$2 = {};

var hasRequiredDist$3;

function requireDist$3 () {
	if (hasRequiredDist$3) return dist$2;
	hasRequiredDist$3 = 1;

	Object.defineProperty(dist$2, '__esModule', { value: true });

	var debugFactory = requireSrc();

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var debugFactory__default = /*#__PURE__*/_interopDefaultLegacy(debugFactory);

	const debug = debugFactory__default["default"]('serialport/binding-mock');
	let ports = {};
	let serialNumber = 0;
	function resolveNextTick() {
	    return new Promise(resolve => process.nextTick(() => resolve()));
	}
	class CanceledError extends Error {
	    constructor(message) {
	        super(message);
	        this.canceled = true;
	    }
	}
	const MockBinding = {
	    reset() {
	        ports = {};
	        serialNumber = 0;
	    },
	    // Create a mock port
	    createPort(path, options = {}) {
	        serialNumber++;
	        const optWithDefaults = Object.assign({ echo: false, record: false, manufacturer: 'The J5 Robotics Company', vendorId: undefined, productId: undefined, maxReadSize: 1024 }, options);
	        ports[path] = {
	            data: Buffer.alloc(0),
	            echo: optWithDefaults.echo,
	            record: optWithDefaults.record,
	            readyData: optWithDefaults.readyData,
	            maxReadSize: optWithDefaults.maxReadSize,
	            info: {
	                path,
	                manufacturer: optWithDefaults.manufacturer,
	                serialNumber: `${serialNumber}`,
	                pnpId: undefined,
	                locationId: undefined,
	                vendorId: optWithDefaults.vendorId,
	                productId: optWithDefaults.productId,
	            },
	        };
	        debug(serialNumber, 'created port', JSON.stringify({ path, opt: options }));
	    },
	    async list() {
	        debug(null, 'list');
	        return Object.values(ports).map(port => port.info);
	    },
	    async open(options) {
	        var _a;
	        if (!options || typeof options !== 'object' || Array.isArray(options)) {
	            throw new TypeError('"options" is not an object');
	        }
	        if (!options.path) {
	            throw new TypeError('"path" is not a valid port');
	        }
	        if (!options.baudRate) {
	            throw new TypeError('"baudRate" is not a valid baudRate');
	        }
	        const openOptions = Object.assign({ dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, xon: false, xoff: false, xany: false, hupcl: true }, options);
	        const { path } = openOptions;
	        debug(null, `open: opening path ${path}`);
	        const port = ports[path];
	        await resolveNextTick();
	        if (!port) {
	            throw new Error(`Port does not exist - please call MockBinding.createPort('${path}') first`);
	        }
	        const serialNumber = port.info.serialNumber;
	        if ((_a = port.openOpt) === null || _a === void 0 ? void 0 : _a.lock) {
	            debug(serialNumber, 'open: Port is locked cannot open');
	            throw new Error('Port is locked cannot open');
	        }
	        debug(serialNumber, `open: opened path ${path}`);
	        port.openOpt = Object.assign({}, openOptions);
	        return new MockPortBinding(port, openOptions);
	    },
	};
	/**
	 * Mock bindings for pretend serialport access
	 */
	class MockPortBinding {
	    constructor(port, openOptions) {
	        this.port = port;
	        this.openOptions = openOptions;
	        this.pendingRead = null;
	        this.isOpen = true;
	        this.lastWrite = null;
	        this.recording = Buffer.alloc(0);
	        this.writeOperation = null; // in flight promise or null
	        this.serialNumber = port.info.serialNumber;
	        if (port.readyData) {
	            const data = port.readyData;
	            process.nextTick(() => {
	                if (this.isOpen) {
	                    debug(this.serialNumber, 'emitting ready data');
	                    this.emitData(data);
	                }
	            });
	        }
	    }
	    // Emit data on a mock port
	    emitData(data) {
	        if (!this.isOpen || !this.port) {
	            throw new Error('Port must be open to pretend to receive data');
	        }
	        const bufferData = Buffer.isBuffer(data) ? data : Buffer.from(data);
	        debug(this.serialNumber, 'emitting data - pending read:', Boolean(this.pendingRead));
	        this.port.data = Buffer.concat([this.port.data, bufferData]);
	        if (this.pendingRead) {
	            process.nextTick(this.pendingRead);
	            this.pendingRead = null;
	        }
	    }
	    async close() {
	        debug(this.serialNumber, 'close');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        const port = this.port;
	        if (!port) {
	            throw new Error('already closed');
	        }
	        port.openOpt = undefined;
	        // reset data on close
	        port.data = Buffer.alloc(0);
	        debug(this.serialNumber, 'port is closed');
	        this.serialNumber = undefined;
	        this.isOpen = false;
	        if (this.pendingRead) {
	            this.pendingRead(new CanceledError('port is closed'));
	        }
	    }
	    async read(buffer, offset, length) {
	        if (!Buffer.isBuffer(buffer)) {
	            throw new TypeError('"buffer" is not a Buffer');
	        }
	        if (typeof offset !== 'number' || isNaN(offset)) {
	            throw new TypeError(`"offset" is not an integer got "${isNaN(offset) ? 'NaN' : typeof offset}"`);
	        }
	        if (typeof length !== 'number' || isNaN(length)) {
	            throw new TypeError(`"length" is not an integer got "${isNaN(length) ? 'NaN' : typeof length}"`);
	        }
	        if (buffer.length < offset + length) {
	            throw new Error('buffer is too small');
	        }
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        debug(this.serialNumber, 'read', length, 'bytes');
	        await resolveNextTick();
	        if (!this.isOpen || !this.port) {
	            throw new CanceledError('Read canceled');
	        }
	        if (this.port.data.length <= 0) {
	            return new Promise((resolve, reject) => {
	                this.pendingRead = err => {
	                    if (err) {
	                        return reject(err);
	                    }
	                    this.read(buffer, offset, length).then(resolve, reject);
	                };
	            });
	        }
	        const lengthToRead = this.port.maxReadSize > length ? length : this.port.maxReadSize;
	        const data = this.port.data.slice(0, lengthToRead);
	        const bytesRead = data.copy(buffer, offset);
	        this.port.data = this.port.data.slice(lengthToRead);
	        debug(this.serialNumber, 'read', bytesRead, 'bytes');
	        return { bytesRead, buffer };
	    }
	    async write(buffer) {
	        if (!Buffer.isBuffer(buffer)) {
	            throw new TypeError('"buffer" is not a Buffer');
	        }
	        if (!this.isOpen || !this.port) {
	            debug('write', 'error port is not open');
	            throw new Error('Port is not open');
	        }
	        debug(this.serialNumber, 'write', buffer.length, 'bytes');
	        if (this.writeOperation) {
	            throw new Error('Overlapping writes are not supported and should be queued by the serialport object');
	        }
	        this.writeOperation = (async () => {
	            await resolveNextTick();
	            if (!this.isOpen || !this.port) {
	                throw new Error('Write canceled');
	            }
	            const data = (this.lastWrite = Buffer.from(buffer)); // copy
	            if (this.port.record) {
	                this.recording = Buffer.concat([this.recording, data]);
	            }
	            if (this.port.echo) {
	                process.nextTick(() => {
	                    if (this.isOpen) {
	                        this.emitData(data);
	                    }
	                });
	            }
	            this.writeOperation = null;
	            debug(this.serialNumber, 'writing finished');
	        })();
	        return this.writeOperation;
	    }
	    async update(options) {
	        if (typeof options !== 'object') {
	            throw TypeError('"options" is not an object');
	        }
	        if (typeof options.baudRate !== 'number') {
	            throw new TypeError('"options.baudRate" is not a number');
	        }
	        debug(this.serialNumber, 'update');
	        if (!this.isOpen || !this.port) {
	            throw new Error('Port is not open');
	        }
	        await resolveNextTick();
	        if (this.port.openOpt) {
	            this.port.openOpt.baudRate = options.baudRate;
	        }
	    }
	    async set(options) {
	        if (typeof options !== 'object') {
	            throw new TypeError('"options" is not an object');
	        }
	        debug(this.serialNumber, 'set');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await resolveNextTick();
	    }
	    async get() {
	        debug(this.serialNumber, 'get');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await resolveNextTick();
	        return {
	            cts: true,
	            dsr: false,
	            dcd: false,
	        };
	    }
	    async getBaudRate() {
	        var _a;
	        debug(this.serialNumber, 'getBaudRate');
	        if (!this.isOpen || !this.port) {
	            throw new Error('Port is not open');
	        }
	        await resolveNextTick();
	        if (!((_a = this.port.openOpt) === null || _a === void 0 ? void 0 : _a.baudRate)) {
	            throw new Error('Internal Error');
	        }
	        return {
	            baudRate: this.port.openOpt.baudRate,
	        };
	    }
	    async flush() {
	        debug(this.serialNumber, 'flush');
	        if (!this.isOpen || !this.port) {
	            throw new Error('Port is not open');
	        }
	        await resolveNextTick();
	        this.port.data = Buffer.alloc(0);
	    }
	    async drain() {
	        debug(this.serialNumber, 'drain');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await this.writeOperation;
	        await resolveNextTick();
	    }
	}

	dist$2.CanceledError = CanceledError;
	dist$2.MockBinding = MockBinding;
	dist$2.MockPortBinding = MockPortBinding;
	return dist$2;
}

var hasRequiredSerialportMock;

function requireSerialportMock () {
	if (hasRequiredSerialportMock) return serialportMock;
	hasRequiredSerialportMock = 1;
	Object.defineProperty(serialportMock, "__esModule", { value: true });
	serialportMock.SerialPortMock = void 0;
	const stream_1 = requireDist$4();
	const binding_mock_1 = requireDist$3();
	class SerialPortMock extends stream_1.SerialPortStream {
	    constructor(options, openCallback) {
	        const opts = {
	            binding: binding_mock_1.MockBinding,
	            ...options,
	        };
	        super(opts, openCallback);
	    }
	}
	serialportMock.SerialPortMock = SerialPortMock;
	SerialPortMock.list = binding_mock_1.MockBinding.list;
	SerialPortMock.binding = binding_mock_1.MockBinding;
	return serialportMock;
}

var serialport$1 = {};

var dist$1 = {};

var darwin = {};

var loadBindings = {};

var nodeGypBuild$1 = {exports: {}};

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var nodeGypBuild;
var hasRequiredNodeGypBuild$1;

function requireNodeGypBuild$1 () {
	if (hasRequiredNodeGypBuild$1) return nodeGypBuild;
	hasRequiredNodeGypBuild$1 = 1;
	var fs = require$$0$3;
	var path = require$$2;
	var os = require$$0$1;

	// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'
	var runtimeRequire = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : commonjsRequire; // eslint-disable-line

	var vars = (process.config && process.config.variables) || {};
	var prebuildsOnly = !!process.env.PREBUILDS_ONLY;
	var abi = process.versions.modules; // TODO: support old node where this is undef
	var runtime = isElectron() ? 'electron' : (isNwjs() ? 'node-webkit' : 'node');

	var arch = process.env.npm_config_arch || os.arch();
	var platform = process.env.npm_config_platform || os.platform();
	var libc = process.env.LIBC || (isAlpine(platform) ? 'musl' : 'glibc');
	var armv = process.env.ARM_VERSION || (arch === 'arm64' ? '8' : vars.arm_version) || '';
	var uv = (process.versions.uv || '').split('.')[0];

	nodeGypBuild = load;

	function load (dir) {
	  return runtimeRequire(load.resolve(dir))
	}

	load.resolve = load.path = function (dir) {
	  dir = path.resolve(dir || '.');

	  try {
	    var name = runtimeRequire(path.join(dir, 'package.json')).name.toUpperCase().replace(/-/g, '_');
	    if (process.env[name + '_PREBUILD']) dir = process.env[name + '_PREBUILD'];
	  } catch (err) {}

	  if (!prebuildsOnly) {
	    var release = getFirst(path.join(dir, 'build/Release'), matchBuild);
	    if (release) return release

	    var debug = getFirst(path.join(dir, 'build/Debug'), matchBuild);
	    if (debug) return debug
	  }

	  var prebuild = resolve(dir);
	  if (prebuild) return prebuild

	  var nearby = resolve(path.dirname(process.execPath));
	  if (nearby) return nearby

	  var target = [
	    'platform=' + platform,
	    'arch=' + arch,
	    'runtime=' + runtime,
	    'abi=' + abi,
	    'uv=' + uv,
	    armv ? 'armv=' + armv : '',
	    'libc=' + libc,
	    'node=' + process.versions.node,
	    process.versions.electron ? 'electron=' + process.versions.electron : '',
	    typeof __webpack_require__ === 'function' ? 'webpack=true' : '' // eslint-disable-line
	  ].filter(Boolean).join(' ');

	  throw new Error('No native build was found for ' + target + '\n    loaded from: ' + dir + '\n')

	  function resolve (dir) {
	    // Find matching "prebuilds/<platform>-<arch>" directory
	    var tuples = readdirSync(path.join(dir, 'prebuilds')).map(parseTuple);
	    var tuple = tuples.filter(matchTuple(platform, arch)).sort(compareTuples)[0];
	    if (!tuple) return

	    // Find most specific flavor first
	    var prebuilds = path.join(dir, 'prebuilds', tuple.name);
	    var parsed = readdirSync(prebuilds).map(parseTags);
	    var candidates = parsed.filter(matchTags(runtime, abi));
	    var winner = candidates.sort(compareTags(runtime))[0];
	    if (winner) return path.join(prebuilds, winner.file)
	  }
	};

	function readdirSync (dir) {
	  try {
	    return fs.readdirSync(dir)
	  } catch (err) {
	    return []
	  }
	}

	function getFirst (dir, filter) {
	  var files = readdirSync(dir).filter(filter);
	  return files[0] && path.join(dir, files[0])
	}

	function matchBuild (name) {
	  return /\.node$/.test(name)
	}

	function parseTuple (name) {
	  // Example: darwin-x64+arm64
	  var arr = name.split('-');
	  if (arr.length !== 2) return

	  var platform = arr[0];
	  var architectures = arr[1].split('+');

	  if (!platform) return
	  if (!architectures.length) return
	  if (!architectures.every(Boolean)) return

	  return { name, platform, architectures }
	}

	function matchTuple (platform, arch) {
	  return function (tuple) {
	    if (tuple == null) return false
	    if (tuple.platform !== platform) return false
	    return tuple.architectures.includes(arch)
	  }
	}

	function compareTuples (a, b) {
	  // Prefer single-arch prebuilds over multi-arch
	  return a.architectures.length - b.architectures.length
	}

	function parseTags (file) {
	  var arr = file.split('.');
	  var extension = arr.pop();
	  var tags = { file: file, specificity: 0 };

	  if (extension !== 'node') return

	  for (var i = 0; i < arr.length; i++) {
	    var tag = arr[i];

	    if (tag === 'node' || tag === 'electron' || tag === 'node-webkit') {
	      tags.runtime = tag;
	    } else if (tag === 'napi') {
	      tags.napi = true;
	    } else if (tag.slice(0, 3) === 'abi') {
	      tags.abi = tag.slice(3);
	    } else if (tag.slice(0, 2) === 'uv') {
	      tags.uv = tag.slice(2);
	    } else if (tag.slice(0, 4) === 'armv') {
	      tags.armv = tag.slice(4);
	    } else if (tag === 'glibc' || tag === 'musl') {
	      tags.libc = tag;
	    } else {
	      continue
	    }

	    tags.specificity++;
	  }

	  return tags
	}

	function matchTags (runtime, abi) {
	  return function (tags) {
	    if (tags == null) return false
	    if (tags.runtime !== runtime && !runtimeAgnostic(tags)) return false
	    if (tags.abi !== abi && !tags.napi) return false
	    if (tags.uv && tags.uv !== uv) return false
	    if (tags.armv && tags.armv !== armv) return false
	    if (tags.libc && tags.libc !== libc) return false

	    return true
	  }
	}

	function runtimeAgnostic (tags) {
	  return tags.runtime === 'node' && tags.napi
	}

	function compareTags (runtime) {
	  // Precedence: non-agnostic runtime, abi over napi, then by specificity.
	  return function (a, b) {
	    if (a.runtime !== b.runtime) {
	      return a.runtime === runtime ? -1 : 1
	    } else if (a.abi !== b.abi) {
	      return a.abi ? -1 : 1
	    } else if (a.specificity !== b.specificity) {
	      return a.specificity > b.specificity ? -1 : 1
	    } else {
	      return 0
	    }
	  }
	}

	function isNwjs () {
	  return !!(process.versions && process.versions.nw)
	}

	function isElectron () {
	  if (process.versions && process.versions.electron) return true
	  if (process.env.ELECTRON_RUN_AS_NODE) return true
	  return typeof window !== 'undefined' && window.process && window.process.type === 'renderer'
	}

	function isAlpine (platform) {
	  return platform === 'linux' && fs.existsSync('/etc/alpine-release')
	}

	// Exposed for unit tests
	// TODO: move to lib
	load.parseTags = parseTags;
	load.matchTags = matchTags;
	load.compareTags = compareTags;
	load.parseTuple = parseTuple;
	load.matchTuple = matchTuple;
	load.compareTuples = compareTuples;
	return nodeGypBuild;
}

var hasRequiredNodeGypBuild;

function requireNodeGypBuild () {
	if (hasRequiredNodeGypBuild) return nodeGypBuild$1.exports;
	hasRequiredNodeGypBuild = 1;
	if (typeof process.addon === 'function') { // if the platform supports native resolving prefer that
	  nodeGypBuild$1.exports = process.addon.bind(process);
	} else { // else use the runtime version here
	  nodeGypBuild$1.exports = requireNodeGypBuild$1();
	}
	return nodeGypBuild$1.exports;
}

var hasRequiredLoadBindings;

function requireLoadBindings () {
	if (hasRequiredLoadBindings) return loadBindings;
	hasRequiredLoadBindings = 1;
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(loadBindings, "__esModule", { value: true });
	loadBindings.asyncWrite = loadBindings.asyncRead = loadBindings.asyncUpdate = loadBindings.asyncSet = loadBindings.asyncOpen = loadBindings.asyncList = loadBindings.asyncGetBaudRate = loadBindings.asyncGet = loadBindings.asyncFlush = loadBindings.asyncDrain = loadBindings.asyncClose = void 0;
	const node_gyp_build_1 = __importDefault(requireNodeGypBuild());
	const util_1 = require$$1$1;
	const path_1 = require$$2;
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	const binding = (0, node_gyp_build_1.default)((0, path_1.join)(__dirname, '../'));
	loadBindings.asyncClose = binding.close ? (0, util_1.promisify)(binding.close) : async () => { throw new Error('"binding.close" Method not implemented'); };
	loadBindings.asyncDrain = binding.drain ? (0, util_1.promisify)(binding.drain) : async () => { throw new Error('"binding.drain" Method not implemented'); };
	loadBindings.asyncFlush = binding.flush ? (0, util_1.promisify)(binding.flush) : async () => { throw new Error('"binding.flush" Method not implemented'); };
	loadBindings.asyncGet = binding.get ? (0, util_1.promisify)(binding.get) : async () => { throw new Error('"binding.get" Method not implemented'); };
	loadBindings.asyncGetBaudRate = binding.getBaudRate ? (0, util_1.promisify)(binding.getBaudRate) : async () => { throw new Error('"binding.getBaudRate" Method not implemented'); };
	loadBindings.asyncList = binding.list ? (0, util_1.promisify)(binding.list) : async () => { throw new Error('"binding.list" Method not implemented'); };
	loadBindings.asyncOpen = binding.open ? (0, util_1.promisify)(binding.open) : async () => { throw new Error('"binding.open" Method not implemented'); };
	loadBindings.asyncSet = binding.set ? (0, util_1.promisify)(binding.set) : async () => { throw new Error('"binding.set" Method not implemented'); };
	loadBindings.asyncUpdate = binding.update ? (0, util_1.promisify)(binding.update) : async () => { throw new Error('"binding.update" Method not implemented'); };
	loadBindings.asyncRead = binding.read ? (0, util_1.promisify)(binding.read) : async () => { throw new Error('"binding.read" Method not implemented'); };
	loadBindings.asyncWrite = binding.read ? (0, util_1.promisify)(binding.write) : async () => { throw new Error('"binding.write" Method not implemented'); };
	return loadBindings;
}

var poller = {};

var errors = {};

var hasRequiredErrors;

function requireErrors () {
	if (hasRequiredErrors) return errors;
	hasRequiredErrors = 1;
	Object.defineProperty(errors, "__esModule", { value: true });
	errors.BindingsError = void 0;
	class BindingsError extends Error {
	    constructor(message, { canceled = false } = {}) {
	        super(message);
	        this.canceled = canceled;
	    }
	}
	errors.BindingsError = BindingsError;
	return errors;
}

var hasRequiredPoller;

function requirePoller () {
	if (hasRequiredPoller) return poller;
	hasRequiredPoller = 1;
	(function (exports) {
		var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
		    return (mod && mod.__esModule) ? mod : { "default": mod };
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Poller = exports.EVENTS = void 0;
		const debug_1 = __importDefault(requireSrc());
		const events_1 = EventEmitter$2;
		const path_1 = require$$2;
		const node_gyp_build_1 = __importDefault(requireNodeGypBuild());
		const errors_1 = requireErrors();
		const { Poller: PollerBindings } = (0, node_gyp_build_1.default)((0, path_1.join)(__dirname, '../'));
		const logger = (0, debug_1.default)('serialport/bindings-cpp/poller');
		exports.EVENTS = {
		    UV_READABLE: 0b0001,
		    UV_WRITABLE: 0b0010,
		    UV_DISCONNECT: 0b0100,
		};
		function handleEvent(error, eventFlag) {
		    if (error) {
		        logger('error', error);
		        this.emit('readable', error);
		        this.emit('writable', error);
		        this.emit('disconnect', error);
		        return;
		    }
		    if (eventFlag & exports.EVENTS.UV_READABLE) {
		        logger('received "readable"');
		        this.emit('readable', null);
		    }
		    if (eventFlag & exports.EVENTS.UV_WRITABLE) {
		        logger('received "writable"');
		        this.emit('writable', null);
		    }
		    if (eventFlag & exports.EVENTS.UV_DISCONNECT) {
		        logger('received "disconnect"');
		        this.emit('disconnect', null);
		    }
		}
		/**
		 * Polls unix systems for readable or writable states of a file or serialport
		 */
		class Poller extends events_1.EventEmitter {
		    constructor(fd, FDPoller = PollerBindings) {
		        logger('Creating poller');
		        super();
		        this.poller = new FDPoller(fd, handleEvent.bind(this));
		    }
		    /**
		     * Wait for the next event to occur
		     * @param {string} event ('readable'|'writable'|'disconnect')
		     * @returns {Poller} returns itself
		     */
		    once(event, callback) {
		        switch (event) {
		            case 'readable':
		                this.poll(exports.EVENTS.UV_READABLE);
		                break;
		            case 'writable':
		                this.poll(exports.EVENTS.UV_WRITABLE);
		                break;
		            case 'disconnect':
		                this.poll(exports.EVENTS.UV_DISCONNECT);
		                break;
		        }
		        return super.once(event, callback);
		    }
		    /**
		     * Ask the bindings to listen for an event, it is recommend to use `.once()` for easy use
		     * @param {EVENTS} eventFlag polls for an event or group of events based upon a flag.
		     */
		    poll(eventFlag = 0) {
		        if (eventFlag & exports.EVENTS.UV_READABLE) {
		            logger('Polling for "readable"');
		        }
		        if (eventFlag & exports.EVENTS.UV_WRITABLE) {
		            logger('Polling for "writable"');
		        }
		        if (eventFlag & exports.EVENTS.UV_DISCONNECT) {
		            logger('Polling for "disconnect"');
		        }
		        this.poller.poll(eventFlag);
		    }
		    /**
		     * Stop listening for events and cancel all outstanding listening with an error
		     */
		    stop() {
		        logger('Stopping poller');
		        this.poller.stop();
		        this.emitCanceled();
		    }
		    destroy() {
		        logger('Destroying poller');
		        this.poller.destroy();
		        this.emitCanceled();
		    }
		    emitCanceled() {
		        const err = new errors_1.BindingsError('Canceled', { canceled: true });
		        this.emit('readable', err);
		        this.emit('writable', err);
		        this.emit('disconnect', err);
		    }
		}
		exports.Poller = Poller; 
	} (poller));
	return poller;
}

var unixRead = {};

var hasRequiredUnixRead;

function requireUnixRead () {
	if (hasRequiredUnixRead) return unixRead;
	hasRequiredUnixRead = 1;
	(function (exports) {
		var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
		    return (mod && mod.__esModule) ? mod : { "default": mod };
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.unixRead = void 0;
		const util_1 = require$$1$1;
		const fs_1 = require$$0$3;
		const errors_1 = requireErrors();
		const debug_1 = __importDefault(requireSrc());
		const logger = (0, debug_1.default)('serialport/bindings-cpp/unixRead');
		const readAsync = (0, util_1.promisify)(fs_1.read);
		const readable = (binding) => {
		    return new Promise((resolve, reject) => {
		        if (!binding.poller) {
		            throw new Error('No poller on bindings');
		        }
		        binding.poller.once('readable', err => (err ? reject(err) : resolve()));
		    });
		};
		const unixRead = async ({ binding, buffer, offset, length, fsReadAsync = readAsync, }) => {
		    logger('Starting read');
		    if (!binding.isOpen || !binding.fd) {
		        throw new errors_1.BindingsError('Port is not open', { canceled: true });
		    }
		    try {
		        const { bytesRead } = await fsReadAsync(binding.fd, buffer, offset, length, null);
		        if (bytesRead === 0) {
		            return (0, exports.unixRead)({ binding, buffer, offset, length, fsReadAsync });
		        }
		        logger('Finished read', bytesRead, 'bytes');
		        return { bytesRead, buffer };
		    }
		    catch (err) {
		        logger('read error', err);
		        if (err.code === 'EAGAIN' || err.code === 'EWOULDBLOCK' || err.code === 'EINTR') {
		            if (!binding.isOpen) {
		                throw new errors_1.BindingsError('Port is not open', { canceled: true });
		            }
		            logger('waiting for readable because of code:', err.code);
		            await readable(binding);
		            return (0, exports.unixRead)({ binding, buffer, offset, length, fsReadAsync });
		        }
		        const disconnectError = err.code === 'EBADF' || // Bad file number means we got closed
		            err.code === 'ENXIO' || // No such device or address probably usb disconnect
		            err.code === 'UNKNOWN' ||
		            err.errno === -1; // generic error
		        if (disconnectError) {
		            err.disconnect = true;
		            logger('disconnecting', err);
		        }
		        throw err;
		    }
		};
		exports.unixRead = unixRead; 
	} (unixRead));
	return unixRead;
}

var unixWrite = {};

var hasRequiredUnixWrite;

function requireUnixWrite () {
	if (hasRequiredUnixWrite) return unixWrite;
	hasRequiredUnixWrite = 1;
	(function (exports) {
		var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
		    return (mod && mod.__esModule) ? mod : { "default": mod };
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.unixWrite = void 0;
		const fs_1 = require$$0$3;
		const debug_1 = __importDefault(requireSrc());
		const util_1 = require$$1$1;
		const logger = (0, debug_1.default)('serialport/bindings-cpp/unixWrite');
		const writeAsync = (0, util_1.promisify)(fs_1.write);
		const writable = (binding) => {
		    return new Promise((resolve, reject) => {
		        binding.poller.once('writable', err => (err ? reject(err) : resolve()));
		    });
		};
		const unixWrite = async ({ binding, buffer, offset = 0, fsWriteAsync = writeAsync }) => {
		    const bytesToWrite = buffer.length - offset;
		    logger('Starting write', buffer.length, 'bytes offset', offset, 'bytesToWrite', bytesToWrite);
		    if (!binding.isOpen || !binding.fd) {
		        throw new Error('Port is not open');
		    }
		    try {
		        const { bytesWritten } = await fsWriteAsync(binding.fd, buffer, offset, bytesToWrite);
		        logger('write returned: wrote', bytesWritten, 'bytes');
		        if (bytesWritten + offset < buffer.length) {
		            if (!binding.isOpen) {
		                throw new Error('Port is not open');
		            }
		            return (0, exports.unixWrite)({ binding, buffer, offset: bytesWritten + offset, fsWriteAsync });
		        }
		        logger('Finished writing', bytesWritten + offset, 'bytes');
		    }
		    catch (err) {
		        logger('write errored', err);
		        if (err.code === 'EAGAIN' || err.code === 'EWOULDBLOCK' || err.code === 'EINTR') {
		            if (!binding.isOpen) {
		                throw new Error('Port is not open');
		            }
		            logger('waiting for writable because of code:', err.code);
		            await writable(binding);
		            return (0, exports.unixWrite)({ binding, buffer, offset, fsWriteAsync });
		        }
		        const disconnectError = err.code === 'EBADF' || // Bad file number means we got closed
		            err.code === 'ENXIO' || // No such device or address probably usb disconnect
		            err.code === 'UNKNOWN' ||
		            err.errno === -1; // generic error
		        if (disconnectError) {
		            err.disconnect = true;
		            logger('disconnecting', err);
		        }
		        logger('error', err);
		        throw err;
		    }
		};
		exports.unixWrite = unixWrite; 
	} (unixWrite));
	return unixWrite;
}

var hasRequiredDarwin;

function requireDarwin () {
	if (hasRequiredDarwin) return darwin;
	hasRequiredDarwin = 1;
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(darwin, "__esModule", { value: true });
	darwin.DarwinPortBinding = darwin.DarwinBinding = void 0;
	const debug_1 = __importDefault(requireSrc());
	const load_bindings_1 = requireLoadBindings();
	const poller_1 = requirePoller();
	const unix_read_1 = requireUnixRead();
	const unix_write_1 = requireUnixWrite();
	const debug = (0, debug_1.default)('serialport/bindings-cpp');
	darwin.DarwinBinding = {
	    list() {
	        debug('list');
	        return (0, load_bindings_1.asyncList)();
	    },
	    async open(options) {
	        if (!options || typeof options !== 'object' || Array.isArray(options)) {
	            throw new TypeError('"options" is not an object');
	        }
	        if (!options.path) {
	            throw new TypeError('"path" is not a valid port');
	        }
	        if (!options.baudRate) {
	            throw new TypeError('"baudRate" is not a valid baudRate');
	        }
	        debug('open');
	        const openOptions = Object.assign({ vmin: 1, vtime: 0, dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, xon: false, xoff: false, xany: false, hupcl: true }, options);
	        const fd = await (0, load_bindings_1.asyncOpen)(openOptions.path, openOptions);
	        return new DarwinPortBinding(fd, openOptions);
	    },
	};
	/**
	 * The Darwin binding layer for OSX
	 */
	class DarwinPortBinding {
	    constructor(fd, options) {
	        this.fd = fd;
	        this.openOptions = options;
	        this.poller = new poller_1.Poller(fd);
	        this.writeOperation = null;
	    }
	    get isOpen() {
	        return this.fd !== null;
	    }
	    async close() {
	        debug('close');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        const fd = this.fd;
	        this.poller.stop();
	        this.poller.destroy();
	        this.fd = null;
	        await (0, load_bindings_1.asyncClose)(fd);
	    }
	    async read(buffer, offset, length) {
	        if (!Buffer.isBuffer(buffer)) {
	            throw new TypeError('"buffer" is not a Buffer');
	        }
	        if (typeof offset !== 'number' || isNaN(offset)) {
	            throw new TypeError(`"offset" is not an integer got "${isNaN(offset) ? 'NaN' : typeof offset}"`);
	        }
	        if (typeof length !== 'number' || isNaN(length)) {
	            throw new TypeError(`"length" is not an integer got "${isNaN(length) ? 'NaN' : typeof length}"`);
	        }
	        debug('read');
	        if (buffer.length < offset + length) {
	            throw new Error('buffer is too small');
	        }
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        return (0, unix_read_1.unixRead)({ binding: this, buffer, offset, length });
	    }
	    async write(buffer) {
	        if (!Buffer.isBuffer(buffer)) {
	            throw new TypeError('"buffer" is not a Buffer');
	        }
	        debug('write', buffer.length, 'bytes');
	        if (!this.isOpen) {
	            debug('write', 'error port is not open');
	            throw new Error('Port is not open');
	        }
	        this.writeOperation = (async () => {
	            if (buffer.length === 0) {
	                return;
	            }
	            await (0, unix_write_1.unixWrite)({ binding: this, buffer });
	            this.writeOperation = null;
	        })();
	        return this.writeOperation;
	    }
	    async update(options) {
	        if (!options || typeof options !== 'object' || Array.isArray(options)) {
	            throw TypeError('"options" is not an object');
	        }
	        if (typeof options.baudRate !== 'number') {
	            throw new TypeError('"options.baudRate" is not a number');
	        }
	        debug('update');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await (0, load_bindings_1.asyncUpdate)(this.fd, options);
	    }
	    async set(options) {
	        if (!options || typeof options !== 'object' || Array.isArray(options)) {
	            throw new TypeError('"options" is not an object');
	        }
	        debug('set', options);
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await (0, load_bindings_1.asyncSet)(this.fd, options);
	    }
	    async get() {
	        debug('get');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        return (0, load_bindings_1.asyncGet)(this.fd);
	    }
	    async getBaudRate() {
	        debug('getBaudRate');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        throw new Error('getBaudRate is not implemented on darwin');
	    }
	    async flush() {
	        debug('flush');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await (0, load_bindings_1.asyncFlush)(this.fd);
	    }
	    async drain() {
	        debug('drain');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await this.writeOperation;
	        await (0, load_bindings_1.asyncDrain)(this.fd);
	    }
	}
	darwin.DarwinPortBinding = DarwinPortBinding;
	return darwin;
}

var linux = {};

var linuxList = {};

var hasRequiredLinuxList;

function requireLinuxList () {
	if (hasRequiredLinuxList) return linuxList;
	hasRequiredLinuxList = 1;
	Object.defineProperty(linuxList, "__esModule", { value: true });
	linuxList.linuxList = void 0;
	const child_process_1 = require$$0$4;
	const parser_readline_1 = requireDist$9();
	// get only serial port names
	function checkPathOfDevice(path) {
	    return /(tty(S|WCH|ACM|USB|AMA|MFD|O|XRUSB)|rfcomm)/.test(path) && path;
	}
	function propName(name) {
	    return {
	        DEVNAME: 'path',
	        ID_VENDOR_ENC: 'manufacturer',
	        ID_SERIAL_SHORT: 'serialNumber',
	        ID_VENDOR_ID: 'vendorId',
	        ID_MODEL_ID: 'productId',
	        DEVLINKS: 'pnpId',
	    }[name.toUpperCase()];
	}
	function decodeHexEscape(str) {
	    return str.replace(/\\x([a-fA-F0-9]{2})/g, (a, b) => {
	        return String.fromCharCode(parseInt(b, 16));
	    });
	}
	function propVal(name, val) {
	    if (name === 'pnpId') {
	        const match = val.match(/\/by-id\/([^\s]+)/);
	        return (match === null || match === void 0 ? void 0 : match[1]) || undefined;
	    }
	    if (name === 'manufacturer') {
	        return decodeHexEscape(val);
	    }
	    if (/^0x/.test(val)) {
	        return val.substr(2);
	    }
	    return val;
	}
	function linuxList$1(spawnCmd = child_process_1.spawn) {
	    const ports = [];
	    const udevadm = spawnCmd('udevadm', ['info', '-e']);
	    const lines = udevadm.stdout.pipe(new parser_readline_1.ReadlineParser());
	    let skipPort = false;
	    let port = {
	        path: '',
	        manufacturer: undefined,
	        serialNumber: undefined,
	        pnpId: undefined,
	        locationId: undefined,
	        vendorId: undefined,
	        productId: undefined,
	    };
	    lines.on('data', (line) => {
	        const lineType = line.slice(0, 1);
	        const data = line.slice(3);
	        // new port entry
	        if (lineType === 'P') {
	            port = {
	                path: '',
	                manufacturer: undefined,
	                serialNumber: undefined,
	                pnpId: undefined,
	                locationId: undefined,
	                vendorId: undefined,
	                productId: undefined,
	            };
	            skipPort = false;
	            return;
	        }
	        if (skipPort) {
	            return;
	        }
	        // Check dev name and save port if it matches flag to skip the rest of the data if not
	        if (lineType === 'N') {
	            if (checkPathOfDevice(data)) {
	                ports.push(port);
	            }
	            else {
	                skipPort = true;
	            }
	            return;
	        }
	        // parse data about each port
	        if (lineType === 'E') {
	            const keyValue = data.match(/^(.+)=(.*)/);
	            if (!keyValue) {
	                return;
	            }
	            const key = propName(keyValue[1]);
	            if (!key) {
	                return;
	            }
	            port[key] = propVal(key, keyValue[2]);
	        }
	    });
	    return new Promise((resolve, reject) => {
	        udevadm.on('close', (code) => {
	            if (code) {
	                reject(new Error(`Error listing ports udevadm exited with error code: ${code}`));
	            }
	        });
	        udevadm.on('error', reject);
	        lines.on('error', reject);
	        lines.on('finish', () => resolve(ports));
	    });
	}
	linuxList.linuxList = linuxList$1;
	return linuxList;
}

var hasRequiredLinux;

function requireLinux () {
	if (hasRequiredLinux) return linux;
	hasRequiredLinux = 1;
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(linux, "__esModule", { value: true });
	linux.LinuxPortBinding = linux.LinuxBinding = void 0;
	const debug_1 = __importDefault(requireSrc());
	const linux_list_1 = requireLinuxList();
	const poller_1 = requirePoller();
	const unix_read_1 = requireUnixRead();
	const unix_write_1 = requireUnixWrite();
	const load_bindings_1 = requireLoadBindings();
	const debug = (0, debug_1.default)('serialport/bindings-cpp');
	linux.LinuxBinding = {
	    list() {
	        debug('list');
	        return (0, linux_list_1.linuxList)();
	    },
	    async open(options) {
	        if (!options || typeof options !== 'object' || Array.isArray(options)) {
	            throw new TypeError('"options" is not an object');
	        }
	        if (!options.path) {
	            throw new TypeError('"path" is not a valid port');
	        }
	        if (!options.baudRate) {
	            throw new TypeError('"baudRate" is not a valid baudRate');
	        }
	        debug('open');
	        const openOptions = Object.assign({ vmin: 1, vtime: 0, dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, xon: false, xoff: false, xany: false, hupcl: true }, options);
	        const fd = await (0, load_bindings_1.asyncOpen)(openOptions.path, openOptions);
	        this.fd = fd;
	        return new LinuxPortBinding(fd, openOptions);
	    },
	};
	/**
	 * The linux binding layer
	 */
	class LinuxPortBinding {
	    constructor(fd, openOptions) {
	        this.fd = fd;
	        this.openOptions = openOptions;
	        this.poller = new poller_1.Poller(fd);
	        this.writeOperation = null;
	    }
	    get isOpen() {
	        return this.fd !== null;
	    }
	    async close() {
	        debug('close');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        const fd = this.fd;
	        this.poller.stop();
	        this.poller.destroy();
	        this.fd = null;
	        await (0, load_bindings_1.asyncClose)(fd);
	    }
	    async read(buffer, offset, length) {
	        if (!Buffer.isBuffer(buffer)) {
	            throw new TypeError('"buffer" is not a Buffer');
	        }
	        if (typeof offset !== 'number' || isNaN(offset)) {
	            throw new TypeError(`"offset" is not an integer got "${isNaN(offset) ? 'NaN' : typeof offset}"`);
	        }
	        if (typeof length !== 'number' || isNaN(length)) {
	            throw new TypeError(`"length" is not an integer got "${isNaN(length) ? 'NaN' : typeof length}"`);
	        }
	        debug('read');
	        if (buffer.length < offset + length) {
	            throw new Error('buffer is too small');
	        }
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        return (0, unix_read_1.unixRead)({ binding: this, buffer, offset, length });
	    }
	    async write(buffer) {
	        if (!Buffer.isBuffer(buffer)) {
	            throw new TypeError('"buffer" is not a Buffer');
	        }
	        debug('write', buffer.length, 'bytes');
	        if (!this.isOpen) {
	            debug('write', 'error port is not open');
	            throw new Error('Port is not open');
	        }
	        this.writeOperation = (async () => {
	            if (buffer.length === 0) {
	                return;
	            }
	            await (0, unix_write_1.unixWrite)({ binding: this, buffer });
	            this.writeOperation = null;
	        })();
	        return this.writeOperation;
	    }
	    async update(options) {
	        if (!options || typeof options !== 'object' || Array.isArray(options)) {
	            throw TypeError('"options" is not an object');
	        }
	        if (typeof options.baudRate !== 'number') {
	            throw new TypeError('"options.baudRate" is not a number');
	        }
	        debug('update');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await (0, load_bindings_1.asyncUpdate)(this.fd, options);
	    }
	    async set(options) {
	        if (!options || typeof options !== 'object' || Array.isArray(options)) {
	            throw new TypeError('"options" is not an object');
	        }
	        debug('set');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await (0, load_bindings_1.asyncSet)(this.fd, options);
	    }
	    async get() {
	        debug('get');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        return (0, load_bindings_1.asyncGet)(this.fd);
	    }
	    async getBaudRate() {
	        debug('getBaudRate');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        return (0, load_bindings_1.asyncGetBaudRate)(this.fd);
	    }
	    async flush() {
	        debug('flush');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await (0, load_bindings_1.asyncFlush)(this.fd);
	    }
	    async drain() {
	        debug('drain');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await this.writeOperation;
	        await (0, load_bindings_1.asyncDrain)(this.fd);
	    }
	}
	linux.LinuxPortBinding = LinuxPortBinding;
	return linux;
}

var win32 = {};

var win32SnParser = {};

var hasRequiredWin32SnParser;

function requireWin32SnParser () {
	if (hasRequiredWin32SnParser) return win32SnParser;
	hasRequiredWin32SnParser = 1;
	Object.defineProperty(win32SnParser, "__esModule", { value: true });
	win32SnParser.serialNumParser = void 0;
	const PARSERS = [/USB\\(?:.+)\\(.+)/, /FTDIBUS\\(?:.+)\+(.+?)A?\\.+/];
	const serialNumParser = (pnpId) => {
	    if (!pnpId) {
	        return null;
	    }
	    for (const parser of PARSERS) {
	        const sn = pnpId.match(parser);
	        if (sn) {
	            return sn[1];
	        }
	    }
	    return null;
	};
	win32SnParser.serialNumParser = serialNumParser;
	return win32SnParser;
}

var hasRequiredWin32;

function requireWin32 () {
	if (hasRequiredWin32) return win32;
	hasRequiredWin32 = 1;
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(win32, "__esModule", { value: true });
	win32.WindowsPortBinding = win32.WindowsBinding = void 0;
	const debug_1 = __importDefault(requireSrc());
	const _1 = requireDist$1();
	const load_bindings_1 = requireLoadBindings();
	const win32_sn_parser_1 = requireWin32SnParser();
	const debug = (0, debug_1.default)('serialport/bindings-cpp');
	win32.WindowsBinding = {
	    async list() {
	        const ports = await (0, load_bindings_1.asyncList)();
	        // Grab the serial number from the pnp id
	        return ports.map(port => {
	            if (port.pnpId && !port.serialNumber) {
	                const serialNumber = (0, win32_sn_parser_1.serialNumParser)(port.pnpId);
	                if (serialNumber) {
	                    return Object.assign(Object.assign({}, port), { serialNumber });
	                }
	            }
	            return port;
	        });
	    },
	    async open(options) {
	        if (!options || typeof options !== 'object' || Array.isArray(options)) {
	            throw new TypeError('"options" is not an object');
	        }
	        if (!options.path) {
	            throw new TypeError('"path" is not a valid port');
	        }
	        if (!options.baudRate) {
	            throw new TypeError('"baudRate" is not a valid baudRate');
	        }
	        debug('open');
	        const openOptions = Object.assign({ dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, rtsMode: 'handshake', xon: false, xoff: false, xany: false, hupcl: true }, options);
	        const fd = await (0, load_bindings_1.asyncOpen)(openOptions.path, openOptions);
	        return new WindowsPortBinding(fd, openOptions);
	    },
	};
	/**
	 * The Windows binding layer
	 */
	class WindowsPortBinding {
	    constructor(fd, options) {
	        this.fd = fd;
	        this.openOptions = options;
	        this.writeOperation = null;
	    }
	    get isOpen() {
	        return this.fd !== null;
	    }
	    async close() {
	        debug('close');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        const fd = this.fd;
	        this.fd = null;
	        await (0, load_bindings_1.asyncClose)(fd);
	    }
	    async read(buffer, offset, length) {
	        if (!Buffer.isBuffer(buffer)) {
	            throw new TypeError('"buffer" is not a Buffer');
	        }
	        if (typeof offset !== 'number' || isNaN(offset)) {
	            throw new TypeError(`"offset" is not an integer got "${isNaN(offset) ? 'NaN' : typeof offset}"`);
	        }
	        if (typeof length !== 'number' || isNaN(length)) {
	            throw new TypeError(`"length" is not an integer got "${isNaN(length) ? 'NaN' : typeof length}"`);
	        }
	        debug('read');
	        if (buffer.length < offset + length) {
	            throw new Error('buffer is too small');
	        }
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        try {
	            const bytesRead = await (0, load_bindings_1.asyncRead)(this.fd, buffer, offset, length);
	            return { bytesRead, buffer };
	        }
	        catch (err) {
	            if (!this.isOpen) {
	                throw new _1.BindingsError(err.message, { canceled: true });
	            }
	            throw err;
	        }
	    }
	    async write(buffer) {
	        if (!Buffer.isBuffer(buffer)) {
	            throw new TypeError('"buffer" is not a Buffer');
	        }
	        debug('write', buffer.length, 'bytes');
	        if (!this.isOpen) {
	            debug('write', 'error port is not open');
	            throw new Error('Port is not open');
	        }
	        this.writeOperation = (async () => {
	            if (buffer.length === 0) {
	                return;
	            }
	            await (0, load_bindings_1.asyncWrite)(this.fd, buffer);
	            this.writeOperation = null;
	        })();
	        return this.writeOperation;
	    }
	    async update(options) {
	        if (!options || typeof options !== 'object' || Array.isArray(options)) {
	            throw TypeError('"options" is not an object');
	        }
	        if (typeof options.baudRate !== 'number') {
	            throw new TypeError('"options.baudRate" is not a number');
	        }
	        debug('update');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await (0, load_bindings_1.asyncUpdate)(this.fd, options);
	    }
	    async set(options) {
	        if (!options || typeof options !== 'object' || Array.isArray(options)) {
	            throw new TypeError('"options" is not an object');
	        }
	        debug('set', options);
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await (0, load_bindings_1.asyncSet)(this.fd, options);
	    }
	    async get() {
	        debug('get');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        return (0, load_bindings_1.asyncGet)(this.fd);
	    }
	    async getBaudRate() {
	        debug('getBaudRate');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        return (0, load_bindings_1.asyncGetBaudRate)(this.fd);
	    }
	    async flush() {
	        debug('flush');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await (0, load_bindings_1.asyncFlush)(this.fd);
	    }
	    async drain() {
	        debug('drain');
	        if (!this.isOpen) {
	            throw new Error('Port is not open');
	        }
	        await this.writeOperation;
	        await (0, load_bindings_1.asyncDrain)(this.fd);
	    }
	}
	win32.WindowsPortBinding = WindowsPortBinding;
	return win32;
}

var dist = {};

var hasRequiredDist$2;

function requireDist$2 () {
	if (hasRequiredDist$2) return dist;
	hasRequiredDist$2 = 1;
	return dist;
}

var hasRequiredDist$1;

function requireDist$1 () {
	if (hasRequiredDist$1) return dist$1;
	hasRequiredDist$1 = 1;
	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
		    return (mod && mod.__esModule) ? mod : { "default": mod };
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.autoDetect = void 0;
		/* eslint-disable @typescript-eslint/no-var-requires */
		const debug_1 = __importDefault(requireSrc());
		const darwin_1 = requireDarwin();
		const linux_1 = requireLinux();
		const win32_1 = requireWin32();
		const debug = (0, debug_1.default)('serialport/bindings-cpp');
		__exportStar(requireDist$2(), exports);
		__exportStar(requireDarwin(), exports);
		__exportStar(requireLinux(), exports);
		__exportStar(requireWin32(), exports);
		__exportStar(requireErrors(), exports);
		/**
		 * This is an auto detected binding for your current platform
		 */
		function autoDetect() {
		    switch (process.platform) {
		        case 'win32':
		            debug('loading WindowsBinding');
		            return win32_1.WindowsBinding;
		        case 'darwin':
		            debug('loading DarwinBinding');
		            return darwin_1.DarwinBinding;
		        default:
		            debug('loading LinuxBinding');
		            return linux_1.LinuxBinding;
		    }
		}
		exports.autoDetect = autoDetect; 
	} (dist$1));
	return dist$1;
}

var hasRequiredSerialport;

function requireSerialport () {
	if (hasRequiredSerialport) return serialport$1;
	hasRequiredSerialport = 1;
	Object.defineProperty(serialport$1, "__esModule", { value: true });
	serialport$1.SerialPort = void 0;
	const stream_1 = requireDist$4();
	const bindings_cpp_1 = requireDist$1();
	const DetectedBinding = (0, bindings_cpp_1.autoDetect)();
	class SerialPort extends stream_1.SerialPortStream {
	    constructor(options, openCallback) {
	        const opts = {
	            binding: DetectedBinding,
	            ...options,
	        };
	        super(opts, openCallback);
	    }
	}
	serialport$1.SerialPort = SerialPort;
	SerialPort.list = DetectedBinding.list;
	SerialPort.binding = DetectedBinding;
	return serialport$1;
}

var hasRequiredDist;

function requireDist () {
	if (hasRequiredDist) return dist$e;
	hasRequiredDist = 1;
	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireDist$e(), exports);
		__exportStar(requireDist$d(), exports);
		__exportStar(requireDist$c(), exports);
		__exportStar(requireDist$b(), exports);
		__exportStar(requireDist$a(), exports);
		__exportStar(requireDist$9(), exports);
		__exportStar(requireDist$8(), exports);
		__exportStar(requireDist$7(), exports);
		__exportStar(requireDist$6(), exports);
		__exportStar(requireDist$5(), exports);
		__exportStar(requireSerialportMock(), exports);
		__exportStar(requireSerialport(), exports); 
	} (dist$e));
	return dist$e;
}

var encoder7bit;
var hasRequiredEncoder7bit;

function requireEncoder7bit () {
	if (hasRequiredEncoder7bit) return encoder7bit;
	hasRequiredEncoder7bit = 1;
	/**
	 * "Inspired" by Encoder7Bit.h/Encoder7Bit.cpp in the
	 * Firmata source code.
	 */
	encoder7bit = {
	  to7BitArray(data) {
	    let shift = 0;
	    let previous = 0;
	    const output = [];

	    for (let byte of data) {
	      if (shift === 0) {
	        output.push(byte & 0x7f);
	        shift++;
	        previous = byte >> 7;
	      } else {
	        output.push(((byte << shift) & 0x7f) | previous);
	        if (shift === 6) {
	          output.push(byte >> 1);
	          shift = 0;
	        } else {
	          shift++;
	          previous = byte >> (8 - shift);
	        }
	      }
	    }

	    /* istanbul ignore else */
	    if (shift > 0) {
	      output.push(previous);
	    }

	    return output;
	  },
	  from7BitArray(encoded) {
	    const expectedBytes = encoded.length * 7 >> 3;
	    const decoded = [];

	    for (let i = 0; i < expectedBytes; i++) {
	      const j = i << 3;
	      const pos = (j / 7) >>> 0;
	      const shift = j % 7;
	      decoded[i] = (encoded[pos] >> shift) | ((encoded[pos + 1] << (7 - shift)) & 0xFF);
	    }

	    return decoded;
	  }
	};
	return encoder7bit;
}

var onewireutils;
var hasRequiredOnewireutils;

function requireOnewireutils () {
	if (hasRequiredOnewireutils) return onewireutils;
	hasRequiredOnewireutils = 1;
	const Encoder7Bit = requireEncoder7bit();
	const OneWireUtils = {
	  crc8(data) {
	    let crc = 0;

	    for (let inbyte of data) {
	      for (let n = 8; n; n--) {
	        const mix = (crc ^ inbyte) & 0x01;
	        crc >>= 1;

	        if (mix) {
	          crc ^= 0x8C;
	        }

	        inbyte >>= 1;
	      }
	    }

	    return crc;
	  },

	  readDevices(data) {
	    const deviceBytes = Encoder7Bit.from7BitArray(data);
	    const devices = [];

	    for (let i = 0; i < deviceBytes.length; i += 8) {
	      const device = deviceBytes.slice(i, i + 8);

	      if (device.length !== 8) {
	        continue;
	      }

	      const check = OneWireUtils.crc8(device.slice(0, 7));

	      if (check !== device[7]) {
	        console.error("ROM invalid!");
	      }

	      devices.push(device);
	    }

	    return devices;
	  }
	};

	onewireutils = OneWireUtils;
	return onewireutils;
}

var firmataIo;
var hasRequiredFirmataIo;

function requireFirmataIo () {
	if (hasRequiredFirmataIo) return firmataIo;
	hasRequiredFirmataIo = 1;

	// Built-in Dependencies
	const Emitter = EventEmitter$2;

	// Internal Dependencies
	const Encoder7Bit = requireEncoder7bit();
	const OneWire = requireOnewireutils();

	// Program specifics
	const i2cActive = new Map();

	/**
	 * constants
	 */

	const ANALOG_MAPPING_QUERY = 0x69;
	const ANALOG_MAPPING_RESPONSE = 0x6a;
	const ANALOG_MESSAGE = 0xe0;
	const CAPABILITY_QUERY = 0x6b;
	const CAPABILITY_RESPONSE = 0x6c;
	const DIGITAL_MESSAGE = 0x90;
	const END_SYSEX = 0xf7;
	const EXTENDED_ANALOG = 0x6f;
	const I2C_CONFIG = 0x78;
	const I2C_REPLY = 0x77;
	const I2C_REQUEST = 0x76;
	const I2C_READ_MASK = 0x18; // 0b00011000
	// const I2C_END_TX_MASK = 0x40; // 0b01000000
	const ONEWIRE_CONFIG_REQUEST = 0x41;
	const ONEWIRE_DATA = 0x73;
	const ONEWIRE_DELAY_REQUEST_BIT = 0x10;
	const ONEWIRE_READ_REPLY = 0x43;
	const ONEWIRE_READ_REQUEST_BIT = 0x08;
	const ONEWIRE_RESET_REQUEST_BIT = 0x01;
	const ONEWIRE_SEARCH_ALARMS_REPLY = 0x45;
	const ONEWIRE_SEARCH_ALARMS_REQUEST = 0x44;
	const ONEWIRE_SEARCH_REPLY = 0x42;
	const ONEWIRE_SEARCH_REQUEST = 0x40;
	const ONEWIRE_WITHDATA_REQUEST_BITS = 0x3c;
	const ONEWIRE_WRITE_REQUEST_BIT = 0x20;
	const PIN_MODE = 0xf4;
	const PIN_STATE_QUERY = 0x6d;
	const PIN_STATE_RESPONSE = 0x6e;
	const PING_READ = 0x75;
	// const PULSE_IN = 0x74;
	// const PULSE_OUT = 0x73;
	const QUERY_FIRMWARE = 0x79;
	const REPORT_ANALOG = 0xc0;
	const REPORT_DIGITAL = 0xd0;
	const REPORT_VERSION = 0xf9;
	const SAMPLING_INTERVAL = 0x7a;
	const SERVO_CONFIG = 0x70;
	const SERIAL_MESSAGE = 0x60;
	const SERIAL_CONFIG = 0x10;
	const SERIAL_WRITE = 0x20;
	const SERIAL_READ = 0x30;
	const SERIAL_REPLY = 0x40;
	const SERIAL_CLOSE = 0x50;
	const SERIAL_FLUSH = 0x60;
	const SERIAL_LISTEN = 0x70;
	const START_SYSEX = 0xf0;
	const STEPPER = 0x72;
	const ACCELSTEPPER = 0x62;
	const STRING_DATA = 0x71;
	const SYSTEM_RESET = 0xff;

	const MAX_PIN_COUNT = 128;

	const SYM_sendOneWireSearch = Symbol("sendOneWireSearch");
	const SYM_sendOneWireRequest = Symbol("sendOneWireRequest");

	/**
	 * MIDI_RESPONSE contains functions to be called when we receive a MIDI message from the arduino.
	 * used as a switch object as seen here http://james.padolsey.com/javascript/how-to-avoid-switch-case-syndrome/
	 * @private
	 */

	const MIDI_RESPONSE = {
	  /**
	   * Handles a REPORT_VERSION response and emits the reportversion event.
	   * @private
	   * @param {Board} board the current arduino board we are working with.
	   */

	  [REPORT_VERSION](board) {
	    board.version.major = board.buffer[1];
	    board.version.minor = board.buffer[2];
	    board.emit("reportversion");
	  },

	  /**
	   * Handles a ANALOG_MESSAGE response and emits "analog-read" and "analog-read-"+n events where n is the pin number.
	   * @private
	   * @param {Board} board the current arduino board we are working with.
	   */

	  [ANALOG_MESSAGE](board) {
	    const pin = board.buffer[0] & 0x0f;
	    const value = board.buffer[1] | (board.buffer[2] << 7);

	    /* istanbul ignore else */
	    if (board.pins[board.analogPins[pin]]) {
	      board.pins[board.analogPins[pin]].value = value;
	    }

	    board.emit(`analog-read-${pin}`, value);
	    board.emit("analog-read", {
	      pin,
	      value,
	    });
	  },

	  /**
	   * Handles a DIGITAL_MESSAGE response and emits:
	   * "digital-read"
	   * "digital-read-"+n
	   *
	   * Where n is the pin number.
	   *
	   * @private
	   * @param {Board} board the current arduino board we are working with.
	   */

	  [DIGITAL_MESSAGE](board) {
	    const port = board.buffer[0] & 0x0f;
	    const portValue = board.buffer[1] | (board.buffer[2] << 7);

	    for (let i = 0; i < 8; i++) {
	      const pin = 8 * port + i;
	      const pinRec = board.pins[pin];
	      const bit = 1 << i;

	      if (
	        pinRec &&
	        (pinRec.mode === board.MODES.INPUT ||
	          pinRec.mode === board.MODES.PULLUP)
	      ) {
	        pinRec.value = (portValue >> (i & 0x07)) & 0x01;

	        if (pinRec.value) {
	          board.ports[port] |= bit;
	        } else {
	          board.ports[port] &= ~bit;
	        }

	        let { value } = pinRec;

	        board.emit(`digital-read-${pin}`, value);
	        board.emit("digital-read", {
	          pin,
	          value,
	        });
	      }
	    }
	  },
	};

	/**
	 * SYSEX_RESPONSE contains functions to be called when we receive a SYSEX message from the arduino.
	 * used as a switch object as seen here http://james.padolsey.com/javascript/how-to-avoid-switch-case-syndrome/
	 * @private
	 */

	const SYSEX_RESPONSE = {
	  /**
	   * Handles a QUERY_FIRMWARE response and emits the "queryfirmware" event
	   * @private
	   * @param {Board} board the current arduino board we are working with.
	   */

	  [QUERY_FIRMWARE](board) {
	    const length = board.buffer.length - 2;
	    const buffer = Buffer.alloc(Math.round((length - 4) / 2));
	    let byte = 0;
	    let offset = 0;

	    for (let i = 4; i < length; i += 2) {
	      byte =
	        ((board.buffer[i] & 0x7f) | ((board.buffer[i + 1] & 0x7f) << 7)) & 0xff;
	      buffer.writeUInt8(byte, offset++);
	    }

	    (board.firmware = {
	      name: buffer.toString(),
	      version: {
	        major: board.buffer[2],
	        minor: board.buffer[3],
	      },
	    }),
	      board.emit("queryfirmware");
	  },

	  /**
	   * Handles a CAPABILITY_RESPONSE response and emits the "capability-query" event
	   * @private
	   * @param {Board} board the current arduino board we are working with.
	   */

	  [CAPABILITY_RESPONSE](board) {
	    const modes = Object.keys(board.MODES).map((key) => board.MODES[key]);
	    let mode, resolution;
	    let capability = 0;

	    function supportedModes(capability) {
	      return modes.reduce((accum, mode) => {
	        if (capability & (1 << mode)) {
	          accum.push(mode);
	        }
	        return accum;
	      }, []);
	    }

	    // Only create pins if none have been previously created on the instance.
	    if (!board.pins.length) {
	      for (let i = 2, n = 0; i < board.buffer.length - 1; i++) {
	        if (board.buffer[i] === 0x7f) {
	          board.pins.push({
	            supportedModes: supportedModes(capability),
	            mode: undefined,
	            value: 0,
	            report: 1,
	          });
	          capability = 0;
	          n = 0;
	          continue;
	        }
	        if (n === 0) {
	          mode = board.buffer[i];
	          resolution = (1 << board.buffer[i + 1]) - 1;
	          capability |= 1 << mode;

	          // ADC Resolution of Analog Inputs
	          if (mode === board.MODES.ANALOG && board.RESOLUTION.ADC === null) {
	            board.RESOLUTION.ADC = resolution;
	          }

	          // PWM Resolution of PWM Outputs
	          if (mode === board.MODES.PWM && board.RESOLUTION.PWM === null) {
	            board.RESOLUTION.PWM = resolution;
	          }

	          // DAC Resolution of DAC Outputs
	          // if (mode === board.MODES.DAC && board.RESOLUTION.DAC === null) {
	          //   board.RESOLUTION.DAC = resolution;
	          // }
	        }
	        n ^= 1;
	      }
	    }

	    board.emit("capability-query");
	  },

	  /**
	   * Handles a PIN_STATE response and emits the 'pin-state-'+n event where n is the pin number.
	   *
	   * Note about pin state: For output modes, the state is any value that has been
	   * previously written to the pin. For input modes, the state is the status of
	   * the pullup resistor.
	   * @private
	   * @param {Board} board the current arduino board we are working with.
	   */

	  [PIN_STATE_RESPONSE](board) {
	    let pin = board.buffer[2];
	    board.pins[pin].mode = board.buffer[3];
	    board.pins[pin].state = board.buffer[4];
	    if (board.buffer.length > 6) {
	      board.pins[pin].state |= board.buffer[5] << 7;
	    }
	    if (board.buffer.length > 7) {
	      board.pins[pin].state |= board.buffer[6] << 14;
	    }
	    board.emit(`pin-state-${pin}`);
	  },

	  /**
	   * Handles a ANALOG_MAPPING_RESPONSE response and emits the "analog-mapping-query" event.
	   * @private
	   * @param {Board} board the current arduino board we are working with.
	   */

	  [ANALOG_MAPPING_RESPONSE](board) {
	    let pin = 0;
	    let currentValue;
	    for (let i = 2; i < board.buffer.length - 1; i++) {
	      currentValue = board.buffer[i];
	      board.pins[pin].analogChannel = currentValue;
	      if (currentValue !== 127) {
	        board.analogPins.push(pin);
	      }
	      pin++;
	    }
	    board.emit("analog-mapping-query");
	  },

	  /**
	   * Handles a I2C_REPLY response and emits the "I2C-reply-"+n event where n is the slave address of the I2C device.
	   * The event is passed the buffer of data sent from the I2C Device
	   * @private
	   * @param {Board} board the current arduino board we are working with.
	   */

	  [I2C_REPLY](board) {
	    const reply = [];
	    const address = (board.buffer[2] & 0x7f) | ((board.buffer[3] & 0x7f) << 7);
	    const register = (board.buffer[4] & 0x7f) | ((board.buffer[5] & 0x7f) << 7);

	    for (let i = 6, length = board.buffer.length - 1; i < length; i += 2) {
	      reply.push(board.buffer[i] | (board.buffer[i + 1] << 7));
	    }

	    board.emit(`I2C-reply-${address}-${register}`, reply);
	  },

	  [ONEWIRE_DATA](board) {
	    const subCommand = board.buffer[2];

	    if (!SYSEX_RESPONSE[subCommand]) {
	      return;
	    }

	    SYSEX_RESPONSE[subCommand](board);
	  },

	  [ONEWIRE_SEARCH_REPLY](board) {
	    const pin = board.buffer[3];
	    const buffer = board.buffer.slice(4, board.buffer.length - 1);

	    board.emit(`1-wire-search-reply-${pin}`, OneWire.readDevices(buffer));
	  },

	  [ONEWIRE_SEARCH_ALARMS_REPLY](board) {
	    const pin = board.buffer[3];
	    const buffer = board.buffer.slice(4, board.buffer.length - 1);

	    board.emit(
	      `1-wire-search-alarms-reply-${pin}`,
	      OneWire.readDevices(buffer)
	    );
	  },

	  [ONEWIRE_READ_REPLY](board) {
	    const encoded = board.buffer.slice(4, board.buffer.length - 1);
	    const decoded = Encoder7Bit.from7BitArray(encoded);
	    const correlationId = (decoded[1] << 8) | decoded[0];

	    board.emit(`1-wire-read-reply-${correlationId}`, decoded.slice(2));
	  },

	  /**
	   * Handles a STRING_DATA response and logs the string to the console.
	   * @private
	   * @param {Board} board the current arduino board we are working with.
	   */

	  [STRING_DATA](board) {
	    board.emit(
	      "string",
	      Buffer.from(board.buffer.slice(2, -1)).toString().replace(/\0/g, "")
	    );
	  },

	  /**
	   * Response from pingRead
	   */

	  [PING_READ](board) {
	    const pin = (board.buffer[2] & 0x7f) | ((board.buffer[3] & 0x7f) << 7);
	    const durationBuffer = [
	      (board.buffer[4] & 0x7f) | ((board.buffer[5] & 0x7f) << 7),
	      (board.buffer[6] & 0x7f) | ((board.buffer[7] & 0x7f) << 7),
	      (board.buffer[8] & 0x7f) | ((board.buffer[9] & 0x7f) << 7),
	      (board.buffer[10] & 0x7f) | ((board.buffer[11] & 0x7f) << 7),
	    ];
	    const duration =
	      (durationBuffer[0] << 24) +
	      (durationBuffer[1] << 16) +
	      (durationBuffer[2] << 8) +
	      durationBuffer[3];
	    board.emit(`ping-read-${pin}`, duration);
	  },

	  /**
	   * Handles the message from a stepper completing move
	   * @param {Board} board
	   */

	  [STEPPER](board) {
	    const deviceNum = board.buffer[2];
	    board.emit(`stepper-done-${deviceNum}`, true);
	  },

	  /**
	   * Handles the message from a stepper or group of steppers completing move
	   * @param {Board} board
	   */

	  [ACCELSTEPPER](board) {
	    const command = board.buffer[2];
	    const deviceNum = board.buffer[3];
	    const value =
	      command === 0x06 || command === 0x0a
	        ? decode32BitSignedInteger(board.buffer.slice(4, 9))
	        : null;

	    if (command === 0x06) {
	      board.emit(`stepper-position-${deviceNum}`, value);
	    }
	    if (command === 0x0a) {
	      board.emit(`stepper-done-${deviceNum}`, value);
	    }
	    if (command === 0x24) {
	      board.emit(`multi-stepper-done-${deviceNum}`);
	    }
	  },

	  /**
	   * Handles a SERIAL_REPLY response and emits the "serial-data-"+n event where n is the id of the
	   * serial port.
	   * The event is passed the buffer of data sent from the serial device
	   * @private
	   * @param {Board} board the current arduino board we are working with.
	   */

	  [SERIAL_MESSAGE](board) {
	    const command = board.buffer[2] & START_SYSEX;
	    const portId = board.buffer[2] & 0x0f;
	    const reply = [];

	    /* istanbul ignore else */
	    if (command === SERIAL_REPLY) {
	      for (let i = 3, len = board.buffer.length; i < len - 1; i += 2) {
	        reply.push((board.buffer[i + 1] << 7) | board.buffer[i]);
	      }
	      board.emit(`serial-data-${portId}`, reply);
	    }
	  },
	};

	/**
	 * The default transport class
	 */

	let Transport = null;

	/**
	 * @class The Board object represents an arduino board.
	 * @augments EventEmitter
	 * @param {String} port This is the serial port the arduino is connected to.
	 * @param {function} function A function to be called when the arduino is ready to communicate.
	 * @property MODES All the modes available for pins on this arduino board.
	 * @property I2C_MODES All the I2C modes available.
	 * @property SERIAL_MODES All the Serial modes available.
	 * @property SERIAL_PORT_ID ID values to pass as the portId parameter when calling serialConfig.
	 * @property HIGH A constant to set a pins value to HIGH when the pin is set to an output.
	 * @property LOW A constant to set a pins value to LOW when the pin is set to an output.
	 * @property pins An array of pin object literals.
	 * @property analogPins An array of analog pins and their corresponding indexes in the pins array.
	 * @property version An object indicating the major and minor version of the firmware currently running.
	 * @property firmware An object indicating the name, major and minor version of the firmware currently running.
	 * @property buffer An array holding the current bytes received from the arduino.
	 * @property {SerialPort} sp The serial port object used to communicate with the arduino.
	 */

	class Firmata extends Emitter {
	  constructor(port, options, callback) {
	    super();

	    if (typeof options === "function" || typeof options === "undefined") {
	      callback = options;
	      options = {};
	    }

	    const board = this;
	    const defaults = {
	      reportVersionTimeout: 5000,
	      samplingInterval: 19,
	      serialport: {
	        baudRate: 57600,
	        // https://github.com/node-serialport/node-serialport/blob/5.0.0/UPGRADE_GUIDE.md#open-options
	        highWaterMark: 256,
	        path: port,
	      },
	    };

	    const settings = Object.assign({}, defaults, options);

	    this.isReady = false;

	    this.MODES = {
	      INPUT: 0x00,
	      OUTPUT: 0x01,
	      ANALOG: 0x02,
	      PWM: 0x03,
	      SERVO: 0x04,
	      SHIFT: 0x05,
	      I2C: 0x06,
	      ONEWIRE: 0x07,
	      STEPPER: 0x08,
	      SERIAL: 0x0a,
	      PULLUP: 0x0b,
	      IGNORE: 0x7f,
	      PING_READ: 0x75,
	      UNKOWN: 0x10,
	    };

	    this.I2C_MODES = {
	      WRITE: 0,
	      READ: 1,
	      CONTINUOUS_READ: 2,
	      STOP_READING: 3,
	    };

	    this.STEPPER = {
	      TYPE: {
	        DRIVER: 1,
	        TWO_WIRE: 2,
	        THREE_WIRE: 3,
	        FOUR_WIRE: 4,
	      },
	      STEP_SIZE: {
	        WHOLE: 0,
	        HALF: 1,
	      },
	      RUN_STATE: {
	        STOP: 0,
	        ACCEL: 1,
	        DECEL: 2,
	        RUN: 3,
	      },
	      DIRECTION: {
	        CCW: 0,
	        CW: 1,
	      },
	    };

	    this.SERIAL_MODES = {
	      CONTINUOUS_READ: 0x00,
	      STOP_READING: 0x01,
	    };

	    // ids for hardware and software serial ports on the board
	    this.SERIAL_PORT_IDs = {
	      HW_SERIAL0: 0x00,
	      HW_SERIAL1: 0x01,
	      HW_SERIAL2: 0x02,
	      HW_SERIAL3: 0x03,
	      SW_SERIAL0: 0x08,
	      SW_SERIAL1: 0x09,
	      SW_SERIAL2: 0x10,
	      SW_SERIAL3: 0x11,

	      // Default can be used by dependant libraries to key on a
	      // single property name when negotiating ports.
	      //
	      // Firmata elects SW_SERIAL0: 0x08 as its DEFAULT
	      DEFAULT: 0x08,
	    };

	    // map to the pin resolution value in the capability query response
	    this.SERIAL_PIN_TYPES = {
	      RES_RX0: 0x00,
	      RES_TX0: 0x01,
	      RES_RX1: 0x02,
	      RES_TX1: 0x03,
	      RES_RX2: 0x04,
	      RES_TX2: 0x05,
	      RES_RX3: 0x06,
	      RES_TX3: 0x07,
	    };

	    this.RESOLUTION = {
	      ADC: null,
	      DAC: null,
	      PWM: null,
	    };

	    this.HIGH = 1;
	    this.LOW = 0;
	    this.pins = [];
	    this.ports = Array(16).fill(0);
	    this.analogPins = [];
	    this.version = {};
	    this.firmware = {};
	    this.buffer = [];
	    this.versionReceived = false;
	    this.name = "Firmata";
	    this.settings = settings;
	    this.pending = 0;
	    this.digitalPortQueue = 0x0000;

	    if (typeof port === "object") {
	      this.transport = port;
	    } else {
	      if (!Transport) {
	        throw new Error("Missing Default Transport");
	      }

	      this.transport = new Transport(settings.serialport);
	    }

	    this.transport.on("close", (event) => {
	      // https://github.com/node-serialport/node-serialport/blob/5.0.0/UPGRADE_GUIDE.md#opening-and-closing
	      if (event && event.disconnected) {
	        this.emit("disconnect");
	        return;
	      }

	      this.emit("close");
	    });

	    this.transport.on("open", (event) => {
	      this.emit("open", event);
	      // Legacy
	      this.emit("connect", event);
	    });

	    this.transport.on("error", (error) => {
	      if (!this.isReady && typeof callback === "function") {
	        callback(error);
	      } else {
	        this.emit("error", error);
	      }
	    });

	    this.transport.on("data", (data) => {
	      for (let i = 0; i < data.length; i++) {
	        let byte = data[i];
	        // we dont want to push 0 as the first byte on our buffer
	        if (this.buffer.length === 0 && byte === 0) {
	          continue;
	        } else {
	          this.buffer.push(byte);

	          let first = this.buffer[0];
	          let last = this.buffer[this.buffer.length - 1];

	          // [START_SYSEX, ... END_SYSEX]
	          if (first === START_SYSEX && last === END_SYSEX) {
	            let handler = SYSEX_RESPONSE[this.buffer[1]];

	            // Ensure a valid SYSEX_RESPONSE handler exists
	            // Only process these AFTER the REPORT_VERSION
	            // message has been received and processed.
	            if (handler && this.versionReceived) {
	              handler(this);
	            }

	            // It is possible for the board to have
	            // existing activity from a previous run
	            // that will leave any of the following
	            // active:
	            //
	            //    - ANALOG_MESSAGE
	            //    - SERIAL_READ
	            //    - I2C_REQUEST, CONTINUOUS_READ
	            //
	            // This means that we will receive these
	            // messages on transport "open", before any
	            // handshake can occur. We MUST assert
	            // that we will only process this buffer
	            // AFTER the REPORT_VERSION message has
	            // been received. Not doing so will result
	            // in the appearance of the program "hanging".
	            //
	            // Since we cannot do anything with this data
	            // until _after_ REPORT_VERSION, discard it.
	            //
	            this.buffer.length = 0;
	          } else if (first === START_SYSEX && this.buffer.length > 0) {
	            // we have a new command after an incomplete sysex command
	            let currByte = data[i];
	            if (currByte > 0x7f) {
	              this.buffer.length = 0;
	              this.buffer.push(currByte);
	            }
	          } else {
	            /* istanbul ignore else */
	            if (first !== START_SYSEX) {
	              // Check if data gets out of sync: first byte in buffer
	              // must be a valid response if not START_SYSEX
	              // Identify response on first byte
	              let response = first < START_SYSEX ? first & START_SYSEX : first;

	              // Check if the first byte is possibly
	              // a valid MIDI_RESPONSE (handler)
	              /* istanbul ignore else */
	              if (
	                response !== REPORT_VERSION &&
	                response !== ANALOG_MESSAGE &&
	                response !== DIGITAL_MESSAGE
	              ) {
	                // If not valid, then we received garbage and can discard
	                // whatever bytes have been been queued.
	                this.buffer.length = 0;
	              }
	            }
	          }

	          // There are 3 bytes in the buffer and the first is not START_SYSEX:
	          // Might have a MIDI Command
	          if (this.buffer.length === 3 && first !== START_SYSEX) {
	            // response bytes under 0xF0 we have a multi byte operation
	            let response = first < START_SYSEX ? first & START_SYSEX : first;

	            /* istanbul ignore else */
	            if (MIDI_RESPONSE[response]) {
	              // It's ok that this.versionReceived will be set to
	              // true every time a valid MIDI_RESPONSE is received.
	              // This condition is necessary to ensure that REPORT_VERSION
	              // is called first.
	              if (this.versionReceived || first === REPORT_VERSION) {
	                this.versionReceived = true;
	                MIDI_RESPONSE[response](this);
	              }
	              this.buffer.length = 0;
	            } else {
	              // A bad serial read must have happened.
	              // Reseting the buffer will allow recovery.
	              this.buffer.length = 0;
	            }
	          }
	        }
	      }
	    });

	    // if we have not received the version within the allotted
	    // time specified by the reportVersionTimeout (user or default),
	    // then send an explicit request for it.
	    this.reportVersionTimeoutId = setTimeout(() => {
	      /* istanbul ignore else */
	      if (this.versionReceived === false) {
	        this.reportVersion(function () {});
	        this.queryFirmware(function () {});
	      }
	    }, settings.reportVersionTimeout);

	    function ready() {
	      board.isReady = true;
	      board.emit("ready");
	      /* istanbul ignore else */
	      if (typeof callback === "function") {
	        callback();
	      }
	    }

	    // Await the reported version.
	    this.once("reportversion", () => {
	      clearTimeout(this.reportVersionTimeoutId);
	      this.versionReceived = true;
	      this.once("queryfirmware", () => {
	        // Only preemptively set the sampling interval if `samplingInterval`
	        // property was _explicitly_ set as a constructor option.
	        if (options.samplingInterval !== undefined) {
	          this.setSamplingInterval(options.samplingInterval);
	        }
	        if (settings.skipCapabilities) {
	          this.analogPins = settings.analogPins || this.analogPins;
	          this.pins = settings.pins || this.pins;
	          /* istanbul ignore else */
	          if (!this.pins.length) {
	            for (var i = 0; i < (settings.pinCount || MAX_PIN_COUNT); i++) {
	              var supportedModes = [];
	              var analogChannel = this.analogPins.indexOf(i);

	              if (analogChannel < 0) {
	                analogChannel = 127;
	              }
	              this.pins.push({ supportedModes, analogChannel });
	            }
	          }

	          // If the capabilities query is skipped,
	          // default resolution values will be used.
	          //
	          // Based on ATmega328/P
	          //
	          this.RESOLUTION.ADC = 0x3ff;
	          this.RESOLUTION.PWM = 0x0ff;

	          ready();
	        } else {
	          this.queryCapabilities(() => {
	            this.queryAnalogMapping(ready);
	          });
	        }
	      });
	    });
	  }

	  /**
	   * Asks the arduino to tell us its version.
	   * @param {function} callback A function to be called when the arduino has reported its version.
	   */

	  reportVersion(callback) {
	    this.once("reportversion", callback);
	    writeToTransport(this, [REPORT_VERSION]);
	  }

	  /**
	   * Asks the arduino to tell us its firmware version.
	   * @param {function} callback A function to be called when the arduino has reported its firmware version.
	   */

	  queryFirmware(callback) {
	    this.once("queryfirmware", callback);
	    writeToTransport(this, [START_SYSEX, QUERY_FIRMWARE, END_SYSEX]);
	  }

	  /**
	   * Asks the arduino to read analog data. Turn on reporting for this pin.
	   * @param {number} pin The pin to read analog data
	   * @param {function} callback A function to call when we have the analag data.
	   */

	  analogRead(pin, callback) {
	    this.reportAnalogPin(pin, 1);
	    this.addListener(`analog-read-${pin}`, callback);
	  }

	  /**
	   * Write a PWM value Asks the arduino to write an analog message.
	   * @param {number} pin The pin to write analog data to.
	   * @param {number} value The data to write to the pin between 0 and this.RESOLUTION.PWM.
	   */

	  pwmWrite(pin, value) {
	    let data;

	    this.pins[pin].value = value;

	    if (pin > 15) {
	      data = [
	        START_SYSEX,
	        EXTENDED_ANALOG,
	        pin,
	        value & 0x7f,
	        (value >> 7) & 0x7f,
	      ];

	      if (value > 0x00004000) {
	        data[data.length] = (value >> 14) & 0x7f;
	      }

	      if (value > 0x00200000) {
	        data[data.length] = (value >> 21) & 0x7f;
	      }

	      if (value > 0x10000000) {
	        data[data.length] = (value >> 28) & 0x7f;
	      }

	      data[data.length] = END_SYSEX;
	    } else {
	      data = [ANALOG_MESSAGE | pin, value & 0x7f, (value >> 7) & 0x7f];
	    }

	    writeToTransport(this, data);
	  }

	  /**
	   * Set a pin to SERVO mode with an explicit PWM range.
	   *
	   * @param {number} pin The pin the servo is connected to
	   * @param {number} min A 14-bit signed int.
	   * @param {number} max A 14-bit signed int.
	   */

	  servoConfig(pin, min, max) {
	    if (typeof pin === "object" && pin !== null) {
	      let temp = pin;
	      pin = temp.pin;
	      min = temp.min;
	      max = temp.max;
	    }

	    if (typeof pin === "undefined") {
	      throw new Error("servoConfig: pin must be specified");
	    }

	    if (typeof min === "undefined") {
	      throw new Error("servoConfig: min must be specified");
	    }

	    if (typeof max === "undefined") {
	      throw new Error("servoConfig: max must be specified");
	    }

	    // [0]  START_SYSEX  (0xF0)
	    // [1]  SERVO_CONFIG (0x70)
	    // [2]  pin number   (0-127)
	    // [3]  minPulse LSB (0-6)
	    // [4]  minPulse MSB (7-13)
	    // [5]  maxPulse LSB (0-6)
	    // [6]  maxPulse MSB (7-13)
	    // [7]  END_SYSEX    (0xF7)

	    this.pins[pin].mode = this.MODES.SERVO;

	    writeToTransport(this, [
	      START_SYSEX,
	      SERVO_CONFIG,
	      pin,
	      min & 0x7f,
	      (min >> 7) & 0x7f,
	      max & 0x7f,
	      (max >> 7) & 0x7f,
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * Asks the arduino to move a servo
	   * @param {number} pin The pin the servo is connected to
	   * @param {number} value The degrees to move the servo to.
	   */

	  servoWrite(...args) {
	    // Values less than 544 will be treated as angles in degrees
	    // (valid values in microseconds are handled as microseconds)
	    this.analogWrite(...args);
	  }

	  /**
	   * Asks the arduino to set the pin to a certain mode.
	   * @param {number} pin The pin you want to change the mode of.
	   * @param {number} mode The mode you want to set. Must be one of board.MODES
	   */

	  pinMode(pin, mode) {
	    if (mode === this.MODES.ANALOG) {
	      // Because pinMode may be called before analogRead(pin, () => {}), but isn't
	      // necessary to initiate an analog read on an analog pin, we'll assign the
	      // mode here, but do nothing further. In analogRead(), the call to
	      // reportAnalogPin(pin, 1) is all that's needed to turn on analog input
	      // reading.
	      //
	      // reportAnalogPin(...) will reconcile the pin number as well, the
	      // same operation we use here to assign a "mode":
	      this.pins[this.analogPins[pin]].mode = mode;
	    } else {
	      this.pins[pin].mode = mode;
	      writeToTransport(this, [PIN_MODE, pin, mode]);
	    }
	  }

	  /**
	   * Asks the arduino to write a value to a digital pin
	   * @param {number} pin The pin you want to write a value to.
	   * @param {number} value The value you want to write. Must be board.HIGH or board.LOW
	   * @param {boolean} enqueue When true, the local state is updated but the command is not sent to the Arduino
	   */

	  digitalWrite(pin, value, enqueue) {
	    let port = this.updateDigitalPort(pin, value);

	    if (enqueue) {
	      this.digitalPortQueue |= 1 << port;
	    } else {
	      this.writeDigitalPort(port);
	    }
	  }

	  /**
	   * Update local store of digital port state
	   * @param {number} pin The pin you want to write a value to.
	   * @param {number} value The value you want to write. Must be board.HIGH or board.LOW
	   */

	  updateDigitalPort(pin, value) {
	    const port = pin >> 3;
	    const bit = 1 << (pin & 0x07);

	    this.pins[pin].value = value;

	    if (value) {
	      this.ports[port] |= bit;
	    } else {
	      this.ports[port] &= ~bit;
	    }

	    return port;
	  }

	  /**
	   * Write queued digital ports
	   */

	  flushDigitalPorts() {
	    for (let i = 0; i < this.ports.length; i++) {
	      if (this.digitalPortQueue >> i) {
	        this.writeDigitalPort(i);
	      }
	    }
	    this.digitalPortQueue = 0x0000;
	  }

	  /**
	   * Update a digital port (group of 8 digital pins) on the Arduino
	   * @param {number} port The port you want to update.
	   */

	  writeDigitalPort(port) {
	    writeToTransport(this, [
	      DIGITAL_MESSAGE | port,
	      this.ports[port] & 0x7f,
	      (this.ports[port] >> 7) & 0x7f,
	    ]);
	  }

	  /**
	   * Asks the arduino to read digital data. Turn on reporting for this pin's port.
	   *
	   * @param {number} pin The pin to read data from
	   * @param {function} callback The function to call when data has been received
	   */

	  digitalRead(pin, callback) {
	    this.reportDigitalPin(pin, 1);
	    this.addListener(`digital-read-${pin}`, callback);
	  }

	  /**
	   * Asks the arduino to tell us its capabilities
	   * @param {function} callback A function to call when we receive the capabilities
	   */

	  queryCapabilities(callback) {
	    this.once("capability-query", callback);
	    writeToTransport(this, [START_SYSEX, CAPABILITY_QUERY, END_SYSEX]);
	  }

	  /**
	   * Asks the arduino to tell us its analog pin mapping
	   * @param {function} callback A function to call when we receive the pin mappings.
	   */

	  queryAnalogMapping(callback) {
	    this.once("analog-mapping-query", callback);
	    writeToTransport(this, [START_SYSEX, ANALOG_MAPPING_QUERY, END_SYSEX]);
	  }

	  /**
	   * Asks the arduino to tell us the current state of a pin
	   * @param {number} pin The pin we want to the know the state of
	   * @param {function} callback A function to call when we receive the pin state.
	   */

	  queryPinState(pin, callback) {
	    this.once(`pin-state-${pin}`, callback);
	    writeToTransport(this, [START_SYSEX, PIN_STATE_QUERY, pin, END_SYSEX]);
	  }

	  /**
	   * Sends a string to the arduino
	   * @param {String} string to send to the device
	   */

	  sendString(string) {
	    const bytes = Buffer.from(`${string}\0`, "utf8");
	    const data = [];

	    data.push(START_SYSEX, STRING_DATA);
	    for (let i = 0, length = bytes.length; i < length; i++) {
	      data.push(bytes[i] & 0x7f, (bytes[i] >> 7) & 0x7f);
	    }
	    data.push(END_SYSEX);

	    writeToTransport(this, data);
	  }

	  /**
	   * Sends a I2C config request to the arduino board with an optional
	   * value in microseconds to delay an I2C Read.  Must be called before
	   * an I2C Read or Write
	   * @param {number} delay in microseconds to set for I2C Read
	   */

	  sendI2CConfig(delay) {
	    return this.i2cConfig(delay);
	  }

	  /**
	   * Enable I2C with an optional read delay. Must be called before
	   * an I2C Read or Write
	   *
	   * Supersedes sendI2CConfig
	   *
	   * @param {number} delay in microseconds to set for I2C Read
	   *
	   * or
	   *
	   * @param {object} with a single property `delay`
	   */

	  i2cConfig(options) {
	    let settings = i2cActive.get(this);
	    let delay;

	    if (!settings) {
	      settings = {
	        /*
	          Keys will be I2C peripheral addresses
	         */
	      };
	      i2cActive.set(this, settings);
	    }

	    if (typeof options === "number") {
	      delay = options;
	    } else {
	      if (typeof options === "object" && options !== null) {
	        delay = Number(options.delay);

	        // When an address was explicitly specified, there may also be
	        // peripheral specific instructions in the config.
	        if (typeof options.address !== "undefined") {
	          if (!settings[options.address]) {
	            settings[options.address] = {
	              stopTX: true,
	            };
	          }
	        }

	        // When settings have been explicitly provided, just bulk assign
	        // them to the existing settings, even if that's empty. This
	        // allows for reconfiguration as needed.
	        if (typeof options.settings !== "undefined") {
	          Object.assign(settings[options.address], options.settings);
	          /*
	            - stopTX: true | false
	                Set `stopTX` to `false` if this peripheral
	                expects Wire to keep the transmission connection alive between
	                setting a register and requesting bytes.

	                Defaults to `true`.
	           */
	        }
	      }
	    }

	    settings.delay = delay = delay || 0;

	    i2cRequest(this, [
	      START_SYSEX,
	      I2C_CONFIG,
	      delay & 0xff,
	      (delay >> 8) & 0xff,
	      END_SYSEX,
	    ]);

	    return this;
	  }

	  /**
	   * Asks the arduino to send an I2C request to a device
	   * @param {number} slaveAddress The address of the I2C device
	   * @param {Array} bytes The bytes to send to the device
	   */

	  sendI2CWriteRequest(slaveAddress, bytes) {
	    const data = [];
	    /* istanbul ignore next */
	    bytes = bytes || [];

	    data.push(
	      START_SYSEX,
	      I2C_REQUEST,
	      slaveAddress,
	      this.I2C_MODES.WRITE << 3
	    );

	    for (let i = 0, length = bytes.length; i < length; i++) {
	      data.push(bytes[i] & 0x7f, (bytes[i] >> 7) & 0x7f);
	    }

	    data.push(END_SYSEX);

	    i2cRequest(this, data);
	  }

	  /**
	   * Write data to a register
	   *
	   * @param {number} address      The address of the I2C device.
	   * @param {Array} cmdRegOrData  An array of bytes
	   *
	   * Write a command to a register
	   *
	   * @param {number} address      The address of the I2C device.
	   * @param {number} cmdRegOrData The register
	   * @param {Array} inBytes       An array of bytes
	   *
	   */

	  i2cWrite(address, registerOrData, inBytes) {
	    /**
	     * registerOrData:
	     * [... arbitrary bytes]
	     *
	     * or
	     *
	     * registerOrData, inBytes:
	     * command [, ...]
	     *
	     */
	    const data = [START_SYSEX, I2C_REQUEST, address, this.I2C_MODES.WRITE << 3];

	    // If i2cWrite was used for an i2cWriteReg call...
	    if (
	      arguments.length === 3 &&
	      !Array.isArray(registerOrData) &&
	      !Array.isArray(inBytes)
	    ) {
	      return this.i2cWriteReg(address, registerOrData, inBytes);
	    }

	    // Fix arguments if called with Firmata.js API
	    if (arguments.length === 2) {
	      if (Array.isArray(registerOrData)) {
	        inBytes = registerOrData.slice();
	        registerOrData = inBytes.shift();
	      } else {
	        inBytes = [];
	      }
	    }

	    const bytes = Buffer.from([registerOrData].concat(inBytes));

	    for (var i = 0, length = bytes.length; i < length; i++) {
	      data.push(bytes[i] & 0x7f, (bytes[i] >> 7) & 0x7f);
	    }

	    data.push(END_SYSEX);

	    i2cRequest(this, data);

	    return this;
	  }

	  /**
	   * Write data to a register
	   *
	   * @param {number} address    The address of the I2C device.
	   * @param {number} register   The register.
	   * @param {number} byte       The byte value to write.
	   *
	   */

	  i2cWriteReg(address, register, byte) {
	    i2cRequest(this, [
	      START_SYSEX,
	      I2C_REQUEST,
	      address,
	      this.I2C_MODES.WRITE << 3,
	      // register
	      register & 0x7f,
	      (register >> 7) & 0x7f,
	      // byte
	      byte & 0x7f,
	      (byte >> 7) & 0x7f,
	      END_SYSEX,
	    ]);

	    return this;
	  }

	  /**
	   * Asks the arduino to request bytes from an I2C device
	   * @param {number} slaveAddress The address of the I2C device
	   * @param {number} numBytes The number of bytes to receive.
	   * @param {function} callback A function to call when we have received the bytes.
	   */

	  sendI2CReadRequest(address, numBytes, callback) {
	    i2cRequest(this, [
	      START_SYSEX,
	      I2C_REQUEST,
	      address,
	      this.I2C_MODES.READ << 3,
	      numBytes & 0x7f,
	      (numBytes >> 7) & 0x7f,
	      END_SYSEX,
	    ]);
	    this.once(`I2C-reply-${address}-0`, callback);
	  }

	  // TODO: Refactor i2cRead and i2cReadOnce
	  //      to share most operations.

	  /**
	   * Initialize a continuous I2C read.
	   *
	   * @param {number} address    The address of the I2C device
	   * @param {number} register   Optionally set the register to read from.
	   * @param {number} numBytes   The number of bytes to receive.
	   * @param {function} callback A function to call when we have received the bytes.
	   */

	  i2cRead(address, register, bytesToRead, callback) {
	    if (
	      arguments.length === 3 &&
	      typeof register === "number" &&
	      typeof bytesToRead === "function"
	    ) {
	      callback = bytesToRead;
	      bytesToRead = register;
	      register = null;
	    }

	    const data = [
	      START_SYSEX,
	      I2C_REQUEST,
	      address,
	      this.I2C_MODES.CONTINUOUS_READ << 3,
	    ];
	    let event = `I2C-reply-${address}-`;

	    if (register !== null) {
	      data.push(register & 0x7f, (register >> 7) & 0x7f);
	    } else {
	      register = 0;
	    }

	    event += register;

	    data.push(bytesToRead & 0x7f, (bytesToRead >> 7) & 0x7f, END_SYSEX);

	    this.on(event, callback);

	    i2cRequest(this, data);

	    return this;
	  }

	  /**
	   * Stop continuous reading of the specified I2C address or register.
	   *
	   * @param {object} options Options:
	   *   bus {number} The I2C bus (on supported platforms)
	   *   address {number} The I2C peripheral address to stop reading.
	   *
	   * @param {number} address The I2C peripheral address to stop reading.
	   */

	  i2cStop(options) {
	    // There may be more values in the future
	    // var options = {};

	    // null or undefined? Do nothing.
	    if (options == null) {
	      return;
	    }

	    if (typeof options === "number") {
	      options = {
	        address: options,
	      };
	    }

	    writeToTransport(this, [
	      START_SYSEX,
	      I2C_REQUEST,
	      options.address,
	      this.I2C_MODES.STOP_READING << 3,
	      END_SYSEX,
	    ]);

	    Object.keys(this._events).forEach((event) => {
	      if (event.startsWith(`I2C-reply-${options.address}`)) {
	        this.removeAllListeners(event);
	      }
	    });
	  }

	  /**
	   * Perform a single I2C read
	   *
	   * Supersedes sendI2CReadRequest
	   *
	   * Read bytes from address
	   *
	   * @param {number} address    The address of the I2C device
	   * @param {number} register   Optionally set the register to read from.
	   * @param {number} numBytes   The number of bytes to receive.
	   * @param {function} callback A function to call when we have received the bytes.
	   *
	   */

	  i2cReadOnce(address, register, bytesToRead, callback) {
	    if (
	      arguments.length === 3 &&
	      typeof register === "number" &&
	      typeof bytesToRead === "function"
	    ) {
	      callback = bytesToRead;
	      bytesToRead = register;
	      register = null;
	    }

	    const data = [START_SYSEX, I2C_REQUEST, address, this.I2C_MODES.READ << 3];
	    let event = `I2C-reply-${address}-`;

	    if (register !== null) {
	      data.push(register & 0x7f, (register >> 7) & 0x7f);
	    } else {
	      register = 0;
	    }

	    event += register;

	    data.push(bytesToRead & 0x7f, (bytesToRead >> 7) & 0x7f, END_SYSEX);

	    this.once(event, callback);

	    i2cRequest(this, data);

	    return this;
	  }

	  /**
	   * Configure the passed pin as the controller in a 1-wire bus.
	   * Pass as enableParasiticPower true if you want the data pin to power the bus.
	   * @param pin
	   * @param enableParasiticPower
	   */

	  sendOneWireConfig(pin, enableParasiticPower) {
	    writeToTransport(this, [
	      START_SYSEX,
	      ONEWIRE_DATA,
	      ONEWIRE_CONFIG_REQUEST,
	      pin,
	      enableParasiticPower ? 0x01 : 0x00,
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * Searches for 1-wire devices on the bus.  The passed callback should accept
	   * and error argument and an array of device identifiers.
	   * @param pin
	   * @param callback
	   */

	  sendOneWireSearch(pin, callback) {
	    this[SYM_sendOneWireSearch](
	      ONEWIRE_SEARCH_REQUEST,
	      `1-wire-search-reply-${pin}`,
	      pin,
	      callback
	    );
	  }

	  /**
	   * Searches for 1-wire devices on the bus in an alarmed state.  The passed callback
	   * should accept and error argument and an array of device identifiers.
	   * @param pin
	   * @param callback
	   */

	  sendOneWireAlarmsSearch(pin, callback) {
	    this[SYM_sendOneWireSearch](
	      ONEWIRE_SEARCH_ALARMS_REQUEST,
	      `1-wire-search-alarms-reply-${pin}`,
	      pin,
	      callback
	    );
	  }

	  [SYM_sendOneWireSearch](type, event, pin, callback) {
	    writeToTransport(this, [START_SYSEX, ONEWIRE_DATA, type, pin, END_SYSEX]);

	    const timeout = setTimeout(() => {
	      /* istanbul ignore next */
	      callback(
	        new Error(
	          "1-Wire device search timeout - are you running ConfigurableFirmata?"
	        )
	      );
	    }, 5000);
	    this.once(event, (devices) => {
	      clearTimeout(timeout);
	      callback(null, devices);
	    });
	  }

	  /**
	   * Reads data from a device on the bus and invokes the passed callback.
	   *
	   * N.b. ConfigurableFirmata will issue the 1-wire select command internally.
	   * @param pin
	   * @param device
	   * @param numBytesToRead
	   * @param callback
	   */

	  sendOneWireRead(pin, device, numBytesToRead, callback) {
	    const correlationId = Math.floor(Math.random() * 255);
	    /* istanbul ignore next */
	    const timeout = setTimeout(() => {
	      /* istanbul ignore next */
	      callback(
	        new Error(
	          "1-Wire device read timeout - are you running ConfigurableFirmata?"
	        )
	      );
	    }, 5000);
	    this[SYM_sendOneWireRequest](
	      pin,
	      ONEWIRE_READ_REQUEST_BIT,
	      device,
	      numBytesToRead,
	      correlationId,
	      null,
	      null,
	      `1-wire-read-reply-${correlationId}`,
	      (data) => {
	        clearTimeout(timeout);
	        callback(null, data);
	      }
	    );
	  }

	  /**
	   * Resets all devices on the bus.
	   * @param pin
	   */

	  sendOneWireReset(pin) {
	    this[SYM_sendOneWireRequest](pin, ONEWIRE_RESET_REQUEST_BIT);
	  }

	  /**
	   * Writes data to the bus to be received by the passed device.  The device
	   * should be obtained from a previous call to sendOneWireSearch.
	   *
	   * N.b. ConfigurableFirmata will issue the 1-wire select command internally.
	   * @param pin
	   * @param device
	   * @param data
	   */

	  sendOneWireWrite(pin, device, data) {
	    this[SYM_sendOneWireRequest](
	      pin,
	      ONEWIRE_WRITE_REQUEST_BIT,
	      device,
	      null,
	      null,
	      null,
	      Array.isArray(data) ? data : [data]
	    );
	  }

	  /**
	   * Tells firmata to not do anything for the passed amount of ms.  For when you
	   * need to give a device attached to the bus time to do a calculation.
	   * @param pin
	   */

	  sendOneWireDelay(pin, delay) {
	    this[SYM_sendOneWireRequest](
	      pin,
	      ONEWIRE_DELAY_REQUEST_BIT,
	      null,
	      null,
	      null,
	      delay
	    );
	  }

	  /**
	   * Sends the passed data to the passed device on the bus, reads the specified
	   * number of bytes and invokes the passed callback.
	   *
	   * N.b. ConfigurableFirmata will issue the 1-wire select command internally.
	   * @param pin
	   * @param device
	   * @param data
	   * @param numBytesToRead
	   * @param callback
	   */

	  sendOneWireWriteAndRead(pin, device, data, numBytesToRead, callback) {
	    const correlationId = Math.floor(Math.random() * 255);
	    /* istanbul ignore next */
	    const timeout = setTimeout(() => {
	      /* istanbul ignore next */
	      callback(
	        new Error(
	          "1-Wire device read timeout - are you running ConfigurableFirmata?"
	        )
	      );
	    }, 5000);
	    this[SYM_sendOneWireRequest](
	      pin,
	      ONEWIRE_WRITE_REQUEST_BIT | ONEWIRE_READ_REQUEST_BIT,
	      device,
	      numBytesToRead,
	      correlationId,
	      null,
	      Array.isArray(data) ? data : [data],
	      `1-wire-read-reply-${correlationId}`,
	      (data) => {
	        clearTimeout(timeout);
	        callback(null, data);
	      }
	    );
	  }

	  // see http://firmata.org/wiki/Proposals#OneWire_Proposal
	  [SYM_sendOneWireRequest](
	    pin,
	    subcommand,
	    device,
	    numBytesToRead,
	    correlationId,
	    delay,
	    dataToWrite,
	    event,
	    callback
	  ) {
	    const bytes = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

	    if (device || numBytesToRead || correlationId || delay || dataToWrite) {
	      subcommand = subcommand | ONEWIRE_WITHDATA_REQUEST_BITS;
	    }

	    if (device) {
	      bytes.splice(...[0, 8].concat(device));
	    }

	    if (numBytesToRead) {
	      bytes[8] = numBytesToRead & 0xff;
	      bytes[9] = (numBytesToRead >> 8) & 0xff;
	    }

	    if (correlationId) {
	      bytes[10] = correlationId & 0xff;
	      bytes[11] = (correlationId >> 8) & 0xff;
	    }

	    if (delay) {
	      bytes[12] = delay & 0xff;
	      bytes[13] = (delay >> 8) & 0xff;
	      bytes[14] = (delay >> 16) & 0xff;
	      bytes[15] = (delay >> 24) & 0xff;
	    }

	    if (dataToWrite) {
	      bytes.push(...dataToWrite);
	    }

	    const output = [
	      START_SYSEX,
	      ONEWIRE_DATA,
	      subcommand,
	      pin,
	      ...Encoder7Bit.to7BitArray(bytes),
	      END_SYSEX,
	    ];

	    writeToTransport(this, output);

	    if (event && callback) {
	      this.once(event, callback);
	    }
	  }

	  /**
	   * Set sampling interval in millis. Default is 19 ms
	   * @param {number} interval The sampling interval in ms > 10
	   */

	  setSamplingInterval(interval) {
	    const safeint = interval < 10 ? 10 : interval > 65535 ? 65535 : interval;
	    this.settings.samplingInterval = safeint;
	    writeToTransport(this, [
	      START_SYSEX,
	      SAMPLING_INTERVAL,
	      safeint & 0x7f,
	      (safeint >> 7) & 0x7f,
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * Get sampling interval in millis. Default is 19 ms
	   *
	   * @return {number} samplingInterval
	   */

	  getSamplingInterval() {
	    return this.settings.samplingInterval;
	  }

	  /**
	   * Set reporting on pin
	   * @param {number} pin The pin to turn on/off reporting
	   * @param {number} value Binary value to turn reporting on/off
	   */

	  reportAnalogPin(pin, value) {
	    /* istanbul ignore else */
	    if (value === 0 || value === 1) {
	      this.pins[this.analogPins[pin]].report = value;
	      writeToTransport(this, [REPORT_ANALOG | pin, value]);
	    }
	  }

	  /**
	   * Set reporting on pin
	   * @param {number} pin The pin to turn on/off reporting
	   * @param {number} value Binary value to turn reporting on/off
	   */

	  reportDigitalPin(pin, value) {
	    const port = pin >> 3;
	    /* istanbul ignore else */
	    if (value === 0 || value === 1) {
	      this.pins[pin].report = value;
	      writeToTransport(this, [REPORT_DIGITAL | port, value]);
	    }
	  }

	  /**
	   *
	   *
	   */

	  pingRead(options, callback) {
	    if (!this.pins[options.pin].supportedModes.includes(PING_READ)) {
	      throw new Error("Please upload PingFirmata to the board");
	    }

	    const { pin, value, pulseOut = 0, timeout = 1000000 } = options;

	    writeToTransport(this, [
	      START_SYSEX,
	      PING_READ,
	      pin,
	      value,
	      ...Firmata.encode([
	        (pulseOut >> 24) & 0xff,
	        (pulseOut >> 16) & 0xff,
	        (pulseOut >> 8) & 0xff,
	        pulseOut & 0xff,
	      ]),
	      ...Firmata.encode([
	        (timeout >> 24) & 0xff,
	        (timeout >> 16) & 0xff,
	        (timeout >> 8) & 0xff,
	        timeout & 0xff,
	      ]),
	      END_SYSEX,
	    ]);

	    this.once(`ping-read-${pin}`, callback);
	  }

	  /**
	   * Stepper functions to support version 2 of ConfigurableFirmata's asynchronous control of stepper motors
	   * https://github.com/soundanalogous/ConfigurableFirmata
	   */

	  /**
	   * Asks the arduino to configure a stepper motor with the given config to allow asynchronous control of the stepper
	   * @param {object} opts Options:
	   *    {number} deviceNum: Device number for the stepper (range 0-9)
	   *    {number} type: One of this.STEPPER.TYPE.*
	   *    {number} stepSize: One of this.STEPPER.STEP_SIZE.*
	   *    {number} stepPin: Only used if STEPPER.TYPE.DRIVER
	   *    {number} directionPin: Only used if STEPPER.TYPE.DRIVER
	   *    {number} motorPin1: motor pin 1
	   *    {number} motorPin2:  motor pin 2
	   *    {number} [motorPin3]: Only required if type == this.STEPPER.TYPE.THREE_WIRE || this.STEPPER.TYPE.FOUR_WIRE
	   *    {number} [motorPin4]: Only required if type == this.STEPPER.TYPE.FOUR_WIRE
	   *    {number} [enablePin]: Enable pin
	   *    {array} [invertPins]: Array of pins to invert
	   */

	  accelStepperConfig(options) {
	    let {
	      deviceNum,
	      invertPins,
	      motorPin1,
	      motorPin2,
	      motorPin3,
	      motorPin4,
	      enablePin,
	      stepSize = this.STEPPER.STEP_SIZE.WHOLE,
	      type = this.STEPPER.TYPE.FOUR_WIRE,
	    } = options;

	    const data = [
	      START_SYSEX,
	      ACCELSTEPPER,
	      0x00, // STEPPER_CONFIG from firmware
	      deviceNum,
	    ];

	    let iface = ((type & 0x07) << 4) | ((stepSize & 0x07) << 1);
	    let pinsToInvert = 0x00;

	    if (typeof enablePin !== "undefined") {
	      iface = iface | 0x01;
	    }

	    data.push(iface);

	    [
	      "stepPin",
	      "motorPin1",
	      "directionPin",
	      "motorPin2",
	      "motorPin3",
	      "motorPin4",
	      "enablePin",
	    ].forEach((pin) => {
	      if (typeof options[pin] !== "undefined") {
	        data.push(options[pin]);
	      }
	    });

	    if (Array.isArray(invertPins)) {
	      if (invertPins.includes(motorPin1)) {
	        pinsToInvert |= 0x01;
	      }
	      if (invertPins.includes(motorPin2)) {
	        pinsToInvert |= 0x02;
	      }
	      if (invertPins.includes(motorPin3)) {
	        pinsToInvert |= 0x04;
	      }
	      if (invertPins.includes(motorPin4)) {
	        pinsToInvert |= 0x08;
	      }
	      if (invertPins.includes(enablePin)) {
	        pinsToInvert |= 0x10;
	      }
	    }

	    data.push(pinsToInvert, END_SYSEX);

	    writeToTransport(this, data);
	  }

	  /**
	   * Asks the arduino to set the stepper position to 0
	   * Note: This is not a move. We are setting the current position equal to zero
	   * @param {number} deviceNum Device number for the stepper (range 0-9)
	   */

	  accelStepperZero(deviceNum) {
	    writeToTransport(this, [
	      START_SYSEX,
	      ACCELSTEPPER,
	      0x01, // STEPPER_ZERO from firmware
	      deviceNum,
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * Asks the arduino to move a stepper a number of steps
	   * (and optionally with and acceleration and deceleration)
	   * speed is in units of steps/sec
	   * @param {number} deviceNum Device number for the stepper (range 0-5)
	   * @param {number} steps Number of steps to make
	   */
	  accelStepperStep(deviceNum, steps, callback) {
	    writeToTransport(this, [
	      START_SYSEX,
	      ACCELSTEPPER,
	      0x02, // STEPPER_STEP from firmware
	      deviceNum,
	      ...encode32BitSignedInteger(steps),
	      END_SYSEX,
	    ]);

	    if (callback) {
	      this.once(`stepper-done-${deviceNum}`, callback);
	    }
	  }

	  /**
	   * Asks the arduino to move a stepper to a specific location
	   * @param {number} deviceNum Device number for the stepper (range 0-5)
	   * @param {number} position Desired position
	   */
	  accelStepperTo(deviceNum, position, callback) {
	    writeToTransport(this, [
	      START_SYSEX,
	      ACCELSTEPPER,
	      0x03, // STEPPER_TO from firmware
	      deviceNum,
	      ...encode32BitSignedInteger(position),
	      END_SYSEX,
	    ]);

	    if (callback) {
	      this.once(`stepper-done-${deviceNum}`, callback);
	    }
	  }

	  /**
	   * Asks the arduino to enable/disable a stepper
	   * @param {number} deviceNum Device number for the stepper (range 0-9)
	   * @param {boolean} [enabled]
	   */

	  accelStepperEnable(deviceNum, enabled = true) {
	    writeToTransport(this, [
	      START_SYSEX,
	      ACCELSTEPPER,
	      0x04, // ENABLE from firmware
	      deviceNum,
	      enabled & 0x01,
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * Asks the arduino to stop a stepper
	   * @param {number} deviceNum Device number for the stepper (range 0-9)
	   */

	  accelStepperStop(deviceNum) {
	    writeToTransport(this, [
	      START_SYSEX,
	      ACCELSTEPPER,
	      0x05, // STEPPER_STOP from firmware
	      deviceNum,
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * Asks the arduino to report the position of a stepper
	   * @param {number} deviceNum Device number for the stepper (range 0-9)
	   */

	  accelStepperReportPosition(deviceNum, callback) {
	    writeToTransport(this, [
	      START_SYSEX,
	      ACCELSTEPPER,
	      0x06, // STEPPER_REPORT_POSITION from firmware
	      deviceNum,
	      END_SYSEX,
	    ]);

	    /* istanbul ignore else */
	    if (callback) {
	      this.once(`stepper-position-${deviceNum}`, callback);
	    }
	  }

	  /**
	   * Asks the arduino to set the acceleration for a stepper
	   * @param {number} deviceNum Device number for the stepper (range 0-9)
	   * @param {number} acceleration Desired acceleration in steps per sec^2
	   */

	  accelStepperAcceleration(deviceNum, acceleration) {
	    writeToTransport(this, [
	      START_SYSEX,
	      ACCELSTEPPER,
	      0x08, // STEPPER_SET_ACCELERATION from firmware
	      deviceNum,
	      ...encodeCustomFloat(acceleration),
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * Asks the arduino to set the max speed for a stepper
	   * @param {number} deviceNum Device number for the stepper (range 0-9)
	   * @param {number} speed Desired speed or maxSpeed in steps per second
	   * @param {function} [callback]
	   */

	  accelStepperSpeed(deviceNum, speed) {
	    writeToTransport(this, [
	      START_SYSEX,
	      ACCELSTEPPER,
	      0x09, // STEPPER_SET_SPEED from firmware
	      deviceNum,
	      ...encodeCustomFloat(speed),
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * Asks the arduino to configure a multiStepper group
	   * @param {object} options Options:
	   *    {number} groupNum: Group number for the multiSteppers (range 0-5)
	   *    {number} devices: array of accelStepper device numbers in group
	   **/

	  multiStepperConfig(options) {
	    writeToTransport(this, [
	      START_SYSEX,
	      ACCELSTEPPER,
	      0x20, // MULTISTEPPER_CONFIG from firmware
	      options.groupNum,
	      ...options.devices,
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * Asks the arduino to move a multiStepper group
	   * @param {number} groupNum Group number for the multiSteppers (range 0-5)
	   * @param {number} positions array of absolute stepper positions
	   **/

	  multiStepperTo(groupNum, positions, callback) {
	    if (groupNum < 0 || groupNum > 5) {
	      throw new RangeError(
	        `Invalid "groupNum": ${groupNum}. Expected "groupNum" between 0-5`
	      );
	    }

	    writeToTransport(this, [
	      START_SYSEX,
	      ACCELSTEPPER,
	      0x21, // MULTISTEPPER_TO from firmware
	      groupNum,
	      ...positions.reduce(
	        (a, b) => a.concat(...encode32BitSignedInteger(b)),
	        []
	      ),
	      END_SYSEX,
	    ]);

	    /* istanbul ignore else */
	    if (callback) {
	      this.once(`multi-stepper-done-${groupNum}`, callback);
	    }
	  }

	  /**
	   * Asks the arduino to stop a multiStepper group
	   * @param {number} groupNum: Group number for the multiSteppers (range 0-5)
	   **/

	  multiStepperStop(groupNum) {
	    /* istanbul ignore else */
	    if (groupNum < 0 || groupNum > 5) {
	      throw new RangeError(
	        `Invalid "groupNum": ${groupNum}. Expected "groupNum" between 0-5`
	      );
	    }
	    writeToTransport(this, [
	      START_SYSEX,
	      ACCELSTEPPER,
	      0x23, // MULTISTEPPER_STOP from firmware
	      groupNum,
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * Stepper functions to support AdvancedFirmata's asynchronous control of stepper motors
	   * https://github.com/soundanalogous/AdvancedFirmata
	   */

	  /**
	   * Asks the arduino to configure a stepper motor with the given config to allow asynchronous control of the stepper
	   * @param {number} deviceNum Device number for the stepper (range 0-5, expects steppers to be setup in order from 0 to 5)
	   * @param {number} type One of this.STEPPER.TYPE.*
	   * @param {number} stepsPerRev Number of steps motor takes to make one revolution
	   * @param {number} stepOrMotor1Pin If using EasyDriver type stepper driver, this is direction pin, otherwise it is motor 1 pin
	   * @param {number} dirOrMotor2Pin If using EasyDriver type stepper driver, this is step pin, otherwise it is motor 2 pin
	   * @param {number} [motorPin3] Only required if type == this.STEPPER.TYPE.FOUR_WIRE
	   * @param {number} [motorPin4] Only required if type == this.STEPPER.TYPE.FOUR_WIRE
	   */

	  stepperConfig(
	    deviceNum,
	    type,
	    stepsPerRev,
	    dirOrMotor1Pin,
	    dirOrMotor2Pin,
	    motorPin3,
	    motorPin4
	  ) {
	    writeToTransport(this, [
	      START_SYSEX,
	      STEPPER,
	      0x00, // STEPPER_CONFIG from firmware
	      deviceNum,
	      type,
	      stepsPerRev & 0x7f,
	      (stepsPerRev >> 7) & 0x7f,
	      dirOrMotor1Pin,
	      dirOrMotor2Pin,
	      ...(type === this.STEPPER.TYPE.FOUR_WIRE ? [motorPin3, motorPin4] : []),
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * Asks the arduino to move a stepper a number of steps at a specific speed
	   * (and optionally with and acceleration and deceleration)
	   * speed is in units of .01 rad/sec
	   * accel and decel are in units of .01 rad/sec^2
	   * TODO: verify the units of speed, accel, and decel
	   * @param {number} deviceNum Device number for the stepper (range 0-5)
	   * @param {number} direction One of this.STEPPER.DIRECTION.*
	   * @param {number} steps Number of steps to make
	   * @param {number} speed
	   * @param {number|function} accel Acceleration or if accel and decel are not used, then it can be the callback
	   * @param {number} [decel]
	   * @param {function} [callback]
	   */

	  stepperStep(deviceNum, direction, steps, speed, accel, decel, callback) {
	    if (typeof accel === "function") {
	      callback = accel;
	      accel = 0;
	      decel = 0;
	    }

	    writeToTransport(this, [
	      START_SYSEX,
	      STEPPER,
	      0x01, // STEPPER_STEP from firmware
	      deviceNum,
	      direction, // one of this.STEPPER.DIRECTION.*
	      steps & 0x7f,
	      (steps >> 7) & 0x7f,
	      (steps >> 14) & 0x7f,
	      speed & 0x7f,
	      (speed >> 7) & 0x7f,

	      ...(accel > 0 || decel > 0
	        ? [accel & 0x7f, (accel >> 7) & 0x7f, decel & 0x7f, (decel >> 7) & 0x7f]
	        : []),

	      END_SYSEX,
	    ]);

	    /* istanbul ignore else */
	    if (callback) {
	      this.once(`stepper-done-${deviceNum}`, callback);
	    }
	  }

	  /**
	   * Asks the Arduino to configure a hardware or serial port.
	   * @param {object} options Options:
	   *   portId {number} The serial port to use (HW_SERIAL1, HW_SERIAL2, HW_SERIAL3, SW_SERIAL0,
	   *   SW_SERIAL1, SW_SERIAL2, SW_SERIAL3)
	   *   baud {number} The baud rate of the serial port
	   *   rxPin {number} [SW Serial only] The RX pin of the SoftwareSerial instance
	   *   txPin {number} [SW Serial only] The TX pin of the SoftwareSerial instance
	   */

	  serialConfig(options) {
	    let portId;
	    let baud;
	    let rxPin;
	    let txPin;

	    /* istanbul ignore else */
	    if (typeof options === "object" && options !== null) {
	      portId = options.portId;
	      baud = options.baud;
	      rxPin = options.rxPin;
	      txPin = options.txPin;
	    }

	    /* istanbul ignore else */
	    if (typeof portId === "undefined") {
	      throw new Error(
	        "portId must be specified, see SERIAL_PORT_IDs for options."
	      );
	    }

	    baud = baud || 57600;

	    const data = [
	      START_SYSEX,
	      SERIAL_MESSAGE,
	      SERIAL_CONFIG | portId,
	      baud & 0x7f,
	      (baud >> 7) & 0x7f,
	      (baud >> 14) & 0x7f,
	    ];
	    if (
	      portId > 7 &&
	      typeof rxPin !== "undefined" &&
	      typeof txPin !== "undefined"
	    ) {
	      data.push(rxPin, txPin);
	    } else if (portId > 7) {
	      throw new Error(
	        "Both RX and TX pins must be defined when using Software Serial."
	      );
	    }

	    data.push(END_SYSEX);
	    writeToTransport(this, data);
	  }

	  /**
	   * Write an array of bytes to the specified serial port.
	   * @param {number} portId The serial port to write to.
	   * @param {Array} inBytes An array of bytes to write to the serial port.
	   */

	  serialWrite(portId, bytes) {
	    const data = [START_SYSEX, SERIAL_MESSAGE, SERIAL_WRITE | portId];
	    for (let i = 0, len = bytes.length; i < len; i++) {
	      data.push(bytes[i] & 0x7f, (bytes[i] >> 7) & 0x7f);
	    }
	    data.push(END_SYSEX);
	    /* istanbul ignore else */
	    if (bytes.length > 0) {
	      writeToTransport(this, data);
	    }
	  }

	  /**
	   * Start continuous reading of the specified serial port. The port is checked for data each
	   * iteration of the main Arduino loop.
	   * @param {number} portId The serial port to start reading continuously.
	   * @param {number} maxBytesToRead [Optional] The maximum number of bytes to read per iteration.
	   * If there are less bytes in the buffer, the lesser number of bytes will be returned. A value of 0
	   * indicates that all available bytes in the buffer should be read.
	   * @param {function} callback A function to call when we have received the bytes.
	   */

	  serialRead(portId, maxBytesToRead, callback) {
	    const data = [
	      START_SYSEX,
	      SERIAL_MESSAGE,
	      SERIAL_READ | portId,
	      this.SERIAL_MODES.CONTINUOUS_READ,
	    ];

	    if (arguments.length === 2 && typeof maxBytesToRead === "function") {
	      callback = maxBytesToRead;
	    } else {
	      data.push(maxBytesToRead & 0x7f, (maxBytesToRead >> 7) & 0x7f);
	    }

	    data.push(END_SYSEX);
	    writeToTransport(this, data);

	    this.on(`serial-data-${portId}`, callback);
	  }

	  /**
	   * Stop continuous reading of the specified serial port. This does not close the port, it stops
	   * reading it but keeps the port open.
	   * @param {number} portId The serial port to stop reading.
	   */

	  serialStop(portId) {
	    writeToTransport(this, [
	      START_SYSEX,
	      SERIAL_MESSAGE,
	      SERIAL_READ | portId,
	      this.SERIAL_MODES.STOP_READING,
	      END_SYSEX,
	    ]);

	    this.removeAllListeners(`serial-data-${portId}`);
	  }

	  /**
	   * Close the specified serial port.
	   * @param {number} portId The serial port to close.
	   */

	  serialClose(portId) {
	    writeToTransport(this, [
	      START_SYSEX,
	      SERIAL_MESSAGE,
	      SERIAL_CLOSE | portId,
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * Flush the specified serial port. For hardware serial, this waits for the transmission of
	   * outgoing serial data to complete. For software serial, this removed any buffered incoming serial
	   * data.
	   * @param {number} portId The serial port to flush.
	   */

	  serialFlush(portId) {
	    writeToTransport(this, [
	      START_SYSEX,
	      SERIAL_MESSAGE,
	      SERIAL_FLUSH | portId,
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * For SoftwareSerial only. Only a single SoftwareSerial instance can read data at a time.
	   * Call this method to set this port to be the reading port in the case there are multiple
	   * SoftwareSerial instances.
	   * @param {number} portId The serial port to listen on.
	   */

	  serialListen(portId) {
	    // listen only applies to software serial ports
	    if (portId < 8) {
	      return;
	    }
	    writeToTransport(this, [
	      START_SYSEX,
	      SERIAL_MESSAGE,
	      SERIAL_LISTEN | portId,
	      END_SYSEX,
	    ]);
	  }

	  /**
	   * Allow user code to handle arbitrary sysex responses
	   *
	   * @param {number} commandByte The commandByte must be associated with some message
	   *                             that's expected from the slave device. The handler is
	   *                             called with an array of _raw_ data from the slave. Data
	   *                             decoding must be done within the handler itself.
	   *
	   *                             Use Firmata.decode(data) to extract useful values from
	   *                             the incoming response data.
	   *
	   *  @param {function} handler Function which handles receipt of responses matching
	   *                            commandByte.
	   */

	  sysexResponse(commandByte, handler) {
	    if (Firmata.SYSEX_RESPONSE[commandByte]) {
	      throw new Error(`${commandByte} is not an available SYSEX_RESPONSE byte`);
	    }

	    Firmata.SYSEX_RESPONSE[commandByte] = (board) =>
	      handler.call(board, board.buffer.slice(2, -1));

	    return this;
	  }

	  /*
	   * Allow user to remove sysex response handlers.
	   *
	   * @param {number} commandByte The commandByte to disassociate with a handler
	   *                             previously set via `sysexResponse( commandByte, handler)`.
	   */

	  clearSysexResponse(commandByte) {
	    /* istanbul ignore else */
	    if (Firmata.SYSEX_RESPONSE[commandByte]) {
	      delete Firmata.SYSEX_RESPONSE[commandByte];
	    }
	  }

	  /**
	   * Allow user code to send arbitrary sysex messages
	   *
	   * @param {Array} message The message array is expected to be all necessary bytes
	   *                        between START_SYSEX and END_SYSEX (non-inclusive). It will
	   *                        be assumed that the data in the message array is
	   *                        already encoded as 2 7-bit bytes LSB first.
	   *
	   *
	   */

	  sysexCommand(message) {
	    if (!message || !message.length) {
	      throw new Error("Sysex Command cannot be empty");
	    }

	    writeToTransport(this, [START_SYSEX, ...message.slice(), END_SYSEX]);
	    return this;
	  }

	  /**
	   * Send SYSTEM_RESET to arduino
	   */

	  reset() {
	    writeToTransport(this, [SYSTEM_RESET]);
	  }

	  /**
	   * Firmata.isAcceptablePort Determines if a `port` object (from SerialPort.list())
	   * is a valid Arduino (or similar) device.
	   * @return {Boolean} true if port can be connected to by Firmata
	   */

	  static isAcceptablePort(port) {
	    let rport = /usb|acm|^com/i;

	    if (rport.test(port.path)) {
	      return true;
	    }

	    return false;
	  }

	  /**
	   * Firmata.requestPort(callback) Request an acceptable port to connect to.
	   * callback(error, port)
	   */

	  static requestPort(callback) {
	    if (!Transport || (Transport && typeof Transport.list !== "function")) {
	      process.nextTick(() => {
	        callback(new Error("No Transport provided"), null);
	      });
	      return;
	    }
	    Transport.list()
	      .then((ports) => {
	        const port = ports.find(
	          (port) => Firmata.isAcceptablePort(port) && port
	        );
	        if (port) {
	          callback(null, port);
	        } else {
	          callback(new Error("No Acceptable Port Found"), null);
	        }
	      })
	      .catch((error) => {
	        callback(error, null);
	      });
	  }

	  // Expose encode/decode for custom sysex messages
	  static encode(data) {
	    const encoded = [];
	    const length = data.length;

	    for (let i = 0; i < length; i++) {
	      encoded.push(data[i] & 0x7f, (data[i] >> 7) & 0x7f);
	    }

	    return encoded;
	  }

	  static decode(data) {
	    const decoded = [];

	    if (data.length % 2 !== 0) {
	      throw new Error(
	        "Firmata.decode(data) called with odd number of data bytes"
	      );
	    }

	    while (data.length) {
	      const lsb = data.shift();
	      const msb = data.shift();
	      decoded.push(lsb | (msb << 7));
	    }

	    return decoded;
	  }
	}

	// Prototype Compatibility Aliases
	Firmata.prototype.analogWrite = Firmata.prototype.pwmWrite;

	// Static Compatibility Aliases
	Firmata.Board = Firmata;
	Firmata.SYSEX_RESPONSE = SYSEX_RESPONSE;
	Firmata.MIDI_RESPONSE = MIDI_RESPONSE;

	// The following are used internally.

	/**
	 * writeToTransport Due to the non-blocking behaviour of transport write
	 *                   operations, dependent programs need a way to know
	 *                   when all writes are complete. Every write increments
	 *                   a `pending` value, when the write operation has
	 *                   completed, the `pending` value is decremented.
	 *
	 * @param  {Board} board An active Board instance
	 * @param  {Array} data  An array of 8 and 7 bit values that will be
	 *                       wrapped in a Buffer and written to the transport.
	 */
	function writeToTransport(board, data) {
	  board.pending++;
	  board.transport.write(Buffer.from(data), () => board.pending--);
	}

	function i2cRequest(board, bytes) {
	  const active = i2cActive.get(board);

	  if (!active) {
	    throw new Error(
	      "I2C is not enabled for this board. To enable, call the i2cConfig() method."
	    );
	  }

	  // Do not tamper with I2C_CONFIG messages
	  if (bytes[1] === I2C_REQUEST) {
	    const address = bytes[2];

	    // If no peripheral settings exist, make them.
	    if (!active[address]) {
	      active[address] = {
	        stopTX: true,
	      };
	    }

	    // READ (8) or CONTINUOUS_READ (16)
	    // value & 0b00011000
	    if (bytes[3] & I2C_READ_MASK) {
	      // Invert logic to accomodate default = true,
	      // which is actually stopTX = 0
	      bytes[3] |= Number(!active[address].stopTX) << 6;
	    }
	  }

	  writeToTransport(board, bytes);
	}

	function encode32BitSignedInteger(data) {
	  const negative = data < 0;

	  data = Math.abs(data);

	  const encoded = [
	    data & 0x7f,
	    (data >> 7) & 0x7f,
	    (data >> 14) & 0x7f,
	    (data >> 21) & 0x7f,
	    (data >> 28) & 0x07,
	  ];

	  if (negative) {
	    encoded[encoded.length - 1] |= 0x08;
	  }

	  return encoded;
	}

	function decode32BitSignedInteger(bytes) {
	  let result =
	    (bytes[0] & 0x7f) |
	    ((bytes[1] & 0x7f) << 7) |
	    ((bytes[2] & 0x7f) << 14) |
	    ((bytes[3] & 0x7f) << 21) |
	    ((bytes[4] & 0x07) << 28);

	  if (bytes[4] >> 3) {
	    result *= -1;
	  }

	  return result;
	}

	const MAX_SIGNIFICAND = Math.pow(2, 23);

	function encodeCustomFloat(input) {
	  const sign = input < 0 ? 1 : 0;

	  input = Math.abs(input);

	  const base10 = Math.floor(Math.log10(input));
	  // Shift decimal to start of significand
	  let exponent = 0 + base10;
	  input /= Math.pow(10, base10);

	  // Shift decimal to the right as far as we can
	  while (!Number.isInteger(input) && input < MAX_SIGNIFICAND) {
	    exponent -= 1;
	    input *= 10;
	  }

	  // Reduce precision if necessary
	  while (input > MAX_SIGNIFICAND) {
	    exponent += 1;
	    input /= 10;
	  }

	  input = Math.trunc(input);
	  exponent += 11;

	  const encoded = [
	    input & 0x7f,
	    (input >> 7) & 0x7f,
	    (input >> 14) & 0x7f,
	    ((input >> 21) & 0x03) | ((exponent & 0x0f) << 2) | ((sign & 0x01) << 6),
	  ];

	  return encoded;
	}

	function decodeCustomFloat(input) {
	  const exponent = ((input[3] >> 2) & 0x0f) - 11;
	  const sign = (input[3] >> 6) & 0x01;

	  let result =
	    input[0] | (input[1] << 7) | (input[2] << 14) | ((input[3] & 0x03) << 21);

	  if (sign) {
	    result *= -1;
	  }
	  return result * Math.pow(10, exponent);
	}

	/* istanbul ignore else */
	if (process.env.IS_TEST_MODE) {
	  let transport = null;
	  Firmata.test = {
	    i2cPeripheralSettings(board) {
	      return i2cActive.get(board);
	    },
	    get i2cActive() {
	      return i2cActive;
	    },
	    set transport(value) {
	      transport = Transport;
	      Transport = value;
	    },
	    restoreTransport() {
	      Transport = transport;
	    },
	    encode32BitSignedInteger,
	    decode32BitSignedInteger,
	    encodeCustomFloat,
	    decodeCustomFloat,
	    writeToTransport,

	    symbols: {
	      SYM_sendOneWireRequest,
	      SYM_sendOneWireSearch,
	    },
	  };
	}

	const bindTransport = function (transport) {
	  Transport = transport;
	  return Firmata;
	};

	bindTransport.Firmata = Firmata;

	firmataIo = bindTransport;
	return firmataIo;
}

var com_1;
var hasRequiredCom;

function requireCom () {
	if (hasRequiredCom) return com_1;
	hasRequiredCom = 1;

	const Emitter = EventEmitter$2;

	class TransportStub extends Emitter {
	  constructor(path /*, options, openCallback*/) {
	    super();
	    this.isOpen = true;
	    this.baudRate = 0;
	    this.path = path;
	  }

	  write(buffer) {
	    // Tests are written to work with arrays not buffers
	    // this shouldn't impact the data, just the container
	    // This also should be changed in future test rewrites
	    /* istanbul ignore else */
	    if (Buffer.isBuffer(buffer)) {
	      buffer = Array.from(buffer);
	    }

	    this.lastWrite = buffer;
	    this.emit("write", buffer);
	  }

	  static list() {
	    /* istanbul ignore next */
	    return Promise.resolve([]);
	  }
	}

	// This trash is necessary for stubbing with sinon.
	TransportStub.SerialPort = TransportStub;

	let com;
	let error;
	let SerialPort;

	try {
	  /* istanbul ignore else */
	  if (process.env.IS_TEST_MODE) {
	    com = TransportStub;
	  } else {
	    SerialPort = requireDist().SerialPort;
	    com = SerialPort;
	  }
	} catch (err) {
	  /* istanbul ignore next */
	  error = err;
	}

	/* istanbul ignore if */
	if (com == null) {
	  if (process.env.IS_TEST_MODE) {
	    com = TransportStub;
	  } else {
	    console.log("It looks like serialport didn't install properly.");
	    console.log(
	      "More information can be found here https://serialport.io/docs/guide-installation"
	    );
	    console.log(`The result of requiring the package is: ${SerialPort}`);
	    console.log(error);
	    throw "Missing serialport dependency";
	  }
	}

	com_1 = com;
	return com_1;
}

var firmata;
var hasRequiredFirmata;

function requireFirmata () {
	if (hasRequiredFirmata) return firmata;
	hasRequiredFirmata = 1;

	firmata = requireFirmataIo()(requireCom());
	return firmata;
}

/**
 * This atrocity is unfortunately necessary.
 * If any other approach can be found, patches
 * will gratefully be accepted.
 */

const sleep$1 = {
  micro(us) {
    const start = process.hrtime();
    let waited = 0;
    let delta;

    while (us > waited) {
      delta = process.hrtime(start);
      waited = (delta[0] * 1E9 + delta[1]) / 1000;
    }
  },
  milli(ms) {
    sleep$1.micro(ms * 1000);
  }
};

var sleep_1 = sleep$1;

var expander;
var hasRequiredExpander;

function requireExpander () {
	if (hasRequiredExpander) return expander;
	hasRequiredExpander = 1;
	const Board = requireBoard();
	const Emitter = emitter;
	const sleep = sleep_1;
	const Fn = fn;
	const priv = new Map();
	const active = new Map();

	class Base extends Emitter {
	  constructor() {
	    super();
	    this.HIGH = 1;
	    this.LOW = 0;
	    this.isReady = false;

	    this.MODES = {};
	    this.pins = [];
	    this.analogPins = [];
	  }
	}

	const Controllers = {
	  DEFAULT: {
	    initialize: {
	      value() {
	        throw new Error("Expander expects a valid controller");
	      }
	    }
	  },
	  MCP23017: {
	    ADDRESSES: {
	      value: [0x20]
	    },
	    REGISTER: {
	      value: {
	        // IO A
	        IODIRA: 0x00,
	        GPPUA: 0x0C,
	        GPIOA: 0x12,
	        OLATA: 0x14,
	        // IO B
	        IODIRB: 0x01,
	        GPPUB: 0x0D,
	        GPIOB: 0x13,
	        OLATB: 0x15,
	      }
	    },
	    initialize: {
	      value(options) {
	        const state = priv.get(this);

	        state.iodir = [0xff, 0xff];
	        state.olat = [0xff, 0xff];
	        state.gpio = [0xff, 0xff];
	        state.gppu = [0x00, 0x00];

	        this.address = options.address || this.ADDRESSES[0];
	        options.address = this.address;

	        this.io.i2cConfig(options);
	        this.io.i2cWrite(this.address, [this.REGISTER.IODIRA, state.iodir[this.REGISTER.IODIRA]]);
	        this.io.i2cWrite(this.address, [this.REGISTER.IODIRB, state.iodir[this.REGISTER.IODIRB]]);

	        Object.assign(this.MODES, this.io.MODES);

	        for (let i = 0; i < 16; i++) {
	          this.pins.push({
	            supportedModes: [
	              this.MODES.INPUT,
	              this.MODES.OUTPUT
	            ],
	            mode: 0,
	            value: 0,
	            report: 0,
	            analogChannel: 127
	          });

	          this.pinMode(i, this.MODES.OUTPUT);
	          this.digitalWrite(i, this.LOW);
	        }

	        this.name = "MCP23017";
	        this.isReady = true;

	        this.emit("connect");
	        this.emit("ready");
	      }
	    },
	    normalize: {
	      value(pin) {
	        return pin;
	      }
	    },
	    // 1.6.1 I/O DIRECTION REGISTER
	    pinMode: {
	      value(pin, mode) {
	        const state = priv.get(this);
	        const pinIndex = pin;
	        let port = 0;
	        let iodir = null;

	        if (pin < 8) {
	          port = this.REGISTER.IODIRA;
	        } else {
	          port = this.REGISTER.IODIRB;
	          pin -= 8;
	        }

	        iodir = state.iodir[port];

	        if (mode === this.io.MODES.INPUT) {
	          iodir |= 1 << pin;
	        } else {
	          iodir &= ~(1 << pin);
	        }

	        this.pins[pinIndex].mode = mode;
	        this.io.i2cWrite(this.address, [port, iodir]);

	        state.iodir[port] = iodir;
	      }
	    },
	    // 1.6.10 PORT REGISTER
	    digitalWrite: {
	      value(pin, value) {
	        const state = priv.get(this);
	        const pinIndex = pin;
	        let port = 0;
	        let gpio = 0;
	        // var olataddr = 0;
	        let gpioaddr = 0;

	        if (pin < 8) {
	          port = this.REGISTER.IODIRA;
	          // olataddr = this.REGISTER.OLATA;
	          gpioaddr = this.REGISTER.GPIOA;
	        } else {
	          port = this.REGISTER.IODIRB;
	          // olataddr = this.REGISTER.OLATB;
	          gpioaddr = this.REGISTER.GPIOB;
	          pin -= 8;
	        }

	        gpio = state.olat[port];

	        if (value === this.io.HIGH) {
	          gpio |= 1 << pin;
	        } else {
	          gpio &= ~(1 << pin);
	        }

	        this.pins[pinIndex].report = 0;
	        this.pins[pinIndex].value = value;
	        this.io.i2cWrite(this.address, [gpioaddr, gpio]);

	        state.olat[port] = gpio;
	        state.gpio[port] = gpio;
	      }
	    },
	    // 1.6.7 PULL-UP RESISTOR
	    // CONFIGURATION REGISTER
	    pullUp: {
	      value(pin, value) {
	        const state = priv.get(this);
	        let port = 0;
	        let gppu = 0;
	        let gppuaddr = 0;

	        if (pin < 8) {
	          port = this.REGISTER.IODIRA;
	          gppuaddr = this.REGISTER.GPPUA;
	        } else {
	          port = this.REGISTER.IODIRB;
	          gppuaddr = this.REGISTER.GPPUB;
	          pin -= 8;
	        }

	        gppu = state.gppu[port];

	        if (value === this.io.HIGH) {
	          gppu |= 1 << pin;
	        } else {
	          gppu &= ~(1 << pin);
	        }

	        this.io.i2cWrite(this.address, [gppuaddr, gppu]);

	        state.gppu[port] = gppu;
	      }
	    },
	    digitalRead: {
	      value(pin, callback) {
	        const pinIndex = pin;
	        let gpioaddr = 0;

	        if (pin < 8) {
	          gpioaddr = this.REGISTER.GPIOA;
	        } else {
	          gpioaddr = this.REGISTER.GPIOB;
	          pin -= 8;
	        }

	        this.pins[pinIndex].report = 1;

	        this.on(`digital-read-${pinIndex}`, callback);

	        this.io.i2cRead(this.address, gpioaddr, 1, data => {
	          const byte = data[0];
	          const value = byte >> pin & 0x01;

	          this.pins[pinIndex].value = value;

	          this.emit(`digital-read-${pinIndex}`, value);
	        });
	      }
	    },
	  },
	  MCP23008: {
	    ADDRESSES: {
	      value: [0x20]
	    },
	    REGISTER: {
	      value: {
	        IODIR: 0x00,
	        GPPU: 0x06,
	        GPIO: 0x09,
	        OLAT: 0x0A,
	      }
	    },
	    initialize: {
	      value(options) {
	        const state = priv.get(this);

	        state.iodir = [0xff];
	        state.olat = [0xff];
	        state.gpio = [0xff];
	        state.gppu = [0x00];

	        this.address = options.address || this.ADDRESSES[0];

	        options.address = this.address;

	        this.io.i2cConfig(options);
	        this.io.i2cWrite(this.address, [this.REGISTER.IODIR, state.iodir[this.REGISTER.IODIR]]);

	        Object.assign(this.MODES, this.io.MODES);

	        for (let i = 0; i < 8; i++) {
	          this.pins.push({
	            supportedModes: [
	              this.MODES.INPUT,
	              this.MODES.OUTPUT
	            ],
	            mode: 0,
	            value: 0,
	            report: 0,
	            analogChannel: 127
	          });

	          this.pinMode(i, this.MODES.OUTPUT);
	          this.digitalWrite(i, this.LOW);
	        }

	        this.name = "MCP23008";
	        this.isReady = true;

	        this.emit("connect");
	        this.emit("ready");
	      }
	    },
	    normalize: {
	      value(pin) {
	        return pin;
	      }
	    },
	    // 1.6.1 I/O DIRECTION REGISTER
	    pinMode: {
	      value(pin, mode) {
	        const state = priv.get(this);
	        const pinIndex = pin;
	        const port = this.REGISTER.IODIR;
	        let iodir = state.iodir[port];

	        if (mode === this.io.MODES.INPUT) {
	          iodir |= 1 << pin;
	        } else {
	          iodir &= ~(1 << pin);
	        }

	        this.pins[pinIndex].mode = mode;
	        this.io.i2cWrite(this.address, [port, iodir]);

	        state.iodir[port] = iodir;
	      }
	    },
	    // 1.6.10 PORT REGISTER
	    digitalWrite: {
	      value(pin, value) {
	        const state = priv.get(this);
	        const pinIndex = pin;
	        const port = this.REGISTER.IODIR;
	        const gpioaddr = this.REGISTER.GPIO;
	        let gpio = state.olat[port];

	        if (value === this.io.HIGH) {
	          gpio |= 1 << pin;
	        } else {
	          gpio &= ~(1 << pin);
	        }

	        this.pins[pinIndex].report = 0;
	        this.pins[pinIndex].value = value;
	        this.io.i2cWrite(this.address, [gpioaddr, gpio]);

	        state.olat[port] = gpio;
	        state.gpio[port] = gpio;
	      }
	    },
	    // 1.6.7 PULL-UP RESISTOR
	    // CONFIGURATION REGISTER
	    pullUp: {
	      value(pin, value) {
	        const state = priv.get(this);
	        const port = this.REGISTER.IODIR;
	        const gppuaddr = this.REGISTER.GPPU;
	        let gppu = state.gppu[port];

	        if (value === this.io.HIGH) {
	          gppu |= 1 << pin;
	        } else {
	          gppu &= ~(1 << pin);
	        }

	        this.io.i2cWrite(this.address, [gppuaddr, gppu]);

	        state.gppu[port] = gppu;
	      }
	    },
	    digitalRead: {
	      value(pin, callback) {
	        const pinIndex = pin;
	        const gpioaddr = this.REGISTER.GPIO;

	        this.pins[pinIndex].report = 1;

	        this.on(`digital-read-${pin}`, callback);

	        this.io.i2cRead(this.address, gpioaddr, 1, data => {
	          const byte = data[0];
	          const value = byte >> pin & 0x01;

	          this.pins[pinIndex].value = value;

	          this.emit(`digital-read-${pin}`, value);
	        });
	      }
	    },
	  },
	  PCF8574: {
	    ADDRESSES: {
	      value: [0x20]
	    },
	    REGISTER: {},
	    initialize: {
	      value(options) {
	        const state = priv.get(this);

	        state.port = 0x00;
	        state.ddr = 0x00;
	        state.pins = 0x00;

	        this.address = options.address || this.ADDRESSES[0];

	        options.address = this.address;
	        this.io.i2cConfig(options);

	        Object.assign(this.MODES, this.io.MODES);

	        for (let i = 0; i < 8; i++) {
	          this.pins.push({
	            supportedModes: [
	              this.MODES.INPUT,
	              this.MODES.OUTPUT
	            ],
	            mode: 1,
	            value: 0,
	            report: 0,
	            analogChannel: 127
	          });

	          this.pinMode(i, this.MODES.OUTPUT);
	          this.digitalWrite(i, this.LOW);
	        }

	        this.name = "PCF8574";
	        this.isReady = true;

	        this.emit("connect");
	        this.emit("ready");
	      }
	    },
	    normalize: {
	      value(pin) {
	        return pin;
	      }
	    },
	    pinMode: {
	      value(pin, mode) {
	        const state = priv.get(this);
	        const pinIndex = pin;
	        let port = state.port;
	        let ddr = state.ddr;
	        const pins = state.pins;

	        if (mode === this.MODES.INPUT) {
	          ddr &= ~(1 << pin);
	          port &= ~(1 << pin);
	        } else {
	          ddr |= (1 << pin);
	          port &= ~(1 << pin);
	        }

	        this.pins[pinIndex].mode = mode;

	        state.port = port;
	        state.ddr = ddr;

	        this.io.i2cWrite(this.address, (pins & ~ddr) | port);
	      }
	    },
	    digitalWrite: {
	      value(pin, value) {
	        const state = priv.get(this);
	        const pinIndex = pin;
	        let port = state.port;
	        const ddr = state.ddr;
	        const pins = state.pins;

	        if (value) {
	          port |= 1 << pin;
	        } else {
	          port &= ~(1 << pin);
	        }

	        this.pins[pinIndex].report = 0;
	        this.pins[pinIndex].value = value;

	        state.port = port;

	        this.io.i2cWrite(this.address, (pins & ~ddr) | port);
	      }
	    },
	    digitalRead: {
	      value(pin, callback) {
	        const state = priv.get(this);
	        const pinIndex = pin;

	        this.pins[pinIndex].report = 1;

	        this.on(`digital-read-${pin}`, callback);

	        this.io.i2cRead(this.address, 1, data => {
	          const byte = data[0];
	          const value = byte >> pin & 0x01;

	          state.pins = byte;

	          this.pins[pinIndex].value = value;

	          this.emit(`digital-read-${pin}`, value);
	        });
	      }
	    },
	  },
	  PCF8575: {
	    ADDRESSES: {
	      value: [0x20]
	    },
	    REGISTER: {},
	    initialize: {
	      value(options) {
	        const state = priv.get(this);

	        state.port = [0x00, 0x01];
	        state.gpio = [0x00, 0x00];

	        this.address = options.address || this.ADDRESSES[0];

	        options.address = this.address;
	        this.io.i2cConfig(options);

	        Object.assign(this.MODES, this.io.MODES);

	        for (let i = 0; i < 16; i++) {
	          this.pins.push({
	            supportedModes: [
	              this.MODES.INPUT,
	              this.MODES.OUTPUT
	            ],
	            mode: 1,
	            value: 0,
	            report: 0,
	            analogChannel: 127
	          });

	          this.pinMode(i, this.MODES.OUTPUT);
	          this.digitalWrite(i, this.LOW);
	        }

	        // Set all pins low on initialization
	        this.io.i2cWrite(this.address, state.gpio);

	        this.name = "PCF8575";
	        this.isReady = true;

	        this.emit("connect");
	        this.emit("ready");
	      }
	    },
	    normalize: {
	      value(pin) {
	        return pin;
	      }
	    },
	    pinMode: {
	      value(pin, mode) {
	        const pinIndex = pin;
	        this.pins[pinIndex].mode = mode;
	      }
	    },
	    digitalWrite: {
	      value(pin, value) {
	        const state = priv.get(this);
	        const pinIndex = pin;
	        let port;

	        if (pin < 8) {
	          port = 0;
	        } else {
	          port = 1;
	          pin -= 8;
	        }

	        if (value === this.io.HIGH) {
	          state.gpio[port] |= 1 << pin;
	        } else {
	          state.gpio[port] &= ~(1 << pin);
	        }

	        this.pins[pinIndex].report = 0;
	        this.pins[pinIndex].value = value;

	        this.io.i2cWrite(this.address, state.gpio);
	      }
	    },
	    digitalRead: {
	      value(pin, callback) {
	        const pinIndex = pin;
	        let port;

	        if (pin < 8) {
	          port = 0;
	        } else {
	          port = 1;
	          pin -= 8;
	        }

	        this.pins[pinIndex].report = 1;

	        this.on(`digital-read-${pin}`, callback);

	        this.io.i2cRead(this.address, 2, data => {
	          const byte = data[port];
	          const value = byte >> pin & 0x01;

	          this.pins[pinIndex].value = value;

	          this.emit(`digital-read-${pin}`, value);
	        });
	      }
	    },
	  },
	  PCA9685: {
	    ADDRESSES: {
	      value: [0x40]
	    },
	    REGISTER: {
	      value: {
	        MODE1: 0x00,
	        PRESCALE: 0xFE,
	        BASE: 0x06
	      }
	    },
	    initialize: {
	      value(options) {
	        const state = priv.get(this);

	        // 7.3.5 PWM frequency PRE_SCALE
	        //
	        // These number correspond to:
	        // min PWM frequency: 24 Hz
	        // max PWM frequency: 1526 Hz
	        state.frequency = Fn.constrain(options.frequency || 1526, 24, 1526);

	        this.address = options.address || this.ADDRESSES[0];
	        this.pwmRange = options.pwmRange || [0, 4095];

	        Object.defineProperties(this, {
	          prescale: {
	            get() {
	              // PCA9685 has an on-board 25MHz clock source

	              // 7.3.5 PWM frequency PRE_SCALE
	              return Math.round(25000000 / (4096 * state.frequency)) - 1;
	            }
	          },
	          frequency: {
	            get() {
	              return state.frequency;
	            }
	          }
	        });


	        options.address = this.address;

	        this.io.i2cConfig(options);

	        // Reset
	        this.io.i2cWriteReg(this.address, this.REGISTER.MODE1, 0x00);
	        // Sleep
	        this.io.i2cWriteReg(this.address, this.REGISTER.MODE1, 0x10);
	        // Set prescalar
	        this.io.i2cWriteReg(this.address, this.REGISTER.PRESCALE, this.prescale);
	        // Wake up
	        this.io.i2cWriteReg(this.address, this.REGISTER.MODE1, 0x00);
	        // Wait 5 microseconds for restart
	        sleep.micro(5);
	        // Auto-increment
	        this.io.i2cWriteReg(this.address, this.REGISTER.MODE1, 0xa0);

	        Object.assign(this.MODES, this.io.MODES);

	        for (let i = 0; i < 16; i++) {
	          this.pins.push({
	            supportedModes: [
	              this.MODES.OUTPUT,
	              this.MODES.PWM,
	              this.MODES.SERVO,
	            ],
	            mode: 0,
	            value: 0,
	            report: 0,
	            analogChannel: 127
	          });

	          this.pinMode(i, this.MODES.OUTPUT);
	          this.digitalWrite(i, this.LOW);
	        }

	        this.name = "PCA9685";
	        this.isReady = true;

	        this.emit("connect");
	        this.emit("ready");
	      }
	    },
	    normalize: {
	      value(pin) {
	        return this.io.name.includes("Tessel 2") ? pin - 1 : pin;
	      }
	    },
	    pinMode: {
	      value(pin, mode) {
	        if (this.pins[pin] === undefined) {
	          throw new RangeError(`Invalid PCA9685 pin: ${pin}`);
	        }
	        this.pins[pin].mode = mode;
	      }
	    },
	    digitalWrite: {
	      value(pin, value) {
	        this.pwmWrite(pin, value ? 255 : 0);
	      }
	    },
	    analogWrite: {
	      value(pin, value) {
	        this.pwmWrite(pin, value);
	      }
	    },
	    servoWrite: {
	      value(pin, value) {

	        let off;

	        if (value < 544) {
	          value = Fn.constrain(value, 0, 180);
	          off = Fn.map(value, 0, 180, this.pwmRange[0] / 4, this.pwmRange[1] / 4);
	        } else {
	          off = value / 4;
	        }

	        off |= 0;

	        this.io.i2cWrite(this.address, [
	          this.REGISTER.BASE + 4 * pin,
	          0, 0,
	          off, off >> 8
	        ]);
	      }
	    },
	    pwmWrite: {
	      value(pin, value) {

	        if (this.pins[pin] === undefined) {
	          throw new RangeError(`Invalid PCA9685 pin: ${pin}`);
	        }

	        value = Fn.constrain(value, 0, 255);

	        let on = 0;
	        let off = this.pwmRange[1] * value / 255;

	        if (value === 0) {
	          // Special value for signal fully off.
	          on = 0;
	          off = 4096;
	        }

	        if (value === 255) {
	          // Special value for signal fully on.
	          on = 4096;
	          off = 0;
	        }

	        this.io.i2cWrite(this.address, [
	          this.REGISTER.BASE + 4 * pin,
	          on, on >> 8,
	          off, off >> 8
	        ]);

	        this.pins[pin].value = value;
	      }
	    }
	  },
	  PCF8591: {
	    ADDRESSES: {
	      value: [0x48]
	    },
	    REGISTER: {},
	    initialize: {
	      value(options) {
	        const state = priv.get(this);

	        state.control = 0x45;
	        state.reading = false;

	        this.address = options.address || this.ADDRESSES[0];

	        options.address = this.address;
	        this.io.i2cConfig(options);

	        Object.assign(this.MODES, this.io.MODES);

	        for (let i = 0; i < 4; i++) {
	          this.pins.push({
	            supportedModes: [
	              this.MODES.ANALOG
	            ],
	            mode: 1,
	            value: 0,
	            report: 0,
	            analogChannel: i
	          });
	        }

	        this.analogPins.push(0, 1, 2, 3);

	        this.io.i2cWrite(this.address, state.control);

	        this.name = "PCF8591";
	        this.isReady = true;

	        this.emit("connect");
	        this.emit("ready");
	      }
	    },
	    normalize: {
	      value(pin) {
	        if (typeof pin === "string" && pin[0] === "A") {
	          return +pin.slice(1);
	        }
	        return pin;
	      }
	    },
	    pinMode: {
	      value(pin, mode) {
	        this.pins[pin].mode = mode;
	      }
	    },
	    analogRead: {
	      value(pin, callback) {
	        const state = priv.get(this);
	        const pinIndex = pin;

	        this.pins[pinIndex].report = 1;

	        this.on(`analog-read-${pin}`, callback);

	        // Since this operation will read all 4 pins,
	        // it only needs to be initiated once.
	        if (!state.reading) {
	          state.reading = true;

	          this.io.i2cRead(this.address, 4, data => {
	            let value;
	            for (let i = 0; i < 4; i++) {
	              value = data[i] << 2;
	              this.pins[i].value = value;

	              if (this.pins[i].report) {
	                this.emit(`analog-read-${i}`, value);
	              }
	            }
	          });
	        }
	      }
	    },
	  },
	  MUXSHIELD2: {
	    initialize: {
	      value() {
	        const state = priv.get(this);

	        // _S[\d]   (Digital: 2, 4, 6, 7)
	        state.select = [2, 4, 6, 7];
	        // _IOS[\d] (Digital: 10, 11, 12)
	        state.ios = [null, 10, 11, 12];
	        // _IO[\d]  (Analog In: "A0", "A1", "A2")
	        state.io = [null, 14, 15, 16];
	        state.aio = [null, 0, 1, 2];

	        state.outMode = 8;
	        state.pinMap = {};
	        state.rowReading = [false, false, false];
	        state.rowMode = [null, null, null];
	        // Each rowValue is a single uint16
	        state.rowValues = [0, 0, 0];

	        Object.assign(this.MODES, {
	          INPUT: 0,
	          OUTPUT: 1,
	          ANALOG: 2,
	        });

	        this.io.pinMode(state.select[0], this.MODES.OUTPUT);
	        this.io.pinMode(state.select[1], this.MODES.OUTPUT);
	        this.io.pinMode(state.select[2], this.MODES.OUTPUT);
	        this.io.pinMode(state.select[3], this.MODES.OUTPUT);

	        this.io.pinMode(state.outMode, this.MODES.OUTPUT);
	        this.io.digitalWrite(state.outMode, this.LOW);

	        this.io.pinMode(state.ios[1], this.MODES.OUTPUT);
	        this.io.pinMode(state.ios[2], this.MODES.OUTPUT);
	        this.io.pinMode(state.ios[3], this.MODES.OUTPUT);

	        let row = 1;
	        let mask = 16;
	        let index = 0;

	        for (let i = 0; i < 48; i++) {
	          const band = i & mask;

	          if (band === mask) {
	            row++;
	            mask *= 2;
	            index = 0;
	          }

	          state.pinMap[`IO${row}-${index}`] = i;

	          this.pins.push({
	            row,
	            index,
	            supportedModes: [
	              this.MODES.INPUT,
	              this.MODES.OUTPUT,
	              this.MODES.ANALOG,
	            ],
	            mode: 1,
	            value: 0,
	            report: 0,
	            analogChannel: i
	          });

	          this.analogPins.push(i);

	          // TODO: Not sure about this?
	          // this.io.pinMode(i, this.MODES.OUTPUT);
	          // this.io.digitalWrite(i, this.LOW);

	          index++;
	        }

	        this.name = "MUXSHIELD2";
	        this.isReady = true;

	        this.emit("connect");
	        this.emit("ready");
	      }
	    },
	    normalize: {
	      value(pin) {
	        return pin;
	      }
	    },
	    pinMode: {
	      value(pin, mode) {
	        const state = priv.get(this);
	        const pinIndex = state.pinMap[pin];

	        if (pinIndex === undefined) {
	          throw new Error(`MUXSHIELD2: Invalid Pin number or name: ${pin}`);
	        }

	        const row = this.pins[pinIndex].row;
	        const rowModeIndex = row - 1;
	        const rowMode = state.rowMode[rowModeIndex];

	        if (rowMode === mode) {
	          return this;
	        }

	        if (rowMode !== null && rowMode !== mode) {
	          throw new Error("MUXSHIELD2: Cannot set mixed modes per IO row.");
	        }

	        state.rowMode[rowModeIndex] = mode;

	        // MUXSHIELD2 Disallows mixing modes per row.
	        // Once a mode is set for a given pin in a given row,
	        // set all the pins in that row to the same mode.
	        for (let i = 0; i < 16; i++) {
	          this.pins[rowModeIndex + i].mode = mode;
	        }

	        const IO = state.io[row];
	        const IOS = state.ios[row];

	        if (mode === this.MODES.INPUT) {
	          // Read an analog input as digital
	          this.io.pinMode(IO, this.MODES.INPUT);
	          // this.io.digitalWrite(IOS, this.LOW);
	        }

	        if (mode === this.MODES.OUTPUT) {
	          this.io.pinMode(IO, this.MODES.OUTPUT);
	          this.io.digitalWrite(IOS, this.HIGH);
	        }
	      }
	    },
	    digitalWrite: {
	      value(pin, value) {
	        const state = priv.get(this);
	        const pinIndex = state.pinMap[pin];

	        if (pinIndex === undefined) {
	          throw new Error(`MUXSHIELD2: Invalid Pin number or name: ${pin}`);
	        }

	        const row = this.pins[pinIndex].row;
	        const rowValueIndex = row - 1;
	        let rowValue = state.rowValues[rowValueIndex];

	        const ioPin = row - 1;
	        const offset = ioPin * 16;
	        const channel = pinIndex - offset;

	        if (value) {
	          rowValue |= 1 << channel;
	        } else {
	          rowValue &= ~(1 << channel);
	        }

	        this.io.digitalWrite(state.select[3], this.LOW);
	        this.io.digitalWrite(state.outMode, this.HIGH);

	        const S = state.select[row - 1];
	        const IO = state.io[row];

	        for (let i = 15; i >= 0; i--) {
	          this.io.digitalWrite(S, this.LOW);
	          this.io.digitalWrite(IO, (rowValue >> i) & 1);
	          this.io.digitalWrite(S, this.HIGH);
	        }

	        this.io.digitalWrite(state.select[3], this.HIGH);
	        this.io.digitalWrite(state.outMode, this.LOW);

	        this.pins[pinIndex].value = value;

	        state.rowValues[rowValueIndex] = rowValue;
	      }
	    },
	    digitalRead: {
	      value(pin, callback) {
	        this.ioRead("digital", pin, callback);
	      }
	    },
	    analogRead: {
	      value(pin, callback) {
	        this.ioRead("analog", pin, callback);
	      }
	    },
	    ioRead: {
	      value(type, pin, callback) {
	        const state = priv.get(this);
	        const pinIndex = state.pinMap[pin];

	        if (pinIndex === undefined) {
	          throw new Error(`MUXSHIELD2: Invalid Pin number or name: ${pin}`);
	        }

	        this.on(`${type}-read-${pinIndex}`, callback);

	        const isAnalog = type === "analog" ? true : false;
	        const row = this.pins[pinIndex].row;
	        const rowReadingIndex = row - 1;
	        const offset = rowReadingIndex * 16;
	        const channel = pinIndex - offset;

	        this.pins[pinIndex].report = 1;
	        this.pins[pinIndex].channel = channel;
	        this.pins[pinIndex].ioPin = isAnalog ? rowReadingIndex : rowReadingIndex + 14;

	        const nextPinIndex = () => {
	          const startAt = nextPinIndex.lastPinIndex + 1;

	          for (let i = startAt; i < this.pins.length; i++) {
	            if (this.pins[i].report === 1) {
	              nextPinIndex.lastPinIndex = i;
	              return nextPinIndex.lastPinIndex;
	            }
	          }

	          nextPinIndex.lastPinIndex = -1;

	          return nextPinIndex();
	        };

	        nextPinIndex.lastPinIndex = -1;

	        const handler = value => {
	          const pinIndex = nextPinIndex.lastPinIndex;
	          const pin = this.pins[pinIndex];

	          this.emit(`${type}-read-${pinIndex}`, value);

	          this.io.removeListener(`${type}-read-${pin.ioPin}`, handler);

	          setTimeout(read, 10);
	        };

	        var read = () => {
	          const pinIndex = nextPinIndex();
	          const pin = this.pins[pinIndex];

	          this.select(pin.channel);

	          if (isAnalog) {
	            this.io.pinMode(pin.ioPin, this.io.MODES.ANALOG);
	            this.io.analogRead(pin.ioPin, handler);
	          } else {
	            this.io.digitalRead(pin.ioPin, handler);
	          }
	        };

	        if (!state.rowReading[rowReadingIndex]) {
	          state.rowReading[rowReadingIndex] = true;
	          read();
	        }
	      }
	    },


	    select: {
	      value(channel) {
	        const state = priv.get(this);
	        this.io.digitalWrite(state.outMode, this.LOW);
	        this.io.digitalWrite(state.select[0], (channel & 1));
	        this.io.digitalWrite(state.select[1], (channel & 3) >> 1);
	        this.io.digitalWrite(state.select[2], (channel & 7) >> 2);
	        this.io.digitalWrite(state.select[3], (channel & 15) >> 3);
	      }
	    }
	  },

	  GROVEPI: {
	    ADDRESSES: {
	      value: [0x04]
	    },
	    REGISTER: {},
	    COMMANDS: {
	      value: {
	        DIGITAL_READ: 0x01,
	        DIGITAL_WRITE: 0x02,
	        ANALOG_READ: 0x03,
	        ANALOG_WRITE: 0x04,
	        PIN_MODE: 0x05,
	        PING_READ: 0x07,
	      }
	    },
	    initialize: {
	      value(options) {
	        const state = priv.get(this);

	        state.isReading = false;
	        state.pinMap = {
	          D2: 2,
	          D3: 3,
	          D4: 4,
	          D5: 5,
	          D6: 6,
	          D7: 7,
	          D8: 8,
	          A0: 14,
	          A1: 15,
	          A2: 16,
	        };

	        // Override the relevant default "isType" methods
	        this.isPwm = name => {
	          const number = typeof name === "number" ? name : parseInt(name[1]);
	          return number === 3 || number === 5 || number === 6;
	        };

	        this.address = options.address || this.ADDRESSES[0];
	        options.address = this.address;

	        this.io.i2cConfig(options);

	        Object.assign(this.MODES, this.io.MODES);

	        let analogChannel;

	        for (let i = 0; i < 17; i++) {
	          analogChannel = 127;

	          if (i <= 1 || (i >= 9 && i < 14)) {
	            // There are no connections for:
	            // O, 1, 9, 10, 11, 12, 13
	            this.pins.push({
	              supportedModes: [],
	              mode: 0,
	              value: 0,
	              report: 0,
	              analogChannel
	            });
	          } else {

	            this.pins.push({
	              supportedModes: [
	                this.MODES.INPUT,
	                this.MODES.OUTPUT,
	              ],
	              mode: 0,
	              value: 0,
	              report: 0,
	              analogChannel
	            });

	            // Digital pins with PWM Support
	            // D3, D5, D6
	            if (this.isPwm(i)) {
	              this.pins[i].supportedModes.push(
	                this.MODES.PWM
	              );
	            }

	            if (i >= 14 && i <= 17) {
	              // A0 = 0 = 14
	              // A1 = 1 = 15
	              // A2 = 2 = 16
	              //
	              // 14 is the analog offset
	              this.pins[i].analogChannel = i - 14;

	              // Add ANALOG "read" mode
	              this.pins[i].supportedModes.push(
	                this.MODES.ANALOG
	              );

	              this.analogPins.push(i);

	              // Default all analog IO pins to
	              // ANALOG "read"
	              this.pinMode(`A${this.pins[i].analogChannel}`, this.MODES.ANALOG);
	            } else {
	              // Default all digital IO pins to
	              // OUTPUT and LOW
	              this.pinMode(`D${i}`, this.MODES.OUTPUT);
	              this.digitalWrite(`D${i}`, this.LOW);
	            }
	          }
	        }

	        this.name = "GROVEPI";
	        this.isReady = true;

	        this.emit("connect");
	        this.emit("ready");
	      }
	    },
	    normalize: {
	      value(pin) {
	        return pin;
	      }
	    },

	    pinMode: {
	      value(pin, mode) {
	        const state = priv.get(this);
	        const pinIndex = state.pinMap[pin];

	        if (mode === this.io.MODES.INPUT ||
	          mode === this.io.MODES.ANALOG) {
	          this.pins[pinIndex].mode = 0;
	        } else {
	          this.pins[pinIndex].mode = 1;
	        }

	        this.io.i2cWrite(
	          this.address, [
	            this.COMMANDS.PIN_MODE,
	            pinIndex,
	            this.pins[pinIndex].mode,
	            0
	          ]
	        );
	      }
	    },

	    digitalWrite: {
	      value(pin, value) {
	        const state = priv.get(this);
	        const pinIndex = state.pinMap[pin];

	        // Any truthy value is converted to HIGH (1)
	        value = value ? 1 : 0;

	        this.io.i2cWrite(
	          this.address, [
	            this.COMMANDS.DIGITAL_WRITE,
	            pinIndex,
	            value,
	            0
	          ]
	        );

	        this.pins[pinIndex].value = value;
	      }
	    },

	    ioRead: {
	      value(pin, type, callback) {
	        const state = priv.get(this);
	        const pinIndex = state.pinMap[pin];
	        const isAnalog = type === "analog";
	        const length = isAnalog ? 3 : 1;
	        const command = isAnalog ? this.COMMANDS.ANALOG_READ : this.COMMANDS.DIGITAL_READ;

	        this.on(`${type}-read-${pinIndex}`, callback);

	        this.pins[pinIndex].report = 1;
	        this.pins[pinIndex].command = command;
	        this.pins[pinIndex].type = type;
	        this.pins[pinIndex].length = length;

	        const nextPinIndex = () => {
	          const startAt = nextPinIndex.lastPinIndex + 1;

	          for (let i = startAt; i < this.pins.length; i++) {
	            if (this.pins[i].report === 1) {
	              nextPinIndex.lastPinIndex = i;
	              return nextPinIndex.lastPinIndex;
	            }
	          }

	          nextPinIndex.lastPinIndex = -1;

	          return nextPinIndex();
	        };

	        nextPinIndex.lastPinIndex = -1;

	        const handler = (pinIndex, value) => {
	          const pin = this.pins[pinIndex];
	          let canEmit = true;

	          if (pin.type === "digital" && this.pins[pinIndex].value === value) {
	            canEmit = false;
	          }

	          this.pins[pinIndex].value = value;

	          if (canEmit) {
	            this.emit(`${pin.type}-read-${pinIndex}`, value);
	          }

	          setTimeout(read, 1);
	        };

	        var read = () => {
	          const pinIndex = nextPinIndex();
	          const pin = this.pins[pinIndex];
	          const isAnalog = pin.type === "analog";

	          this.io.i2cWrite(this.address, [pin.command, pinIndex, 0, 0]);
	          this.io.i2cReadOnce(this.address, pin.length, data => {
	            let value;

	            if (isAnalog) {
	              value = (data[1] << 8) + data[2];
	            } else {
	              value = data[0];
	            }
	            handler(pinIndex, value);
	          });
	        };

	        if (!state.isReading) {
	          state.isReading = true;
	          read();
	        }
	      }
	    },

	    digitalRead: {
	      value(pin, callback) {
	        this.ioRead(pin, "digital", callback);
	      },
	    },
	    analogRead: {
	      value(pin, callback) {
	        this.ioRead(pin, "analog", callback);
	      },
	    },
	    pingRead: {
	      value({pin}, callback) {
	        const state = priv.get(this);
	        const pinIndex = state.pinMap[pin];

	        this.io.i2cWrite(
	          this.address, [
	            this.COMMANDS.PING_READ,
	            pinIndex,
	            0, 0
	          ]
	        );

	        setTimeout(() => {
	          this.once(`ping-read-${pin}`, callback);

	          this.io.i2cReadOnce(this.address, 3, data => {
	            // The GrovePi firmware sends this value in CM
	            // so the value must be converted back to duration.
	            const value = Math.round(((data[1] << 8) + data[2]) * 29 * 2);

	            this.pins[pinIndex].value = value;
	            this.emit(`ping-read-${pin}`, value);
	          });
	        }, 200);
	      },
	    },
	    analogWrite: {
	      value(pin, value) {
	        this.pwmWrite(pin, value);
	      }
	    },
	    pwmWrite: {
	      writable: true,
	      value(pin, value) {
	        const state = priv.get(this);
	        const pinIndex = state.pinMap[pin];

	        value = Fn.constrain(value, 0, 255);

	        this.io.i2cWrite(
	          this.address, [
	            this.COMMANDS.ANALOG_WRITE,
	            pinIndex,
	            value,
	            0
	          ]
	        );

	        this.pins[pinIndex].value = value;
	      }
	    }
	  },
	  "74HC595": {
	    initialize: {
	      value({pins}) {
	        const state = priv.get(this);

	        if (!pins.data) {
	          throw new Error("Expected pins.data");
	        }

	        if (!pins.clock) {
	          throw new Error("Expected pins.clock");
	        }

	        if (!pins.latch) {
	          throw new Error("Expected pins.latch");
	        }

	        state.data = pins.data;
	        state.clock = pins.clock;
	        state.latch = pins.latch;
	        state.value = 0x00;

	        Object.assign(this.MODES, this.io.MODES);

	        // Reset pins property to empty array.
	        this.pins = [];

	        for (let i = 0; i < 8; i++) {
	          this.pins.push({
	            supportedModes: [
	              this.MODES.OUTPUT
	            ],
	            mode: 1,
	            value: 0,
	            report: 0,
	            analogChannel: 127
	          });
	        }

	        this.portWrite(0, state.value);

	        this.name = "74HC595";
	        this.isReady = true;

	        this.emit("connect");
	        this.emit("ready");
	      }
	    },
	    normalize: {
	      value(pin) {
	        return pin;
	      }
	    },
	    pinMode: {
	      value(pin, mode) {
	        this.pins[pin].mode = mode;
	      }
	    },
	    digitalWrite: {
	      value(pin, value) {
	        const state = priv.get(this);

	        if (value) {
	          state.value |= 1 << pin;
	        } else {
	          state.value &= ~(1 << pin);
	        }

	        this.pins[pin].value = value;

	        this.portWrite(0, state.value);
	      }
	    },
	    portWrite: {
	      writable: true,
	      configurable: true,
	      value(port, value) {
	        const state = priv.get(this);

	        state.value = value;

	        this.board.digitalWrite(state.latch, this.io.LOW);
	        this.board.shiftOut(state.data, state.clock, true, state.value);
	        this.board.digitalWrite(state.latch, this.io.HIGH);

	        for (let i = 0; i < 8; i++) {
	          this.pins[i].value = (state.value >> i) & 1;
	        }
	      }
	    },
	  },
	  CD74HC4067: {
	    /*
	    | Address 1 (D9) |  Address 0 (D8) | Address |
	    | -------------- |  -------------- | ------- |
	    | 0              |  0              | 0x0A    |
	    | 0              |  1              | 0x0B    |
	    | 1              |  0              | 0x0C    |
	    | 1              |  1              | 0x0D    |
	    */
	    ADDRESSES: {
	      value: [0x0A, 0x0B, 0x0C, 0x0D]
	    },
	    REGISTER: {},
	    initialize: {
	      value(options) {
	        const state = priv.get(this);

	        state.reading = false;

	        this.address = options.address || this.ADDRESSES[0];

	        options.address = this.address;
	        this.io.i2cConfig(options);

	        Object.assign(this.MODES, this.io.MODES);

	        for (let i = 0; i < 16; i++) {
	          this.pins.push({
	            supportedModes: [
	              this.MODES.ANALOG
	            ],
	            mode: 1,
	            value: 0,
	            report: 0,
	            analogChannel: i
	          });
	          this.analogPins.push(i);
	        }

	        this.name = "CD74HC4067";
	        this.isReady = true;

	        this.emit("connect");
	        this.emit("ready");
	      }
	    },
	    normalize: {
	      value(pin) {
	        if (typeof pin === "string" && pin[0] === "A") {
	          return +pin.slice(1);
	        }
	        return pin;
	      }
	    },
	    pinMode: {
	      value(pin, mode) {
	        this.pins[pin].mode = mode;
	      }
	    },
	    analogRead: {
	      value(pin, callback) {
	        const state = priv.get(this);
	        const pinIndex = pin;

	        this.pins[pinIndex].report = 1;

	        this.on(`analog-read-${pin}`, callback);

	        this.io.i2cWrite(this.address, pinIndex, 1);

	        // Since this operation will read all 4 pins,
	        // it only needs to be initiated once.
	        if (!state.reading) {
	          state.reading = true;

	          this.io.i2cRead(this.address, 32, data => {
	            let value;
	            for (let i = 0; i < 16; i++) {
	              const index = i * 2;

	              value = (data[index] << 8) + data[index + 1];

	              this.pins[i].value = value;

	              if (this.pins[i].report) {
	                this.emit(`analog-read-${i}`, value);
	              }
	            }
	          });
	        }
	      }
	    },
	  },

	  LIS3DH: {
	    ADDRESSES: {
	      value: [0x18]
	    },
	    REGISTER: {
	      value: {
	        // Page 26
	        // Table 17. Register address map
	        //
	        // NAME:  BYTE
	        OUT_ADC1_L: 0x08,
	        OUT_X_L: 0x28,
	        CTRL_REG1: 0x20,
	        CTRL_REG2: 0x21,
	        CTRL_REG3: 0x22,
	        CTRL_REG4: 0x23,
	        CTRL_REG5: 0x24,

	        TEMP_CFG_REG: 0x1F,
	      },
	    },
	    initialize: {
	      value(options) {
	        const state = priv.get(this);

	        state.reading = false;

	        this.address = options.address || this.ADDRESSES[0];

	        options.address = this.address;

	        this.io.i2cConfig(options);


	        // Page 29
	        // 8.8 CTRL_REG1
	        // Table 24. CTRL_REG1 register
	        //
	        // ODR3 ODR2 ODR1 ODR0 LPen Zen Yen Xen
	        //
	        //
	        // Enable Axis
	        // 0b00000111
	        //        ZYX
	        //
	        let ctrl1 = 0x07; // 0b00000111
	        //
	        // Date Rate
	        // Table 26. Data rate configuration
	        //
	        // ODR3 ODR2 ODR1 ODR0 Power mode selection
	        // 0 0 0 1 = 1 Hz
	        // 0 0 1 0 = 10 Hz
	        // 0 0 1 1 = 25 Hz
	        // 0 1 0 0 = 50 Hz
	        // 0 1 0 1 = 100 Hz
	        // 0 1 1 0 = 200 Hz
	        // 0 1 1 1 = 400 Hz
	        //
	        // 0b0111 << 4 = 0b01110000
	        //
	        ctrl1  = (ctrl1 & ~(0xF0)) | (0x07 << 4);

	        // ctrl1 = 0b01110111
	        // 0b01110000 = 0x70 = 112
	        this.io.i2cWrite(this.address, this.REGISTER.CTRL_REG1, ctrl1);

	        // Page 31
	        // 8.11 CTRL_REG4
	        //
	        // Table 32. CTRL_REG4 register
	        //
	        // BDU BLE FS1 FS0 HR ST1 ST0 SIM
	        //
	        // BDU  Block data update. Default value: 0
	        //      0: Continuous update
	        //      1: Updated when MSB and LSB read
	        //
	        // HR   High resolution output mode: Default value: 0
	        //      0: Disable
	        //      1: Enable
	        //
	        // Setting BDU and HR:
	        // 0b1---1---
	        //
	        // 0b10001000 = 0x88 = 136
	        //
	        this.io.i2cWrite(this.address, this.REGISTER.CTRL_REG4, 0x88);
	        //
	        // Page 31
	        // 8.10 CTRL_REG3
	        //
	        // I1_DRDY1 -> ON
	        //
	        // 0b00010000 = 0x10 = 16
	        this.io.i2cWrite(this.address, this.REGISTER.CTRL_REG3, 0x10);

	        Object.assign(this.MODES, this.io.MODES);

	        for (let i = 0; i < 4; i++) {
	          if (i === 0) {
	            this.pins.push({
	              supportedModes: [],
	              mode: 0,
	              value: 0,
	              report: 0,
	              analogChannel: 0x7F
	            });
	          } else {
	            this.pins.push({
	              supportedModes: [ this.MODES.ANALOG ],
	              mode: 1,
	              value: 0,
	              report: 0,
	              analogChannel: i
	            });
	            this.analogPins.push(i);
	          }
	        }

	        this.name = "LIS3DH";
	        this.isReady = true;

	        this.emit("connect");
	        this.emit("ready");
	      },
	    },
	    normalize: {
	      value(pin) {
	        if (typeof pin === "string" && pin[0] === "A") {
	          return +pin.slice(1);
	        }
	        return pin;
	      },
	    },
	    pinMode: {
	      value(pin, mode) {
	        this.pins[pin].mode = mode;
	      },
	    },
	    analogRead: {
	      value(pin, callback) {
	        const state = priv.get(this);
	        const pinIndex = pin;

	        this.pins[pinIndex].report = 1;

	        this.on(`analog-read-${pin}`, callback);

	        // Since this operation will read all 3 ADC pins,
	        // it only needs to be initiated once.
	        if (!state.reading) {
	          state.reading = true;

	          // Page 29
	          // 8.7 TEMP_CFG_REG (1Fh)
	          // Table 23. TEMP_CFG_REG description
	          //
	          // ADC_PD TEMP_EN 0 0 0 0 0 0
	          //
	          // 0b10000000 = 128 = 0x80
	          //
	          this.io.i2cWrite(this.address, this.REGISTER.TEMP_CFG_REG, 0x80);

	          // Page 23, 24, 25
	          // bit 1: MS bit. When 0, the address remains unchanged in multiple read/write commands.
	          // When 1, the address is auto incremented in multiple read/write commands.
	          this.io.i2cRead(this.address, this.REGISTER.OUT_ADC1_L | 0x80, 6, data => {
	            // V range is 900

	            // First, scale the value to range that these ADCs support, which is
	            //
	            // 1.8V - 0.9V
	            //
	            // Then, scale that value to the full 10-bit 0-3.3V range
	            //
	            this.pins[1].value = Fn.scale(Fn.int16(data[1], data[0]), -32512, 32512, 1023, 0);
	            this.pins[2].value = Fn.scale(Fn.int16(data[3], data[2]), -32512, 32512, 1023, 0);
	            this.pins[3].value = Fn.scale(Fn.int16(data[5], data[4]), -32512, 32512, 1023, 0);

	            for (let i = 1; i < 4; i++) {
	              if (this.pins[i].report) {
	                this.emit(`analog-read-${i}`, this.pins[i].value);
	              }
	            }
	          });
	        }
	      },
	    },
	    i2cConfig: {
	      value(...args) {
	        return this.io.i2cConfig.apply(this.io, args);
	      },
	    },
	    i2cWrite: {
	      value(...args) {
	        return this.io.i2cWrite.apply(this.io, args);
	      },
	    },
	    i2cWriteReg: {
	      value(...args) {
	        return this.io.i2cWriteReg.apply(this.io, args);
	      },
	    },
	    i2cRead: {
	      value(...args) {
	        return this.io.i2cRead.apply(this.io, args);
	      },
	    },
	    i2cReadOnce: {
	      value(...args) {
	        return this.io.i2cReadOnce.apply(this.io, args);
	      },
	    },
	  },

	  ADS1115: {
	    ADDRESSES: {
	      value: [0x48, 0x49, 0x4A, 0x4B]
	    },
	    REGISTER: {
	      value: {
	        CONFIG: 0x01,
	        READ: 0x00,
	        PIN: [0xC1, 0xD1, 0xE1, 0xF1],
	        PIN_DATA: 0x83,
	      }
	    },
	    initialize: {
	      value(options) {
	        const state = priv.get(this);

	        state.reading = false;

	        this.address = options.address || this.ADDRESSES[0];

	        options.address = this.address;
	        this.io.i2cConfig(options);

	        Object.assign(this.MODES, this.io.MODES);

	        for (let i = 0; i < 4; i++) {
	          this.pins.push({
	            supportedModes: [
	              this.MODES.ANALOG
	            ],
	            mode: 1,
	            value: 0,
	            report: 0,
	            analogChannel: i
	          });
	          this.analogPins.push(i);
	        }

	        this.name = "ADS1115";
	        this.isReady = true;

	        this.emit("connect");
	        this.emit("ready");
	      }
	    },
	    normalize: {
	      value(pin) {
	        if (typeof pin === "string" && pin[0] === "A") {
	          return +pin.slice(1);
	        }
	        return pin;
	      }
	    },
	    pinMode: {
	      value(pin, mode) {
	        this.pins[pin].mode = mode;
	      }
	    },
	    analogRead: {
	      value(pin, callback) {
	        const state = priv.get(this);
	        this.pins[pin].report = 1;

	        let ready = false;

	        this.on(`analog-read-${pin}`, callback);

	        // Since this operation will read all 4 pins,
	        // it only needs to be initiated once.
	        if (!state.reading) {
	          state.reading = true;

	          // CONVERSION DELAY
	          const delay = () => {
	            setTimeout(() => {
	              ready = true;
	            }, 8);
	          };

	          this.io.i2cWrite(this.address, this.REGISTER.CONFIG, [this.REGISTER.PIN[pin], this.REGISTER.PIN_DATA]);
	          delay();

	          this.io.i2cRead(this.address, this.REGISTER.READ, 2, data => {
	            if (ready) {
	              ready = false;

	              const newPin = pin === this.pins.length - 1 ? 0 : pin + 1;

	              this.io.i2cWrite(this.address, this.REGISTER.CONFIG, [this.REGISTER.PIN[newPin], this.REGISTER.PIN_DATA]);

	              const value = (data[0] << 8) + data[1];
	              this.pins[pin].value = value;

	              if (this.pins[pin].report) {
	                this.emit(`analog-read-${pin}`, value);
	              }

	              pin = newPin;

	              delay();
	            }
	          });
	        }
	      }
	    },
	  }
	};

	Controllers["CD74HCT4067"] = Controllers.CD74HC4067;
	Controllers["74HC4067"] = Controllers.CD74HC4067;

	Controllers.PCF8574A = Object.assign({}, Controllers.PCF8574, {
	  ADDRESSES: {
	    value: [0x38]
	  }
	});

	const methods = Object.keys(Board.prototype);

	Object.keys(Controllers).forEach(name => {
	  methods.forEach(key => {
	    if (Controllers[name][key] === undefined) {
	      Controllers[name][key] = {
	        writable: true,
	        configurable: true,
	        value() {
	          throw new Error(`Expander:${name} does not support ${key}`);
	        }
	      };
	    }
	  });
	});

	const nonAddressable = [
	  "74HC595"
	];

	class Expander extends Base {
	  constructor(options) {
	    super();

	    let addressError = "Expander cannot reuse an active address";
	    let expander = null;
	    let controllerValue;

	    if (typeof options === "string") {
	      controllerValue = options;
	    }

	    Board.Component.call(
	      this, options = Board.Options(options), {
	        normalizePin: false,
	        requestPin: false
	      }
	    );

	    if (nonAddressable.includes(options.controller) &&
	        typeof this.address === "undefined") {
	      this.address = Fn.uid();
	    }

	    expander = active.get(this.address);

	    if (expander) {
	      if (this.bus && (expander.bus !== undefined && expander.bus === this.bus)) {
	        addressError += " on this bus";
	      }
	      throw new Error(addressError);
	    }

	    if (typeof options.controller === "undefined" && controllerValue) {
	      options.controller = controllerValue;
	    }

	    Board.Controller.call(this, Controllers, options);

	    priv.set(this, {});

	    if (typeof this.initialize === "function") {
	      this.initialize(options);
	    }

	    active.set(this.address, this);
	  }
	}



	Expander.get = required => {

	  if (!required.address || !required.controller) {
	    throw new Error("Expander.get(...) requires an address and controller");
	  }

	  if (required.address !== undefined) {
	    required.address = Number(required.address);
	  }

	  if (Number.isNaN(required.address)) {
	    throw new Error("Expander.get(...) expects address to be a number");
	  }

	  if (typeof required.controller !== "string") {
	    throw new Error("Expander.get(...) expects controller name to be a string");
	  }

	  // If no address was sent them assume the request wants
	  // to re-use an active Expander, by controller name.
	  // if (!required.address) {
	  //   return Expander.byController(required.controller);
	  // }

	  const expander = active.get(required.address);

	  if (expander && (expander.name === required.controller.toUpperCase())) {
	    return expander;
	  }

	  return new Expander(required);
	};

	Expander.byAddress = address => active.get(address);

	Expander.byController = name => {
	  let controller = null;

	  active.forEach(value => {
	    if (value.name === name.toUpperCase()) {
	      controller = value;
	    }
	  });
	  return controller;
	};

	Expander.hasController = key => Controllers[key] !== undefined;

	/* istanbul ignore else */
	if (!!process.env.IS_TEST_MODE) {
	  Expander.Controllers = Controllers;
	  Expander.purge = () => {
	    priv.clear();
	    active.clear();
	  };
	}

	expander = Expander;
	return expander;
}

var board;
var hasRequiredBoard;

function requireBoard () {
	if (hasRequiredBoard) return board;
	hasRequiredBoard = 1;
	const Emitter = emitter;
	const chalk = requireChalk();
	const Collection = collection;
	const Fn = fn;
	const Repl = repl_1;
	const Options = board_options;
	const Pins = board_pins;
	// This may get overridden by the tests
	let IS_TEST_MODE = !!process.env.IS_TEST_MODE;
	let Expander;
	//const temporal = require("temporal");

	// Environment Setup
	const boards = [];
	const rport = /usb|acm|^com/i;

	// const things to const when 0.10.x is dropped
	// This string appears over 20 times in this file.
	const UNDEFINED = "undefined";

	const Serial = {
	  used: [],
	  attempts: [],
	  detect(callback) {
	    // Max number of times listing serial conntections can fail
	    const maxAttempts = 10;
	    // Delay (ms) before trying again to list serial connections
	    const retryDelay = 400;
	    // let serialport;

	    /* istanbul ignore next */
	    if (parseFloat(process.versions.nw) >= 0.13) {
	      serialport = requireBrowserSerialport();
	    } else {
	      serialport = requireDist().SerialPort;
	    }

	    // console.log(require);
	    // Request a list of available ports, from
	    // the result set, filter for valid paths
	    // via known path pattern match.

	    serialport.list().then((results) => {
	      const portPaths = results.reduce((accum, result) => {
	        let available = true;

	        // Match only portPaths that Arduino cares about
	        // ttyUSB#, cu.usbmodem#, COM#
	        if (!rport.test(result.path)) {
	          available = false;
	        }

	        // Don't allow already used/encountered usb device paths
	        if (Serial.used.includes(result.path)) {
	          available = false;
	        }

	        if (available) {
	          accum.push(result.path);
	        }

	        return accum;
	      }, []);

	      // If no portPaths are detected...
	      if (!portPaths.length) {
	        /* istanbul ignore if */
	        if (IS_TEST_MODE && this.abort) {
	          /* istanbul ignore next */
	          return;
	        }

	        // Create an attempt counter
	        /* istanbul ignore else */
	        if (!Serial.attempts[Serial.used.length]) {
	          Serial.attempts[Serial.used.length] = 0;

	          // Log notification...
	          this.info("Board", "Looking for connected device");
	        }

	        // Set the attempt number
	        Serial.attempts[Serial.used.length]++;

	        // Retry Serial connection
	        if (Serial.attempts[Serial.used.length] > maxAttempts) {
	          this.fail("Board", "No connected device found");
	          return;
	        }
	        setTimeout(() => {
	          Serial.detect.call(this, callback);
	        }, retryDelay);

	        return;
	      }

	      this.info("Available", chalk.grey(portPaths));

	      // Get the first available device path
	      // from the list of detected portPaths

	      callback.call(this, portPaths[0]);
	    });
	  },

	  connect(portOrPath, callback) {
	    const IO = requireFirmata().Board;

	    let caught = null;
	    let io;
	    let isConnected;
	    let path;
	    let type;

	    if (typeof portOrPath === "object" && portOrPath.path) {
	      //
	      // Board({ port: SerialPort Object })
	      //
	      path = portOrPath.path;

	      this.info(portOrPath.transport || "SerialPort", chalk.grey(path));
	    } else {
	      //
	      // Board({ port: path String })
	      //
	      // Board()
	      //    ie. auto-detected
	      //
	      path = portOrPath;
	    }

	    // Add the usb device path to the list of device paths that
	    // are currently in use - this is used by the filter function
	    // above to remove any device paths that we've already encountered
	    // or used to avoid blindly attempting to reconnect on them.
	    Serial.used.push(path);

	    try {
	      io = new IO(portOrPath, (error) => {
	        if (error) {
	          caught = error;
	        }

	        callback.call(this, caught, caught ? "error" : "ready", io);
	      });

	      // Extend io instance with special expandos used
	      // by Johny-Five for the IO Plugin system.
	      io.name = "Firmata";
	      io.defaultLed = 13;
	      io.port = path;

	      // Made this far, safely connected
	      isConnected = true;
	    } catch (error) {
	      caught = error;
	    }

	    if (caught) {
	      caught = caught.message || caught;
	    }

	    // Determine the type of event that will be passed on to
	    // the board emitter in the callback passed to Serial.detect(...)
	    type = isConnected ? "connect" : "error";

	    // Execute "connect" callback
	    callback.call(this, caught, type, io);
	  },
	};

	/**
	 * Board
	 * @constructor
	 *
	 * @param {Object} options
	 */

	class Board extends Emitter {
	  constructor(options = {}) {
	    super();

	    // Used to define the board instance's own
	    // properties in the REPL's scope.
	    const replContext = {};

	    // It's feasible that an IO-Plugin may emit
	    // "connect" and "ready" events out of order.
	    // This is used to enforce the order, by
	    // postponing the "ready" event if the IO-Plugin
	    // hasn't emitted a "connect" event. Once
	    // the "connect" event is emitted, the
	    // postponement is lifted and the board may
	    // proceed with emitting the events in the
	    // correct order.
	    let isPostponed = false;

	    // Initialize this Board instance with
	    // param specified properties.
	    Object.assign(this, options);

	    this.timer = null;

	    this.isConnected = false;

	    // Easily track state of hardware
	    this.isReady = false;

	    // Initialize instance property to reference io board
	    this.io = this.io || null;

	    // Registry of components
	    this.register = [];

	    // Pins, Addr (alt Pin name), Addresses
	    this.occupied = [];

	    // Registry of drivers by address (i.e. I2C Controllers)
	    this.Drivers = {};

	    // Identify for connect hardware cache
	    if (!this.id) {
	      this.id = Fn.uid();
	    }

	    // If no debug flag, default to true
	    if (typeof this.debug === UNDEFINED) {
	      this.debug = true;
	    }

	    // If no repl flag, default to true
	    if (typeof this.repl === UNDEFINED) {
	      this.repl = true;
	    }

	    // If no sigint flag, default to true
	    if (typeof this.sigint === UNDEFINED) {
	      this.sigint = true;
	    }

	    // Specially processed pin capabilities object
	    // assigned when physical board has reported
	    // "ready" via Firmata or IO-Plugin.
	    this.pins = null;

	    // Create a Repl instance and store as
	    // instance property of this io/board.
	    // This will reduce the amount of boilerplate
	    // code required to _always_ have a Repl
	    // session available.
	    //
	    // If a sesssion exists, use it
	    // (instead of creating a new session)
	    //
	    /* istanbul ignore if */
	    if (this.repl) {
	      /* istanbul ignore if */
	      if (Repl.ref) {
	        /* istanbul ignore next */
	        replContext[this.id] = this;
	        /* istanbul ignore next */
	        Repl.ref.on("ready", function () {
	          /* istanbul ignore next */
	          Repl.ref.inject(replContext);
	        });
	        /* istanbul ignore next */
	        this.repl = Repl.ref;
	      } else {
	        replContext[this.id] = replContext.board = this;
	        this.repl = new Repl(replContext);
	      }
	    }

	    if (options.io) {
	      // If you already have a connected io instance
	      this.io = options.io;
	      this.isReady = options.io.isReady;
	      this.transport = this.io.transport || null;
	      this.port = this.io.name;
	      this.pins = Board.Pins(this);
	      this.RESOLUTION = Object.assign(
	        { ADC: 1023, DAC: null, PWM: 255 },
	        this.io.RESOLUTION || {}
	      );
	    } else {
	      if (this.port && options.port) {
	        Serial.connect.call(this, this.port, finalizeAndBroadcast);
	      } else {
	        Serial.detect.call(this, function (path) {
	          Serial.connect.call(this, path, finalizeAndBroadcast);
	        });
	      }
	    }

	    // Either an IO instance was provided or isOnBoard is true
	    if (!options.port && this.io !== null) {
	      /* istanbul ignore next */
	      this.info("Available", chalk.grey(this.io.name || "unknown"));

	      ["connect", "ready"].forEach((type) => {
	        this.io.once(type, () => {
	          // Since connection and readiness happen asynchronously,
	          // it's actually possible for Johnny-Five to receive the
	          // events out of order and that should be ok.
	          if (type === "ready" && !this.isConnected) {
	            isPostponed = true;
	          } else {
	            // Will emit the "connect" and "ready" events
	            // if received in order. If out of order, this
	            // will only emit the "connect" event. The
	            // "ready" event will be handled in the next
	            // condition's consequent.
	            finalizeAndBroadcast.call(this, null, type, this.io);
	          }

	          if (type === "connect" && isPostponed) {
	            finalizeAndBroadcast.call(this, null, "ready", this.io);
	          }
	        });

	        if (this.io.isReady) {
	          // If the IO instance is reached "ready"
	          // state, queue tick tasks to emit the
	          // "connect" and "ready" events
	          process.nextTick(() => this.io.emit(type));
	        }
	      });
	    }

	    this.once("ready", () => {
	      const hrstart = process.hrtime();

	      this.millis = function () {
	        const now = process.hrtime(hrstart);
	        return now[1] / 1000000;
	      };

	      ["close", "disconnect", "error", "string"].forEach((type) => {
	        this.io.on(type, (data) => this.emit(type, data));
	      });
	    });

	    // Cache instance to allow access from module constructors
	    boards.push(this);
	  }
	}

	function finalizeAndBroadcast(data, type, io) {
	  let hasBeenEmitted = false;

	  // Assign found io to instance
	  if (!this.io) {
	    this.io = io;
	  }

	  // Always Surface errors
	  if (type === "error") {
	    /* istanbul ignore else */
	    if (data && data.message) {
	      hasBeenEmitted = true;
	      this.error("Error", data.message);
	    }
	  }

	  if (type === "connect") {
	    this.isConnected = true;
	    this.port = io.port || io.name;

	    this.info("Connected", chalk.grey(this.port));

	    // Unless a "timeout" value has been provided apply 10 Second timeout...
	    //
	    // If "ready" hasn't fired and cleared the timer within
	    // 10 seconds of the connect event, then it's likely
	    // there is an issue with the device or firmware.
	    if (!IS_TEST_MODE) {
	      /* istanbul ignore next */
	      this.timer = setTimeout(() => {
	        this.error(
	          "Device or Firmware Error",

	          "A timeout occurred while connecting to the Board. \n\n" +
	            "Please check that you've properly flashed the board with the correct firmware.\n" +
	            "See: https://github.com/rwaldron/johnny-five/wiki/Getting-Started#trouble-shooting\n\n" +
	            "If connecting to a Leonardo or Leonardo clone, press the 'Reset' button on the " +
	            "board, wait approximately 11 seconds for complete reset, then run your program again."
	        );

	        this.emit(
	          "error",
	          new Error("A timeout occurred while connecting to the Board.")
	        );
	      }, this.timeout || 1e4);
	    }
	  }

	  if (type === "ready") {
	    if (this.timer) {
	      clearTimeout(this.timer);
	    }

	    // Update instance `ready` flag
	    this.isReady = true;
	    this.pins = Board.Pins(this);
	    this.MODES = this.io.MODES;

	    if (typeof io.debug !== UNDEFINED && io.debug === false) {
	      this.debug = false;
	    }

	    if (typeof io.repl !== UNDEFINED && io.repl === false) {
	      this.repl = false;
	    }
	    // In multi-board mode, block the REPL from
	    // activation. This will be started directly
	    // by the Board.Collection constructor.
	    //
	    // In single-board mode, the REPL will not
	    // be blocked at all.
	    //
	    // If the user program has not disabled the
	    // REPL, initialize it.
	    if (this.repl) {
	      this.repl.initialize(() => this.emit("ready"));
	    }

	    if (io.name !== "Mock" && this.sigint) {
	      process.on("SIGINT", () => {
	        // Time to wait before forcing exit
	        const failExitTimeout = 1000;

	        this.emit("exit");
	        this.warn("Board", "Closing.");
	        /* istanbul ignore next */
	        const timeout = setTimeout(() => {
	          process.reallyExit();
	        }, failExitTimeout);
	        const interval = setInterval(() => {
	          if (!this.io.pending) {
	            clearInterval(interval);
	            clearTimeout(timeout);
	            process.nextTick(process.reallyExit);
	          }
	        }, 1);
	      });
	    }

	    // Older versions of Firmata and some IO plugins
	    // may not have set RESOLUTION.
	    this.RESOLUTION = Object.assign(
	      { ADC: 1023, DAC: null, PWM: 255 },
	      io.RESOLUTION || {}
	    );
	  }

	  // If there is a REPL...
	  if (this.repl) {
	    // "ready" will be emitted once repl.initialize
	    // is complete, so the only event that needs to
	    // be propagated here is the "connect" event.
	    if (type === "connect") {
	      this.emit(type, data);
	    }
	  } else {
	    // The REPL is disabled, propagate all events
	    if (!hasBeenEmitted) {
	      this.emit(type, data);
	    }
	  }
	}

	/**
	 * Pass through methods
	 */
	[
	  "digitalWrite",
	  "analogWrite",
	  "analogRead",
	  "digitalRead",
	  "pinMode",
	  "queryPinState",
	  "stepperConfig",
	  "stepperStep",
	  "sendI2CConfig",
	  "sendI2CWriteRequest",
	  "sendI2CReadRequest",
	  "i2cConfig",
	  "i2cWrite",
	  "i2cWriteReg",
	  "i2cRead",
	  "i2cReadOnce",
	  "pwmWrite",
	  "servoConfig",
	  "servoWrite",
	  "sysexCommand",
	  "sysexResponse",
	  "serialConfig",
	  "serialWrite",
	  "serialRead",
	  "serialStop",
	  "serialClose",
	  "serialFlush",
	  "serialListen",
	].forEach(function (method) {
	  /* istanbul ignore next */
	  Board.prototype[method] = function () {
	    this.io[method].apply(this.io, arguments);
	    return this;
	  };
	});

	Board.prototype.snapshot = function (reducer) {
	  const blacklist = this.snapshot.blacklist;
	  const special = this.snapshot.special;
	  const hasReducer = typeof reducer === "function";

	  return this.register.reduce((cAccum, component) => {
	    // Don't include collections or multi/imu wrappers
	    if (typeof component.components === UNDEFINED) {
	      cAccum.push(
	        Object.getOwnPropertyNames(component).reduce((pAccum, prop) => {
	          const value = component[prop];

	          if (!blacklist.includes(prop) && typeof value !== "function") {
	            if (hasReducer) {
	              const result = reducer(prop, value, component);

	              if (result !== undefined) {
	                pAccum[prop] = result;
	              }
	            } else {
	              pAccum[prop] = special[prop] ? special[prop](value) : value;
	            }
	          }
	          return pAccum;
	        }, Object.create(null))
	      );
	    }

	    return cAccum;
	  }, []);
	};

	Board.prototype.serialize = function (reducer) {
	  return JSON.stringify(this.snapshot(reducer));
	};

	Board.prototype.snapshot.blacklist = [
	  "board",
	  "io",
	  "_events",
	  "_eventsCount",
	  "state",
	];

	Board.prototype.samplingInterval = function (ms) {
	  if (this.io.setSamplingInterval) {
	    this.io.setSamplingInterval(ms);
	  } else {
	    throw new Error(
	      "This IO plugin does not implement an interval adjustment method"
	    );
	  }
	  return this;
	};

	Board.prototype.snapshot.special = {
	  mode: function (value) {
	    return ["INPUT", "OUTPUT", "ANALOG", "PWM", "SERVO"][value] || "unknown";
	  },
	};

	/**
	 *  shiftOut
	 *
	 */
	Board.prototype.shiftOut = function (dataPin, clockPin, isBigEndian, value) {
	  if (arguments.length === 3) {
	    value = isBigEndian;
	    isBigEndian = true;
	  }

	  for (let i = 0; i < 8; i++) {
	    this.io.digitalWrite(clockPin, 0);
	    if (isBigEndian) {
	      this.io.digitalWrite(dataPin, !!(value & (1 << (7 - i))) | 0);
	    } else {
	      this.io.digitalWrite(dataPin, !!(value & (1 << i)) | 0);
	    }
	    this.io.digitalWrite(clockPin, 1);
	  }
	};

	const logging = {
	  specials: ["error", "fail", "warn", "info"],
	  colors: {
	    log: "white",
	    error: "red",
	    fail: "inverse",
	    warn: "yellow",
	    info: "cyan",
	  },
	};

	Board.prototype.log =
	  function (/* type, klass, message [, long description] */) {
	    var args = Array.from(arguments);

	    // If this was a direct call to `log(...)`, make sure
	    // there is a correct "type" to emit below.
	    if (!logging.specials.includes(args[0])) {
	      args.unshift("log");
	    }

	    var type = args.shift();
	    var klass = args.shift();
	    var message = args.shift();
	    var color = logging.colors[type];
	    var now = Date.now();
	    var event = {
	      type: type,
	      timestamp: now,
	      class: klass,
	      message: "",
	      data: null,
	    };

	    if (typeof args[args.length - 1] === "object") {
	      event.data = args.pop();
	    }

	    message += " " + args.join(", ");
	    event.message = message.trim();

	    /* istanbul ignore if */
	    if (this.debug) {
	      /* istanbul ignore next */
	      console.log(
	        [
	          // Timestamp
	          chalk.grey(now),
	          // Module, color matches type of log
	          chalk.magenta(klass),
	          // Details
	          chalk[color](message),
	          // Miscellaneous args
	          args.join(", "),
	        ].join(" ")
	      );
	    }

	    this.emit(type, event);
	    this.emit("message", event);
	  };

	// Make shortcuts to all logging methods
	logging.specials.forEach(function (type) {
	  Board.prototype[type] = function () {
	    var args = [].slice.call(arguments);
	    args.unshift(type);

	    this.log.apply(this, args);
	  };
	});

	/**
	 * delay, loop, queue
	 *
	 * Pass through methods to temporal
	 */
	/*
	[
	  "delay", "loop", "queue"
	].forEach(function( method ) {
	  Board.prototype[ method ] = function( time, callback ) {
	    temporal[ method ]( time, callback );
	    return this;
	  };
	});

	// Alias wait to delay to match existing Johnny-five API
	Board.prototype.wait = Board.prototype.delay;
	*/

	// -----THIS IS A TEMPORARY FIX UNTIL THE ISSUES WITH TEMPORAL ARE RESOLVED-----
	// Aliasing.
	// (temporary, while ironing out API details)
	// The idea is to match existing hardware programming apis
	// or simply find the words that are most intuitive.

	// Eventually, there should be a queuing process
	// for all new callbacks added
	//
	// TODO: Repalce with temporal or compulsive API

	Board.prototype.wait = function (time, callback) {
	  setTimeout(callback, time);
	  return this;
	};

	Board.prototype.loop = function (time, callback) {
	  var handler = function () {
	    callback(function () {
	      clearInterval(interval);
	    });
	  };
	  var interval = setInterval(handler, time);
	  return this;
	};

	// ----------
	// Static API
	// ----------

	// Board.map( val, fromLow, fromHigh, toLow, toHigh )
	//
	// Re-maps a number from one range to another.
	// Based on arduino map()
	Board.map = Fn.map;
	Board.fmap = Fn.fmap;

	// Board.constrain( val, lower, upper )
	//
	// Constrains a number to be within a range.
	// Based on arduino constrain()
	Board.constrain = Fn.constrain;

	// Board.range( upper )
	// Board.range( lower, upper )
	// Board.range( lower, upper, tick )
	//
	// Returns a new array range
	//
	Board.range = Fn.range;

	// Board.uid()
	//
	// Returns a reasonably unique id string
	//
	Board.uid = Fn.uid;

	// Board.mount()
	// Board.mount( index )
	// Board.mount( object )
	//
	// Return hardware instance, based on type of param:
	// @param {arg}
	//   object, user specified
	//   number/index, specified in cache
	//   none, defaults to first in cache
	//
	// Notes:
	// Used to reduce the amount of boilerplate
	// code required in any given module or program, by
	// giving the developer the option of omitting an
	// explicit Board reference in a module
	// constructor's options
	Board.mount = function (arg) {
	  var index = typeof arg === "number" && arg,
	    hardware;

	  // board was explicitly provided
	  if (arg && arg.board) {
	    return arg.board;
	  }

	  // index specified, attempt to return
	  // hardware instance. Return null if not
	  // found or not available
	  if (typeof index === "number") {
	    hardware = boards[index];
	    return hardware ? hardware : null;
	  }

	  // If no arg specified and hardware instances
	  // exist in the cache
	  if (boards.length) {
	    return boards[0];
	  }

	  // No mountable hardware
	  return null;
	};

	/**
	 * Board.Component
	 *
	 * Initialize a new device instance
	 *
	 * Board.Component is a |this| sensitive constructor,
	 * and must be called as:
	 *
	 * Board.Component.call( this, opts );
	 *
	 *
	 *
	 * TODO: Migrate all constructors to use this
	 *       to avoid boilerplate
	 */

	Board.Component = function (opts, componentOpts) {
	  if (typeof opts === UNDEFINED) {
	    opts = {};
	  }

	  if (typeof componentOpts === UNDEFINED) {
	    componentOpts = {};
	  }

	  // Board specific properties
	  this.board = Board.mount(opts);
	  this.io = this.board.io;

	  // Component/Module instance properties
	  this.id = opts.id || Board.uid();
	  this.custom = opts.custom || {};

	  var originalPins;

	  if (typeof opts.pin === "number" || typeof opts.pin === "string") {
	    originalPins = [opts.pin];
	  } else {
	    if (Array.isArray(opts.pins)) {
	      originalPins = opts.pins.slice();
	    } else {
	      if (typeof opts.pins === "object" && opts.pins !== null) {
	        var pinset = opts.pins || opts.pin;

	        originalPins = [];
	        for (var p in pinset) {
	          originalPins.push(pinset[p]);
	        }
	      }
	    }
	  }

	  if (opts.controller) {
	    if (typeof opts.controller === "string") {
	      opts.controller = opts.controller.replace(/-/g, "");
	    }

	    if (!Expander) {
	      Expander = requireExpander();
	    }

	    if (Expander.hasController(opts.controller)) {
	      componentOpts = {
	        normalizePin: false,
	        requestPin: false,
	      };
	    }
	  }

	  componentOpts = Board.Component.initialization(componentOpts);

	  if (componentOpts.normalizePin) {
	    opts = Board.Pins.normalize(opts, this.board);
	  }

	  if (typeof opts.pins !== UNDEFINED) {
	    this.pins = opts.pins || [];
	  }

	  if (typeof opts.pin !== UNDEFINED) {
	    this.pin = opts.pin;
	  }

	  // TODO: Figure out what is using this
	  /* istanbul ignore if */
	  if (typeof opts.emitter !== UNDEFINED) {
	    /* istanbul ignore next */
	    this.emitter = opts.emitter;
	  }

	  if (typeof opts.address !== UNDEFINED) {
	    this.address = opts.address;
	  }

	  if (typeof opts.controller !== UNDEFINED) {
	    this.controller = opts.controller;
	  }

	  // TODO: Figure out what is using this
	  /* istanbul ignore if */
	  if (typeof opts.bus !== UNDEFINED) {
	    /* istanbul ignore next */
	    this.bus = opts.bus;
	  }

	  this.board.register.push(this);
	};

	Board.Component.initialization = function (opts) {
	  var defaults = {
	    requestPin: true,
	    normalizePin: true,
	  };

	  return Object.assign({}, defaults, opts);
	};

	/**
	 * Board.Controller
	 *
	 * Decorate a Component with a Controller. Must be called
	 * _AFTER_ a Controller is identified.
	 *
	 * Board.Controller is a |this| sensitive constructor,
	 * and must be called as:
	 *
	 * Board.Controller.call( this, controller, opts );
	 *
	 */

	Board.Controller = function (controllers, options) {
	  let controller;

	  if (typeof options.controller === "string") {
	    controller =
	      controllers[options.controller] ||
	      controllers[options.controller.toUpperCase()];
	  } else {
	    controller = options.controller || controllers.DEFAULT || null;
	  }

	  if (controller === null) {
	    throw new Error("No Valid Controller Found");
	  }

	  let requirements = controller.requirements && controller.requirements.value;

	  if (requirements) {
	    /* istanbul ignore else */
	    if (requirements.options) {
	      Object.keys(requirements.options).forEach(function (key) {
	        /*
	        requirements: {
	          value: {
	            options: {
	              parameterName: {
	                throws: false,
	                message: "...blah blah blah",
	                typeof: "number",
	              }
	            }
	          }
	        },
	        */
	        if (
	          typeof options[key] === UNDEFINED ||
	          typeof options[key] !== requirements.options[key].typeof
	        ) {
	          if (requirements.options[key].throws) {
	            throw new Error(requirements.options[key].message);
	          } else {
	            this.board.warn(
	              this.constructor.name,
	              requirements.options[key].message
	            );
	          }
	        }
	      }, this);
	    }
	  }

	  Object.defineProperties(this, controller);
	};

	/**
	 * Pin Capability Signature Mapping
	 */

	Board.Pins = Pins;
	Board.Options = function (options) {
	  return new Options(options);
	};

	// Define a user-safe, unwritable hardware cache access

	Object.defineProperty(Board, "cache", {
	  get() {
	    return boards;
	  },
	});

	/**
	 * Board event constructor.
	 * opts:
	 *   type - event type. eg: "read", "change", "up" etc.
	 *   target - the instance for which the event fired.
	 *   0..* other properties
	 */
	Board.Event = function (event) {
	  if (typeof event === UNDEFINED) {
	    throw new Error("Board.Event missing Event object");
	  }

	  // default event is read
	  this.type = event.type || "data";

	  // actual target instance
	  this.target = event.target || null;

	  // Initialize this Board instance with
	  // param specified properties.
	  Object.assign(this, event);
	};

	/**
	 * Boards or Board.Collection; Used when the program must connect to
	 * more then one board.
	 *
	 * @memberof Board
	 *
	 * @param {Array} ports List of port objects { id: ..., port: ... }
	 *                      List of id strings (initialized in order)
	 *
	 * @return {Boards} board object references
	 */
	class Boards extends Collection {
	  constructor(options) {
	    let ports;

	    // new Boards([ ...Array of board options ])
	    if (Array.isArray(options)) {
	      ports = options.slice();
	      options = {
	        ports,
	      };
	    }

	    // new Boards({ ports: [ ...Array of board options ], .... })
	    /* istanbul ignore else */
	    if (
	      !Array.isArray(options) &&
	      typeof options === "object" &&
	      options.ports !== undefined
	    ) {
	      ports = options.ports;
	    }

	    // new Boards(non-Array?)
	    // new Boards({ ports: non-Array? })
	    /* istanbul ignore if */
	    if (!Array.isArray(ports)) {
	      throw new Error("Expected ports to be an array");
	    }

	    if (typeof options.debug === UNDEFINED) {
	      options.debug = true;
	    }

	    if (typeof options.repl === UNDEFINED) {
	      options.repl = true;
	    }

	    const initialized = {};
	    const noRepl = ports.some(({ repl }) => repl === false);
	    const noDebug = ports.some(({ debug }) => debug === false);
	    const boardObjects = ports.map((port) => {
	      let portOpts;

	      if (typeof port === "string") {
	        portOpts = {};

	        // If the string matches a known valid port
	        // name pattern, then assume this is what
	        // the user code intended.
	        if (rport.test(port)) {
	          portOpts.port = port;
	        } else {
	          // Otherwise they expect Johnny-Five to figure
	          // out what ports to use and intended this
	          // value to be used an id
	          portOpts.id = port;
	        }
	      } else {
	        portOpts = port;
	      }

	      // Shut off per-board repl instance creation
	      portOpts.repl = false;

	      return new Board(portOpts);
	    });

	    super(boardObjects);

	    // Set the base values from the options object.
	    this.debug = options.debug;
	    this.repl = options.repl;

	    // Figure out board specific overrides...
	    //
	    // If any of the port definitions have
	    // explicitly shut off debug output, bubble up
	    // to the Boards instance
	    /* istanbul ignore else */
	    if (noDebug) {
	      this.debug = false;
	    }

	    // If any of the port definitions have
	    // explicitly shut off the repl, bubble up
	    // to the Boards instance
	    /* istanbul ignore else */
	    if (noRepl) {
	      this.repl = false;
	    }

	    const expecteds = this.map((board, index) => {
	      initialized[board.id] = board;
	      return new Promise((resolve) => {
	        this[index].on("error", (error) => this.emit("error", error));
	        this[index].on("fail", (event) => this.emit("fail", event));
	        this[index].on("ready", () => resolve(this[index]));
	      });
	    });

	    Promise.all(expecteds)
	      .then((/* boards */) => {
	        this.each((board) => {
	          board.info("Board ID: ", chalk.green(board.id));
	        });

	        // If the Boards instance requires a REPL,
	        // make sure it's created before calling "ready"
	        if (this.repl) {
	          this.repl = new Repl(
	            Object.assign({}, initialized, {
	              board: this,
	            })
	          );
	          this.repl.initialize(() => this.emit("ready", initialized));
	        } else {
	          // Otherwise, call ready immediately
	          this.emit("ready", initialized);
	        }
	      })
	      .catch((error) => {
	        console.error(chalk.red(error));
	      });
	  }

	  static get type() {
	    return Board;
	  }
	}

	Collection.installMethodForwarding(Boards.prototype, Board.prototype);

	Object.assign(Boards.prototype, Emitter.prototype);

	Boards.prototype.byId = function (id) {
	  for (var i = 0; i < this.length; i++) {
	    if (this[i].id === id) {
	      return this[i];
	    }
	  }

	  return null;
	};

	Boards.prototype.log = Board.prototype.log;

	logging.specials.forEach(function (type) {
	  /* istanbul ignore next */
	  Boards.prototype[type] = function () {
	    var args = [].slice.call(arguments);
	    args.unshift(type);

	    this.log.apply(this, args);
	  };
	});

	/* istanbul ignore else */
	if (IS_TEST_MODE) {
	  Serial.purge = function () {
	    Serial.used.length = 0;
	  };
	  Board.Serial = Serial;

	  Board.purge = function () {
	    Board.Pins.normalize.clear();
	    Repl.isActive = false;
	    Repl.isBlocked = true;
	    Repl.ref = null;
	    boards.length = 0;
	  };

	  Board.testMode = function (state) {
	    if (!arguments.length) {
	      return IS_TEST_MODE;
	    } else {
	      IS_TEST_MODE = state;
	    }
	  };
	}

	// TODO: Eliminate .Array for 1.0.0
	Board.Array = Boards;
	Board.Collection = Boards;

	board = Board;

	// References:
	// http://arduino.cc/en/Main/arduinoBoardUno
	return board;
}

const Board$n = requireBoard();
const Emitter$e = emitter;
const Collection$c = collection;

const priv$m = new Map();
const modes = {
  INPUT: 0x00,
  OUTPUT: 0x01,
  ANALOG: 0x02,
  PWM: 0x03,
  SERVO: 0x04
};

const LOW = "low";
const HIGH = "high";
const ANALOG = "analog";
const DIGITAL = "digital";

/**
 * Pin
 * @constructor
 *
 * @description Direct Pin access objects
 *
 * @param {Object} options Options: pin, freq, range
 */

let Pin$2 = class Pin extends Emitter$e {
  constructor(options) {
    super();

    if (options === undefined || (typeof options === "object" &&
        options.addr === undefined && options.pin === undefined)) {
      throw new Error("Pins must have a pin number");
    }

    const pinValue = typeof options === "object" ? (options.addr || options.pin || 0) : options;
    let isAnalogInput = Pin.isAnalog(options);
    let isDTOA = false;

    Board$n.Component.call(
      this, options = Board$n.Options(options)
    );

    options.addr = options.addr || options.pin;

    if (this.io.analogPins.includes(pinValue)) {
      isAnalogInput = false;
      isDTOA = true;
    }

    const isPin = typeof options !== "object";
    const addr = isDTOA ? pinValue : (isPin ? options : options.addr);
    const type = options.type || (isAnalogInput ? ANALOG : DIGITAL);

    // Create a private side table
    const state = {
      mode: null,
      last: null,
      value: 0
    };

    priv$m.set(this, state);

    // Create read-only "addr(address)" property
    Object.defineProperties(this, {
      type: {
        get() {
          return type;
        }
      },
      addr: {
        get() {
          return addr;
        }
      },
      value: {
        get() {
          return state.value;
        }
      },
      mode: {
        set(mode) {
          priv$m.get(this).mode = mode;
          this.io.pinMode(this.addr, mode);
        },
        get() {
          return priv$m.get(this).mode;
        }
      }
    });

    this.mode = typeof options.as !== "undefined" ? options.as :
      (typeof options.mode !== "undefined" ? options.mode : (isAnalogInput ? 0x02 : 0x01));

    this.freq = typeof options.freq !== "undefined" ? options.freq : 20;

    if (this.mode === 0 || this.mode === 2) {
      read(this);
    }

    if (type === DIGITAL) {
      Object.defineProperties(this, {
        isHigh: {
          get() {
            return !!state.value;
          }
        },
        isLow: {
          get() {
            return !state.value;
          }
        },
      });
    }
  }

  query(callback) {
    let index = this.addr;

    if (this.type === ANALOG) {
      index = this.io.analogPins[this.addr];
    }

    this.io.queryPinState(index, () => callback(this.io.pins[index]));

    return this;
  }

  /**
   * high  Write high/1 to the pin
   * @return {Pin}
   */

  high() {
    const value = this.type === ANALOG ? this.board.RESOLUTION.PWM : 1;
    Pin.write(this, value);
    this.emit(HIGH);
    return this;
  }

  /**
   * low  Write low/0 to the pin
   * @return {Pin}
   */

  low() {
    Pin.write(this, 0);
    this.emit(LOW);
    return this;
  }
};


function read(pin) {
  const state = priv$m.get(pin);

  pin.io[`${pin.type}Read`](pin.addr, data => state.value = data);

  setInterval(() => {
    let isNot;
    let emit;

    isNot = state.value ? LOW : HIGH;
    emit = state.value ? HIGH : LOW;

    if (state.mode === modes.INPUT) {
      if (state.last === null) {
        state.last = isNot;
      }
      if (state.last === isNot) {
        state.last = emit;
        pin.emit(emit, state.value);
        pin.emit("change", state.value);
      }
    }
    pin.emit("data", state.value);
  }, pin.freq);
}


/**
 * Pin.@@MODE
 *
 * Read-only constants
 * Pin.INPUT   = 0x00
 * Pin.OUTPUT  = 0x01
 * Pin.ANALOG  = 0x02
 * Pin.PWM     = 0x03
 * Pin.SERVO   = 0x04
 *
 */
Object.entries(modes).forEach(([mode, value]) => {
  Object.defineProperty(Pin$2, mode, { value });
});


Pin$2.isAnalog = options => {
  if (typeof options === "string" &&
      Pin$2.isPrefixed(options, ["I", "A"])) {
    return true;
  }

  if (typeof options === "object") {
    return Pin$2.isAnalog(
      typeof options.addr !== "undefined" ?
        options.addr : options.pin
    );
  }
};

Pin$2.isPrefixed = (value, prefixes) => {
  value = value[0];

  return prefixes.reduce((resolution, prefix) => {
    if (!resolution) {
      return prefix === value;
    }
    return resolution;
  }, false);
};

Pin$2.write = (pin, val) => {
  const state = priv$m.get(pin);

  state.value = val;

  // Set the correct mode (OUTPUT)
  // This will only set if it needs to be set, otherwise a no-op
  pin.mode = modes.OUTPUT;

  // Create the correct type of write command
  pin.io[`${pin.type}Write`](pin.addr, val);

  pin.emit("write", null, val);
};

Pin$2.read = (pin, callback) => {
  // Set the correct mode (INPUT)
  // This will only set if it needs to be set, otherwise a no-op

  let isChanging = false;

  if (pin.type === DIGITAL && pin.mode !== 0) {
    isChanging = true;
    pin.mode = modes.INPUT;
  }

  if (pin.type === ANALOG && pin.mode !== 2) {
    isChanging = true;
    pin.mode = modes.ANALOG;
  }

  if (isChanging) {
    read(pin);
  }

  pin.on("data", () => {
    callback.call(pin, null, pin.value);
  });
};


/**
 * read  Read from the pin, value is passed to callback continuation
 * @return {Pin}
 */

/**
 * write  Write to a pin
 * @return {Pin}
 */
["read", "write"].forEach(operation => {
  Pin$2.prototype[operation] = function(valOrCallback) {
    Pin$2[operation](this, valOrCallback);
    return this;
  };
});


/**
 * Pins()
 * new Pins()
 *
 * Constructs an Array-like instance of all servos
 */
let Pins$6 = class Pins extends Collection$c.Emitter {
  constructor(numsOrObjects) {
    super(numsOrObjects);
  }
  get type() {
    return Pin$2;
  }
};

Collection$c.installMethodForwarding(
  Pins$6.prototype, Pin$2.prototype
);

Pin$2.Collection = Pins$6;

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  Pin$2.purge = () => {
    priv$m.clear();
  };
}

var pin = Pin$2;

const Board$m = requireBoard();
const Emitter$d = EventEmitter$2;
const priv$l = new Map();

/* Grove CO2 Sensor MH-Z16 */

const commandReadGas = Buffer.from([
  0xff,
  0x01,
  0x86,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x79,
]);

/**
 *
 * @constructor
 *
 * @param {Object} options Options: pin(s), serialport
 *
 * Sample initialization
 *
 *    new five.CO2({ pins: {rx: 2, tx: 3});
 *
 */

class CO2 extends Emitter$d {
  constructor(options) {
    super();

    // Allow users to pass in a 2 element array for rx and tx pins
    if (Array.isArray(options)) {
      options = {
        pins: {
          rx: options[0],
          tx: options[1],
        },
      };
    }

    if (typeof options.pins === "undefined") {
      options.pins = {};
    }

    this.baud = 9600;
    this.maxBytesToRead = 9;

    Board$m.Component.call(this, (options = Board$m.Options(options)));

    // Create a "state" entry for privately
    // storing the state of the instance
    let state = {
      temperature: 0.0,
      co2: 0.0,
    };

    priv$l.set(this, state);

    // Getters for private state values
    Object.defineProperties(this, {
      temperature: {
        get() {
          return state.temperature;
        },
      },
      co2: {
        get() {
          return state.co2;
        },
      },
    });

    if (this.initialize) {
      this.initialize(options);
    }
  }

  /*
   * Default intialization for CO2 Sensor
   */
  initialize(options) {
    const state = priv$l.get(this);
    state.portId =
      options.serialPort || options.portId || options.port || options.bus;

    // firmata.js has a SERIAL_PORT_IDs.DEFAULT that is not
    // necessary in other IO plugins so it won't always exist.
    if (typeof state.portId === "undefined" && this.io.SERIAL_PORT_IDs) {
      state.portId = this.io.SERIAL_PORT_IDs.SW_SERIAL0;
    }

    // Set the pin modes
    ["tx", "rx"].forEach((pin) => {
      if (this.pins[pin]) {
        this.io.pinMode(this.pins[pin], this.io.MODES.SERIAL);
      }
    });

    this.io.serialConfig({
      portId: state.portId,
      baud: this.baud,
      rxPin: this.pins.rx,
      txPin: this.pins.tx,
    });

    // Start reading from serial port and send the readGasConcentration command every X milliseconds
    this.listen(1000);
  }

  // if you know what you are doing you can send additional commands, like sensor calibration
  sendCommand(commandByteArray) {
    const state = priv$l.get(this);
    this.io.serialWrite(state.portId, commandByteArray);
  }

  listen(intervalFrequency) {
    const state = priv$l.get(this);

    let received = [];
    this.io.serialRead(state.portId, this.maxBytesToRead, (data) => {
      received.push(...data);
      if (received.length >= this.maxBytesToRead) {
        const data = Buffer.from(received);
        if (calculateChecksum(data) === data[8]) {
          this.calculateGasConcentration(data);
        }
        received = [];
      }
    });

    this.interval = setInterval(() => {
      this.io.serialWrite(state.portId, commandReadGas);
    }, intervalFrequency);
  }

  calculateGasConcentration(byteBuffer) {
    const state = priv$l.get(this);
    const last = { ...state };

    state.co2 = calculateGas(byteBuffer);
    state.temperature = calculateTemp(byteBuffer);

    this.emit("data", {
      temperature: state.temperature,
      co2: state.co2,
    });

    if (last.temperature !== state.temperature || last.co2 !== state.co2) {
      this.emit("change", {
        temperature: state.temperature,
        co2: state.co2,
      });
    }
  }
}

function calculateChecksum(buffer) {
  let checksum = 0;
  for (let i = 1; i < 8; i++) {
    checksum += buffer[i];
  }
  checksum = 0xff - (checksum % 256);
  checksum += 1;
  return checksum;
}

function calculateGas(buffer) {
  return buffer[2] * 256 + buffer[3];
}

function calculateTemp(buffer) {
  return buffer[4] - 40;
}

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  CO2.purge = () => {
    priv$l.clear();
  };
}
var co2 = CO2;

var accelerometer;
var hasRequiredAccelerometer;

function requireAccelerometer () {
	if (hasRequiredAccelerometer) return accelerometer;
	hasRequiredAccelerometer = 1;
	const Board = requireBoard();
	const Expander = requireExpander();
	const Emitter = emitter;
	const { constrain, fma, int16, sum, toFixed, RAD_TO_DEG } = fn;

	const priv = new Map();
	const calibrationSize = 10;

	const aX = "x";
	const aY = "y";
	const aZ = "z";
	const axes = [aX, aY, aZ];

	function analogInitialize({zeroV, sensitivity}, callback) {
	  const state = priv.get(this);
	  const dataPoints = {};

	  state.zeroV = zeroV || this.DEFAULTS.zeroV;
	  state.sensitivity = sensitivity || this.DEFAULTS.sensitivity;

	  this.pins.forEach(function(pin, index) {
	    this.io.pinMode(pin, this.io.MODES.ANALOG);
	    this.io.analogRead(pin, data => {
	      const axis = axes[index];
	      dataPoints[axis] = data;
	      callback(dataPoints);
	    });
	  }, this);
	}

	function analogToGravity(value, axis) {
	  const state = priv.get(this);
	  let zeroV = state.zeroV;

	  if (Array.isArray(zeroV) && zeroV.length > 0) {
	    const axisIndex = axes.indexOf(axis);
	    zeroV = zeroV[axisIndex || 0];
	  }

	  return (value - zeroV) / state.sensitivity;
	}

	const Controllers = {
	  ANALOG: {
	    DEFAULTS: {
	      value: {
	        zeroV: 478,
	        sensitivity: 96
	      }
	    },
	    initialize: {
	      value: analogInitialize
	    },
	    toGravity: {
	      value: analogToGravity
	    }
	  },
	  MPU6050: {
	    initialize: {
	      value(options, callback) {
	        const state = priv.get(this);
	        state.sensitivity = options.sensitivity || 16384;
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "MPU6050", options)
	          .on("data", ({accelerometer}) => callback(accelerometer));
	      }
	    },
	    toGravity: {
	      value(value) {
	        // Table 6.2 (Accelerometer specifications)
	        // Sensitivity for AFS_SEL=0
	        // Full scale range +- 2g
	        // ADC word length 16 bit 2's complement
	        // 16384 LSB/g = 0.000061035 g/LSB = 0.061035156 mg/LSB
	        // Returing a decimal part fixed at 3 digits,
	        // not sure if this assumption is correct
	        // (approximating to 0.061 mg/LSB)
	        return toFixed(value / priv.get(this).sensitivity, 3);
	      }
	    }
	  },
	  BNO055: {
	    initialize: {
	      value(options, callback) {
	        const state = priv.get(this);
	        // Page 31, Table 3-17
	        state.sensitivity = 100;
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "BNO055", options)
	          .on("data", ({accelerometer}) => callback(accelerometer));
	      }
	    },
	    toGravity: {
	      value(value) {
	        // Page 31, Table 3-17
	        // Assuming that the the `m/s^2` representation is used given that `state.sensitvity = 100`
	        // 1m/s^2 = 100LSB -> 1LSB = 0.01m/s^2
	        return toFixed(value / priv.get(this).sensitivity, 2);
	      }
	    }
	  },

	  ADXL335: {
	    DEFAULTS: {
	      value: {
	        zeroV: 330,
	        sensitivity: 66.5
	      }
	    },
	    initialize: {
	      value: analogInitialize
	    },
	    toGravity: {
	      value(value, axis) {
	        // Page 3, Table 1
	        // Typical range +- 3.6g
	        // Sensitivity: 300mV/g
	        // MaxSensitvity: 330mv/g
	        return toFixed(analogToGravity.call(this, value, axis), 3);
	      }
	    }
	  },

	  ADXL345: {
	    ADDRESSES: {
	      value: [0x53]
	    },
	    REGISTER: {
	      value: {
	        // Page 23
	        // REGISTER MAP
	        //
	        POWER: 0x2D,
	        // 0x31 49 DATA_FORMAT R/W 00000000 Data format control
	        DATA_FORMAT: 0x31,
	        // 0x32 50 DATAX0 R 00000000 X-Axis Data 0
	        DATAX0: 0x32
	      }
	    },
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        const address = Drivers.addressResolver(this, options);
	        const READLENGTH = 6;

	        this.io.i2cConfig(options);

	        // Standby mode
	        this.io.i2cWrite(address, this.REGISTER.POWER, 0);

	        // Enable measurements
	        this.io.i2cWrite(address, this.REGISTER.POWER, 8);

	        /*

	          Page 26

	          Register 0x31—DATA_FORMAT (Read/Write)

	          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
	          | - | - | - | - | - | - | - | - |
	          | T | S | I | - | F | J | R     |

	          T: SELF_TEST
	          S: SPI
	          I: INT_INVERT
	          -:-
	          F: FULL_RES
	          J: JUSTIFY
	          R: RANGE

	          Range notes: https://github.com/rwaldron/johnny-five/issues/1135#issuecomment-219541346

	          +/- 16g  0b11
	          +/- 8g   0b10
	          +/- 4g   0b01
	          +/- 2g   0b00


	          Start with FULL_RES bit on

	          0b00001000 = 0x08 = 8
	        */
	        const format = 0x08;

	        /*
	          Determine range

	          0b00000000 = 0 = ±2g
	          0b00000001 = 1 = ±4g
	          0b00000010 = 2 = ±8g
	          0b00000011 = 3 = ±16g
	        */
	        const range = ({
	          2: 0,
	          4: 1,
	          8: 2,
	          16: 3
	        })[options.range || 2];

	        // Merge the format and range bits to set the DATA_FORMAT
	        this.io.i2cWrite(address, this.REGISTER.DATA_FORMAT, format | range);

	        this.io.i2cRead(address, this.REGISTER.DATAX0, READLENGTH, data => {
	          callback({
	            x: int16(data[1], data[0]),
	            y: int16(data[3], data[2]),
	            z: int16(data[5], data[4])
	          });
	        });
	      },
	    },
	    toGravity: {
	      value(value) {
	        // Page 4, Table 1
	        //
	        // Sensitivity
	        // All g-ranges, full resolution, 256LSB/g, 0.00390625g/LSB
	        return toFixed(value * 0.00390625, 8);
	      }
	    }
	  },
	  MMA7361: {
	    DEFAULTS: {
	      value: {
	        zeroV: [372, 372, 287],
	        sensitivity: 170
	      }
	    },
	    initialize: {
	      value(options, callback) {
	        const state = priv.get(this);

	        /* istanbul ignore else */
	        if (options.sleepPin !== undefined) {
	          state.sleepPin = options.sleepPin;
	          this.io.pinMode(state.sleepPin, 1);
	          this.io.digitalWrite(state.sleepPin, 1);
	        }

	        analogInitialize.call(this, options, callback);
	      }
	    },
	    toGravity: {
	      value(value, axis) {
	        // Page 3, Table 2
	        //
	        // Sensitivity
	        // 1.5g, 800mV/g
	        // 6g, 221.5mV/g
	        return toFixed(analogToGravity.call(this, value, axis), 3);
	      }
	    },
	    enabledChanged: {
	      value(value) {
	        const state = priv.get(this);

	        /* istanbul ignore else */
	        if (state.sleepPin !== undefined) {
	          this.io.digitalWrite(state.sleepPin, value ? 1 : 0);
	        }
	      }
	    }
	  },
	  MMA8452: {
	    ADDRESSES: {
	      value: [0x1D]
	    },
	    REGISTER: {
	      value: {
	        // Page 18
	        // 6. Register Descriptions
	        STATUS: 0x00,
	        OUT_X_MSB: 0x01,
	        XYZ_DATA_CFG: 0x0E,
	        PULSE_CFG: 0x21,
	        PULSE_SRC: 0x22,
	        PULSE_THSX: 0x23,
	        PULSE_THSY: 0x24,
	        PULSE_THSZ: 0x25,
	        PULSE_TMLT: 0x26,
	        PULSE_LTCY: 0x27,
	        PULSE_WIND: 0x28,
	        CTRL_REG1: 0x2A,
	        CTRL_REG4: 0x2E,
	        CTRL_REG5: 0x2F,
	      }
	    },
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        const address = Drivers.addressResolver(this, options);
	        const state = priv.get(this);

	        // TODO: make user definable.
	        // 0b000 800Hz
	        // 0b001 400Hz
	        // 0b010 200Hz
	        // 0b011 100Hz
	        // 0b100 50Hz
	        // 0b101 12Hz
	        // 0b110 6Hz

	        const rates = [800, 400, 200, 100, 50, 12, 6, ];
	        const odr = rates.indexOf(options.odr || 800);
	        const scale = options.range || 2;
	        const fsr = ({
	          2: 0,
	          4: 1,
	          8: 2
	        })[scale];

	        options.taps = options.taps || {
	          x: false,
	          y: false,
	          z: true,
	        };

	        const taps = {
	          x: options.taps.x ? 0x08 : 0x80,
	          y: options.taps.y ? 0x08 : 0x80,
	          z: options.taps.z ? 0x08 : 0x80,
	        };

	        state.scale = scale;

	        const computed = {
	          x: null,
	          y: null,
	          z: null,
	        };

	        this.io.i2cConfig(
	          Object.assign(options, {
	            settings: {
	              stopTX: false
	            }
	          })
	        );

	        if (odr === -1) {
	          throw new RangeError("Invalid odr. Expected one of: 800,  400,  200,  100,  50,  12,  6");
	        }

	        /*
	          Initial CTRL_REG1 State

	          11000010 = 194 = 0xC2 -> ?
	          00000010 = 8 = 0x08
	          ^--------- ASLP_RATE1
	           ^-------- ASLP_RATE0
	            ^------- DR2
	             ^------ DR1
	              ^----- DR0
	               ^---- Noise
	                ^--- Fast Read
	                 ^-- Standby Mode
	        */

	        let config = 0x08;

	        /*
	          Page 5 (AN4076)
	          4.0 Setting the Data Rate

	          Set ODR

	          Shift the odr bits into place.

	          Default: 800Hz

	          11000010 = 194 = 0xC2 -> ?
	          00000010 = 8 = 0x08
	            ^^^----- DR2, DR1, DR0: 000
	        */
	        config |= odr << 3;

	        /*
	          Enter Standby Mode

	          11000010 = 194 = 0xC2 -> ?
	                ^--- Fast Read
	                 ^-- Standby Mode

	          00000010 = 8 = 0x08
	                ^--- Fast Read
	                 ^-- Standby Mode

	        */

	        this.io.i2cWriteReg(address, this.REGISTER.CTRL_REG1, config);

	        /*
	          Set FSR

	          Default: ±2g

	          00000000 = 0 = 0x00 ()
	                ^^----- FS1, FS2
	        */
	        this.io.i2cWriteReg(address, this.REGISTER.XYZ_DATA_CFG, fsr);

	        let temp = 0;

	        /*
	          Page 10 (AN4072)
	          4.2 Registers 0x23 - 0x25 PULSE_THSX, Y, Z
	              Pulse Threshold for X, Y and Z Registers

	          0x80 = B7 is HIGH
	          10000000
	          If B7 is HIGH, do not enable
	        */
	        if (!(taps.x & 0x80)) {
	          // 00000011
	          temp |= 0x03;
	          this.io.i2cWriteReg(address, this.REGISTER.PULSE_THSX, taps.x);
	        }

	        if (!(taps.y & 0x80)) {
	          // 00001100
	          temp |= 0x0C;
	          this.io.i2cWriteReg(address, this.REGISTER.PULSE_THSY, taps.y);
	        }

	        if (!(taps.z & 0x80)) {
	          // 00110000
	          temp |= 0x30;
	          this.io.i2cWriteReg(address, this.REGISTER.PULSE_THSZ, taps.z);
	        }

	        /*
	          Page 11, 12, 13 (AN4072)

	          Configure Tap Axis'

	          Table 1. Register 0x21 PULSE_CFG Register (Read/Write) and Description

	          | Tap Enable |  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0  |
	          | ---------- | --- | --- | --- | --- | --- | --- | --- | --- |
	          |            | DPA | ELE | ZD  | ZS  | YD  | YS  | XD  | XS  |
	          | Single     |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |
	          | Double     |  0  |  1  |  1  |  0  |  1  |  0  |  1  |  0  |
	          | Both       |  0  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |


	          In the default case, `temp | 0x40` will be:

	          01110000 = 112 = 0x70

	          Latch On
	          ZD On
	          ZS On

	        */

	        this.io.i2cWriteReg(address, this.REGISTER.PULSE_CFG, temp | 0x40);

	        /*
	          Set TIME LIMIT for tap detection

	          60ms / 800Hz = 60ms / 1.25ms = 48 (counts) = 0x30
	          80ms / 800Hz = 80ms / 1.25ms = 64 (counts) = 0x40
	        */
	        this.io.i2cWriteReg(address, this.REGISTER.PULSE_TMLT, 60 / (1000 / rates[odr]));
	        /*
	          Set the PULSE LATENCY.

	          This is the time that must pass after the first
	          tap, but within the PULSE WINDOW for a double tap to register.

	          200ms / 800Hz = 200ms / 1.25ms = 160 (counts) = 0xA0
	        */
	        this.io.i2cWriteReg(address, this.REGISTER.PULSE_LTCY, 200 / (1000 / rates[odr]));

	        /*
	          Set the PULSE WINDOW.

	          This is the maximum interval of time to elapse after the latency
	          interval, for which the second pulse must occur for double taps.

	          The maximum allowed time:

	          800Hz * 255 = 1.25ms * 255 = 318ms
	        */
	        this.io.i2cWriteReg(address, this.REGISTER.PULSE_WIND, 0xFF);

	        /*
	          Leave Standby Mode

	          11000011 = 195 = 0xC3
	          00000011 = 3 = 0x03
	                ^--- Fast Read
	                 ^-- Standby Mode
	        */

	        config |= 0x01;

	        this.io.i2cWriteReg(address, this.REGISTER.CTRL_REG1, config);


	        this.io.i2cRead(address, this.REGISTER.STATUS, 7, data => {
	          const status = (data.shift() & 0x08) >>> 3;

	          /* istanbul ignore else */
	          if (status) {
	            // Page 9 (AN4076)
	            //
	            // 7.0 14-bit, 12-bit or 10-bit Data Streaming and Data Conversions
	            computed.x = int16(data[0], data[1]) >> 4;
	            computed.y = int16(data[2], data[3]) >> 4;
	            computed.z = int16(data[4], data[5]) >> 4;

	            callback(computed);
	          }
	        });

	        this.io.i2cRead(address, this.REGISTER.PULSE_SRC, 1, data => {
	          const status = data[0];
	          const tap = status & 0x7F;

	          /* istanbul ignore else */
	          if (status & 0x80) {
	            this.emit("tap");

	            // Single Tap
	            /* istanbul ignore else */
	            if ((tap >> 2) & 0x01) {
	              this.emit("tap:single");

	              // Double Tap (must be both S and D bits)
	              /* istanbul ignore else */
	              if ((tap >> 3) & 0x01) {
	                this.emit("tap:double");
	              }
	            }
	          }
	        });
	      },
	    },
	    toGravity: {
	      value(value) {
	        //
	        // Paragraph 3.1, page 9
	        // Sensitivity
	        // 2g, 1024 counts/g, 0.000976562g/count
	        // 4g, 512 counts/g, 0.001953125g/count
	        // 8g, 256 counts/g, 0.00390625g/count
	        return toFixed(value / ((1 << 11) * priv.get(this).scale), 4);
	      }
	    }
	  },
	  MMA7660: {
	    ADDRESSES: {
	      value: [0x4C]
	    },
	    REGISTER: {
	      value: {
	        XOUT: 0x00,
	        MODE: 0x07,
	        SR: 0x08,
	      }
	    },
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        const address = Drivers.addressResolver(this, options);
	        const READLENGTH = 3;
	        const state = priv.get(this);
	        state.sensitivity = 21.33;

	        this.io.i2cConfig(options);

	        //
	        // Standby mode
	        this.io.i2cWrite(address, this.REGISTER.MODE, 0x00);

	        // Sample Rate ()
	        this.io.i2cWrite(address, this.REGISTER.SR, 0x07);

	        // Active Mode
	        this.io.i2cWrite(address, this.REGISTER.MODE, 0x01);

	        this.io.i2cRead(address, this.REGISTER.XOUT, READLENGTH, data => {
	          callback({
	            // Page. 13
	            // D7 D6      D5      D4      D3      D2      D1      D0
	            // -- -A XOUT[5] XOUT[4] XOUT[3] XOUT[2] XOUT[1] XOUT[0]
	            x: data[0] & 0b00111111,
	            y: data[1] & 0b00111111,
	            z: data[2] & 0b00111111,
	          });
	        });
	      },
	    },
	    toGravity: {
	      value(value) {
	        // Page 28
	        return toFixed(value / priv.get(this).sensitivity, 3);
	      }
	    }
	  },

	  ESPLORA: {
	    DEFAULTS: {
	      value: {
	        zeroV: [320, 330, 310],
	        sensitivity: 170
	      }
	    },
	    initialize: {
	      value(options, callback) {
	        this.pins = [5, 11, 6];
	        analogInitialize.call(this, options, callback);
	      }
	    },
	    toGravity: {
	      value(value, axis) {
	        return toFixed(analogToGravity.call(this, value, axis), 2);
	      }
	    }
	  },

	  LIS3DH: {
	    ADDRESSES: {
	      value: [0x18]
	    },
	    REGISTER: {
	      value: {
	        OUT_X_L: 0x28,
	        CTRL_REG1: 0x20,
	        CTRL_REG2: 0x21,
	        CTRL_REG3: 0x22,
	        CTRL_REG4: 0x23,
	        CTRL_REG5: 0x24,

	        TEMP_CFG_REG: 0x1F,

	        CLICK_CFG: 0x38,
	        CLICK_SRC: 0x39,
	        CLICK_THS: 0x3A,
	        TIME_LIMIT: 0x3B,
	        TIME_LATENCY: 0x3C,
	        TIME_WINDOW: 0x3D,
	      }
	    },
	    initialize: {
	      value(options, callback) {
	        const state = priv.get(this);
	        const address = options.address || 0x18;

	        // 2G  = 0b00
	        // 4G  = 0b01
	        // 8G  = 0b10
	        // 16G = 0b11
	        let range = ({
	          2: 0,
	          4: 1,
	          8: 2,
	          16: 3
	        })[options.range || 4];

	        /* istanbul ignore if */
	        if (range === undefined) {
	          range = 1;
	        }

	        let divider = [
	          16380,
	          8190,
	          4096,
	          1365,
	        ][range];

	        /* istanbul ignore if */
	        if (divider === undefined) {
	          divider = 1;
	        }

	        let threshold = [
	          80,
	          40,
	          20,
	          10,
	        ][range];

	        /* istanbul ignore if */
	        if (threshold === undefined) {
	          threshold = 10;
	        }


	        state.divider = divider;
	        state.expander = Expander.get({
	          address,
	          controller: this.controller,
	          bus: this.bus,
	          board: options.board || this.board
	        });

	        // TODO: this should come from the expander
	        const ctrl4 = 0x88 | (range << 4);

	        state.expander.i2cWrite(address, this.REGISTER.CTRL_REG4, ctrl4);

	        // Acceleration
	        state.expander.i2cReadOnce(address, this.REGISTER.CTRL_REG1, 1, data => {
	          let ctrl1 = data[0];

	          // Set to 200Hz
	          ctrl1 &= ~0xF0;
	          ctrl1 |= 6 << 4;

	          state.expander.i2cWrite(address, this.REGISTER.CTRL_REG1, ctrl1);

	          // Page 21
	          // 6.1.1 I2C operation
	          // Autoincrement bit set on register (0x80)
	          state.expander.i2cRead(address, this.REGISTER.OUT_X_L | 0x80, 6, data => {
	            callback({
	              x: int16(data[1], data[0]),
	              y: int16(data[3], data[2]),
	              z: int16(data[5], data[4]),
	            });
	          });


	          // Tap
	          // TODO: make this optional (use "newListener"?)
	          //
	          // See MMA8452 driver for strategy
	          //
	          // state.expander.i2cReadOnce(address, this.REGISTER.CTRL_REG3, 1, function(data) {
	          //   var ctrl3 = data[0];

	          //   // Shut off Int 1 Click
	          //   ctrl3 &= ~0x80;
	          //   ctrl3 |= 6 << 4;

	          //   state.expander.i2cWrite(address, this.REGISTER.CTRL_REG1, ctrl3);

	          //   // Page 21
	          //   // 6.1.1 I2C operation
	          //   // Autoincrement bit set on register (0x80)
	          //   state.expander.i2cRead(address, this.REGISTER.OUT_X_L | 0x80, 6, function(data) {
	          //     callback({
	          //       x: int16(data[1], data[0]),
	          //       y: int16(data[3], data[2]),
	          //       z: int16(data[5], data[4]),
	          //     });
	          //   });
	          // }.bind(this));



	          // Page 35
	          // 8.3.7 CTRL_REG3 [Interrupt CTRL register] (22h)
	          state.expander.i2cWrite(address, this.REGISTER.CTRL_REG3, 0x80);

	          // Page 40
	          // 9.2.1 Control register 5 (0x24)
	          state.expander.i2cWrite(address, this.REGISTER.CTRL_REG5, 0x08);

	          // Page 32
	          // 8.3.1 TAP_CFG
	          //
	          // This register is called both CLICK_CFG and TAP_CFG
	          //
	          // 0b00101010  = 0x2A = 42
	          state.expander.i2cWrite(address, this.REGISTER.CLICK_CFG, 0x2A);

	          // Page 36
	          // 8.4.1 Playing with TAP_TimeLimit
	          //
	          // ...Offers some guidance. Ultimately I opted to take inspiration
	          // from Adafruit's driver and example:
	          const timelimit = 10;
	          const timelatency = 20;
	          const timewindow = 255;

	          state.expander.i2cWrite(address, this.REGISTER.CLICK_THS, threshold);
	          state.expander.i2cWrite(address, this.REGISTER.TIME_LIMIT, timelimit);
	          state.expander.i2cWrite(address, this.REGISTER.TIME_LATENCY, timelatency);
	          state.expander.i2cWrite(address, this.REGISTER.TIME_WINDOW, timewindow);

	          // Page 33
	          // 8.3.2 TAP_SRC (39h)
	          let lastEmitTime = null;

	          state.expander.i2cRead(address, this.REGISTER.CLICK_SRC, 1, data => {
	            const status = data[0];
	            const thisEmitTime = Date.now();
	            // var tap = status & 0x7F;

	            if (lastEmitTime === null) {
	              lastEmitTime = thisEmitTime - 101;
	            }

	            /* istanbul ignore if */
	            if (thisEmitTime < (lastEmitTime + 100)) {
	              return;
	            }

	            if (status === 0x00) {
	              return;
	            }

	            /* istanbul ignore if */
	            if (!(status & 0x30)) {
	              return;
	            }

	            lastEmitTime = thisEmitTime;

	            this.emit("tap");

	            if (status & 0x10) {
	              this.emit("tap:single");
	            }

	            if (status & 0x20) {
	              // TODO: Figure out if we can determine a
	              // combined single + double tap
	              this.emit("tap:single");
	              this.emit("tap:double");
	            }
	          });
	        });
	      },
	    },
	    toGravity: {
	      value(raw) {
	        // Table 4, page 10
	        return toFixed(raw / priv.get(this).divider, 3);
	      },
	    },
	  },
	  LSM303C: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "LSM303C", options)
	          .on("data", ({accelerometer}) => callback(accelerometer));
	      }
	    },
	    toGravity: {
	      value(raw) {
	        return toFixed(raw, 2);
	      }
	    }
	  },
	};

	// Otherwise known as...
	Controllers.TINKERKIT = Controllers.ANALOG;
	Controllers.MMA8452Q = Controllers.MMA8452;
	Controllers.DEFAULT = Controllers.ANALOG;

	function magnitude(x, y, z) {
	  let a;

	  a = x * x;
	  a = fma(y, y, a);
	  a = fma(z, z, a);

	  return Math.sqrt(a);
	}
	/**
	 * Accelerometer
	 * @constructor
	 *
	 * five.Accelerometer([ x, y[, z] ]);
	 *
	 * five.Accelerometer({
	 *   pins: [ x, y[, z] ]
	 *   zeroV: ...
	 *   sensitivity: ...
	 * });
	 *
	 *
	 * @param {Object} options [description]
	 *
	 */

	class Accelerometer extends Emitter {
	  constructor(options) {
	    super();

	    const state = {
	      enabled: true,
	      x: {
	        value: 0,
	        previous: 0,
	        stash: [],
	        orientation: null,
	        inclination: null,
	        acceleration: null,
	        calibration: []
	      },
	      y: {
	        value: 0,
	        previous: 0,
	        stash: [],
	        orientation: null,
	        inclination: null,
	        acceleration: null,
	        calibration: []
	      },
	      z: {
	        value: 0,
	        previous: 0,
	        stash: [],
	        orientation: null,
	        inclination: null,
	        acceleration: null,
	        calibration: []
	      }
	    };

	    Board.Component.call(
	      this, options = Board.Options(options)
	    );

	    Board.Controller.call(this, Controllers, options);

	    if (!this.toGravity) {
	      this.toGravity = options.toGravity || (x => x);
	    }

	    if (!this.enabledChanged) {
	      this.enabledChanged = () => {};
	    }

	    priv.set(this, state);

	    /* istanbul ignore else */
	    if (typeof this.initialize === "function") {
	      this.initialize(options, data => {
	        let isChange = false;

	        if (!state.enabled) {
	          return;
	        }

	        Object.keys(data).forEach(axis => {
	          const value = data[axis];
	          const sensor = state[axis];

	          if (options.autoCalibrate && sensor.calibration.length < calibrationSize) {
	            const axisIndex = axes.indexOf(axis);
	            sensor.calibration.push(value);

	            if (!Array.isArray(state.zeroV)) {
	              state.zeroV = [];
	            }

	            state.zeroV[axisIndex] = sum(sensor.calibration) / sensor.calibration.length;
	            if (axis === aZ) {
	              state.zeroV[axisIndex] -= state.sensitivity;
	            }
	          }

	          // The first run needs to prime the "stash"
	          // of data values.
	          if (sensor.stash.length === 0) {
	            for (let i = 0; i < 5; i++) {
	              sensor.stash[i] = value;
	            }
	          }

	          sensor.previous = sensor.value;
	          sensor.stash.shift();
	          sensor.stash.push(value);

	          sensor.value = (sum(sensor.stash) / 5) | 0;

	          if (this.acceleration !== sensor.acceleration) {
	            sensor.acceleration = this.acceleration;
	            isChange = true;
	            this.emit("acceleration", sensor.acceleration);
	          }

	          if (this.orientation !== sensor.orientation) {
	            sensor.orientation = this.orientation;
	            isChange = true;
	            this.emit("orientation", sensor.orientation);
	          }

	          if (this.inclination !== sensor.inclination) {
	            sensor.inclination = this.inclination;
	            isChange = true;
	            this.emit("inclination", sensor.inclination);
	          }
	        });

	        this.emit("data", {
	          x: state.x.value,
	          y: state.y.value,
	          z: state.z.value
	        });

	        if (isChange) {
	          this.emit("change", {
	            x: this.x,
	            y: this.y,
	            z: this.z
	          });
	        }
	      });
	    }

	    Object.defineProperties(this, {
	      hasAxis: {
	        writable: true,
	        value(axis) {
	          /* istanbul ignore next */
	          return state[axis] ? state[axis].stash.length > 0 : false;
	        }
	      },
	      enable: {
	        value() {
	          state.enabled = true;
	          this.enabledChanged(true);
	          return this;
	        }
	      },
	      disable: {
	        value() {
	          state.enabled = false;
	          this.enabledChanged(false);
	          return this;
	        }
	      },
	      zeroV: {
	        get() {
	          return state.zeroV;
	        }
	      },
	      /**
	       * [read-only] Calculated pitch value
	       * @property pitch
	       * @type Number
	       */
	      pitch: {
	        get() {
	          const x = this.x;
	          const y = this.y;
	          const z = this.z;
	          const rads = this.hasAxis(aZ) ?
	            Math.atan2(x, Math.hypot(y, z)) :
	            Math.asin(constrain(x, -1, 1));

	          return toFixed(rads * RAD_TO_DEG, 2);
	        }
	      },
	      /**
	       * [read-only] Calculated roll value
	       * @property roll
	       * @type Number
	       */
	      roll: {
	        get() {
	          const x = this.x;
	          const y = this.y;
	          const z = this.z;
	          const rads = this.hasAxis(aZ) ?
	            Math.atan2(y, Math.hypot(x, z)) :
	            Math.asin(constrain(y, -1, 1));

	          return toFixed(rads * RAD_TO_DEG, 2);
	        }
	      },
	      x: {
	        get() {
	          return this.toGravity(state.x.value, aX);
	        }
	      },
	      y: {
	        get() {
	          return this.toGravity(state.y.value, aY);
	        }
	      },
	      z: {
	        get() {
	          return this.hasAxis(aZ) ?
	            this.toGravity(state.z.value, aZ) : 0;
	        }
	      },
	      acceleration: {
	        get() {
	          return magnitude(
	            this.x,
	            this.y,
	            this.z
	          );
	        }
	      },
	      inclination: {
	        get() {
	          return Math.atan2(this.y, this.x) * RAD_TO_DEG;
	        }
	      },
	      orientation: {
	        get() {
	          const abs = Math.abs;
	          const x = this.x;
	          const y = this.y;
	          const z = this.hasAxis(aZ) ? this.z : 1;
	          const absX = abs(x);
	          const absY = abs(y);
	          const absZ = abs(z);

	          if (absX < absY && absX < absZ) {
	            if (x > 0) {
	              return 1;
	            }
	            return -1;
	          }
	          if (absY < absX && absY < absZ) {
	            if (y > 0) {
	              return 2;
	            }
	            return -2;
	          }
	          if (absZ < absX && absZ < absY) {
	            // TODO: figure out how to test this
	            /* istanbul ignore else */
	            if (z > 0) {
	              return 3;
	            }
	            /* istanbul ignore next */
	            return -3;
	          }
	          return 0;
	        }
	      }
	    });
	  }
	}

	/* istanbul ignore else */
	if (!!process.env.IS_TEST_MODE) {
	  Accelerometer.Controllers = Controllers;
	  Accelerometer.purge = function() {
	    priv.clear();
	  };
	}


	accelerometer = Accelerometer;
	return accelerometer;
}

var altimeter;
var hasRequiredAltimeter;

function requireAltimeter () {
	if (hasRequiredAltimeter) return altimeter;
	hasRequiredAltimeter = 1;
	const Board = requireBoard();
	const Emitter = emitter;
	const { toFixed } = fn;
	const priv = new Map();

	const Controllers = {
	  MPL3115A2: {
	    requirements: {
	      value: {
	        options: {
	          elevation: {
	            throws: false,
	            message: "Missing `elevation` option. Without a specified base `elevation`, the altitude measurement will be inaccurate. Use the meters value shown on whatismyelevation.com",
	            typeof: "number",
	          }
	        }
	      }
	    },
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "MPL3115A2", options)
	          .on("data", ({altitude}) => callback(altitude));
	      }
	    },
	    toMeters: {
	      writable: true,
	      value(value) {

	        // Table 2, Note 3
	        // "Smallest bit change in register represents minimum value change in
	        // Pascals or meters. Typical resolution to signify change in altitudeis 0.3 m"
	        return toFixed(value, 1);
	      }
	    }
	  },
	  MS5611: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "MS5611", options)
	          .on("data", ({altitude}) => callback(altitude));
	      }
	    },
	    toMeters: {
	      writable: true,
	      value(value) {
	        // Datasheet available at http://www.te.com/commerce/DocumentDelivery/DDEController?Action=srchrtrv&DocNm=MS5611-01BA03&DocType=Data+Sheet&DocLang=English
	        //
	        // From page 1
	        // "This barometric pressure sensor is optimized for
	        // altimeters and variometers with an altitude resolution of 10 cm."
	        return toFixed(value, 2);
	      }
	    }
	  },

	  BMP180: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "BMP180", options)
	          .on("data", ({altitude}) => callback(altitude));
	      }
	    },
	    toMeters: {
	      writable: true,
	      value(value) {
	        // Page 6, Table 1
	        // Resolution of output data 0.01hPa
	        //
	        // From paragraph 3.6, page 16 1hPa=8.43m
	        // resolution ~= 0.08m
	        return toFixed(value, 2);
	      }
	    }
	  },

	  BMP280: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "BMP280", options)
	          .on("data", ({altitude}) => callback(altitude));
	      }
	    },
	    toMeters: {
	      writable: true,
	      value(value) {
	        // Page 8, Table 2
	        // Resolution of output data in ultra high resolution mode 0.0016hPa
	        // 1hPa=8.43m
	        // resolution ~= 0.013m
	        return toFixed(value, 3);
	      }
	    }
	  },
	  BME280: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "BME280", options)
	          .on("data", ({altitude}) => callback(altitude));
	      }
	    },
	    toMeters: {
	      writable: true,
	      value(value) {
	        // Page 10, Table 3
	        // Resolution of pressure output data 0.18Pa
	        // 1hPa=8.43m
	        // 100Pa=8.43m
	        // resolution ~= 0.015m
	        return toFixed(value, 3);
	      }
	    }
	  },

	};

	Controllers["BMP085"] = Controllers["BMP-085"] = Controllers.BMP180;


	class Altimeter extends Emitter {
	  constructor(options) {
	    super();

	    Board.Component.call(
	      this, options = Board.Options(options)
	    );

	    Board.Controller.call(this, Controllers, options);

	    const state = {};
	    const freq = options.freq || 25;
	    let last = null;
	    let value = null;

	    if (!this.toMeters) {
	      this.toMeters = options.toMeters || (x => x);
	    }

	    priv.set(this, state);

	    const descriptors = {
	      meters: {
	        get() {
	          return this.toMeters(value);
	        }
	      },
	      feet: {
	        get() {
	          return toFixed(this.meters * 3.28084, 2);
	        }
	      }
	    };
	    // Convenience aliases
	    descriptors.m = descriptors.meters;
	    descriptors.ft = descriptors.feet;

	    Object.defineProperties(this, descriptors);


	    /* istanbul ignore else */
	    if (typeof this.initialize === "function") {
	      this.initialize(options, data => value = data);
	    }

	    setInterval(() => {
	      if (value == null) {
	        return;
	      }

	      const data = {};
	      data.m = data.meters = this.meters;
	      data.ft = data.feet = this.feet;

	      this.emit("data", data);

	      /* istanbul ignore else */
	      if (this.meters !== last) {
	        last = this.meters;
	        this.emit("change", data);
	      }
	    }, freq);
	  }
	}

	/* istanbul ignore else */
	if (!!process.env.IS_TEST_MODE) {
	  Altimeter.Controllers = Controllers;
	  Altimeter.purge = function() {
	    priv.clear();
	  };
	}


	altimeter = Altimeter;
	return altimeter;
}

var barometer;
var hasRequiredBarometer;

function requireBarometer () {
	if (hasRequiredBarometer) return barometer;
	hasRequiredBarometer = 1;
	const Board = requireBoard();
	const Emitter = emitter;
	const { toFixed } = fn;

	const Controllers = {
	  MPL115A2: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "MPL115A2", options)
	          .on("data", ({pressure}) => callback(pressure));
	      }
	    },
	    // kPa (Kilopascals)
	    toPressure: {
	      value(value) {
	        // Pressure output in kPa explained at P. 6, Eqn. 2
	        // Typical resolution 0.15kPa from paragraph 2.2 page 3
	        return toFixed(((65 / 1023) * value) + 50, 2);
	      }
	    }
	  },
	  MPL3115A2: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "MPL3115A2", options)
	          .on("data", ({pressure}) => callback(pressure));
	      }
	    },
	    // kPa (Kilopascals)
	    toPressure: {
	      value(value) {
	        // formulas extracted from code example:
	        // https://github.com/adafruit/Adafruit_MPL3115A2_Library
	        const inches = (value / 4) / 3377;
	        const output = inches * 3.39;

	        // Page 8, Table 5
	        // Typical resolution 1.5Pa = 0.0015kPa
	        return toFixed(output, 4);
	      }
	    }
	  },
	  BMP180: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "BMP180", options)
	          .on("data", ({pressure}) => callback(pressure));
	      }
	    },
	    // kPa (Kilopascals)
	    toPressure: {
	      value(value) {
	        // Page 6, Table 1
	        // Typical resolution 0.01hPa = 0.001kPa
	        return toFixed(value / 1000, 3);
	      }
	    }
	  },
	  BMP280: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "BMP280", options)
	          .on("data", ({pressure}) => callback(pressure));
	      }
	    },
	    // kPa (Kilopascals)
	    toPressure: {
	      value(value) {
	        // Page 8, Table 2
	        // Resolution in ultra high resolution mode 0.0016hPa = 0.00016kPa
	        return toFixed(value / 1000, 5);
	      }
	    }
	  },
	  BME280: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "BME280", options)
	          .on("data", ({pressure}) => callback(pressure));
	      }
	    },
	    // kPa (Kilopascals)
	    toPressure: {
	      value(value) {
	        // Page 10, Table 3
	        // Typical resolution 0.18Pa = 0.00018kPa
	        return toFixed(value / 1000, 5);
	      }
	    }
	  },
	  MS5611: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "MS5611", options)
	          .on("data", ({pressure}) => callback(pressure));
	      }
	    },
	    toPressure: {
	      value(value) {
	        // Page 2, Table ?
	        // Resolution      Over sampling ratio
	        // 0.065mbar       256
	        // 0.042mbar       512
	        // 0.027mbar       1024
	        // 0.018mbar       2048
	        // 0.012mbar       4096
	        //
	        // 0.012mbar = 1,2Pa = 0.0012kPa
	        return toFixed(value / 1000, 4);
	      }
	    }
	  },
	};

	Controllers.BMP085 = Controllers.BMP180;

	/**
	 * Barometer
	 * @constructor
	 *
	 * five.Barometer(options);
	 *
	 * five.Barometer({
	 *   controller: "CONTROLLER"
	 *   address: 0x00
	 * });
	 *
	 *
	 * @param {Object} options [description]
	 *
	 */

	class Barometer extends Emitter {
	  constructor(options) {
	    super();

	    Board.Component.call(
	      this, options = Board.Options(options)
	    );

	    Board.Controller.call(this, Controllers, options);

	    const freq = options.freq || 25;
	    let last = null;
	    let raw = null;

	    if (!this.toPressure) {
	      this.toPressure = options.toPressure || (x => x);
	    }

	    if (typeof this.initialize === "function") {
	      this.initialize(options, data => {
	        raw = data;
	      });
	    }

	    Object.defineProperties(this, {
	      pressure: {
	        get() {
	          return this.toPressure(raw);
	        }
	      }
	    });

	    setInterval(() => {
	      if (raw === null) {
	        return;
	      }

	      const data = {
	        pressure: this.pressure
	      };

	      this.emit("data", data);

	      if (this.pressure !== last) {
	        last = this.pressure;
	        this.emit("change", data);
	      }
	    }, freq);
	  }
	}

	/* istanbul ignore else */
	if (!!process.env.IS_TEST_MODE) {
	  Barometer.Controllers = Controllers;
	  Barometer.purge = function() {};
	}

	barometer = Barometer;
	return barometer;
}

var gyro;
var hasRequiredGyro;

function requireGyro () {
	if (hasRequiredGyro) return gyro;
	hasRequiredGyro = 1;
	const Board = requireBoard();
	const Emitter = emitter;
	const Fn = fn;

	const sum = Fn.sum;
	const toFixed = Fn.toFixed;

	const priv = new Map();
	const axes = ["x", "y", "z"];

	const Controllers = {
	  ANALOG: {
	    initialize: {
	      value(options, callback) {
	        const pins = options.pins || [];
	        let sensitivity;
	        let resolution;
	        const state = priv.get(this);
	        const dataPoints = {};

	        if (options.sensitivity === undefined) {
	          throw new Error("Expected a Sensitivity");
	        }

	        // 4.88mV / (0.167mV/dps * 2)
	        // 0.67 = 4X
	        // 0.167 = 1X
	        sensitivity = options.sensitivity;
	        resolution = options.resolution || 4.88;
	        state.K = resolution / sensitivity;

	        pins.forEach(function(pin, index) {
	          this.io.pinMode(pin, this.io.MODES.ANALOG);
	          this.io.analogRead(pin, data => {
	            const axis = axes[index];
	            dataPoints[axis] = data;
	            callback(dataPoints);
	          });
	        }, this);
	      }
	    },
	    toNormal: {
	      value(raw) {
	        return raw >> 2;
	      }
	    },
	    toDegreesPerSecond: {
	      value(raw, rawCenter) {
	        const normal = this.toNormal(raw);
	        const center = this.toNormal(rawCenter);
	        const state = priv.get(this);

	        return ((normal - center) * state.K) | 0;
	      }
	    }
	  },
	  // http://www.invensense.com/mems/gyro/mpu6050.html
	  // Default to the +- 250 which has a 131 LSB/dps
	  MPU6050: {
	    initialize: {
	      value(options, callback) {
	        const IMU = requireSip();
	        const state = priv.get(this);
	        const driver = IMU.Drivers.get(this.board, "MPU6050", options);

	        state.sensitivity = options.sensitivity || 131;

	        driver.on("data", ({gyro}) => {
	          callback(gyro);
	        });
	      }
	    },
	    toNormal: {
	      value(raw) {
	        return (raw >> 11) + 127;
	      }
	    },
	    toDegreesPerSecond: {
	      // Page 12, Paragraph 6.1
	      // Sensitivity scale factor
	      // FS_SEL=0    131 LSB/dps -> 0,007633588 dps/LSB
	      // FS_SEL=1    65.5 LSB/dps -> 0,015267176 dps/LSB
	      // FS_SEL=2    32.8 LSB/dps -> 0,00304878 dps/LSB
	      // FS_SEL=3    16.4 LSB/dps -> 0,06097561 dps/LSB
	      // Using 4 digits resolution
	      value(raw, rawCenter) {
	        const state = priv.get(this);

	        return toFixed((raw - rawCenter) / state.sensitivity, 4);
	      }
	    }
	  },
	  BNO055: {
	    initialize: {
	      value(options, callback) {
	        const IMU = requireSip();
	        const state = priv.get(this);
	        const driver = IMU.Drivers.get(this.board, "BNO055", options);

	        // AF p.14, OUTPUT SIGNAL GYROSCOPE, set this to 16 as according to AF.51 the default for the unit register
	        // is degrees. and there may be a bug in the Ada fruit code as it has the setting to radians disabled
	        // but the sensitivity / scale set to 900 which is used for radian reps
	        state.sensitivity = 16;

	        driver.on("data", ({gyro}) => {
	          callback(gyro);
	        });
	      }
	    },
	    toNormal: {
	      value(raw) {
	        return raw;
	      }
	    },
	    toDegreesPerSecond: {
	      // Page 33, Table 3-22
	      // Gyroscope unit settings 1dps = 16 LSB -> resolution 0,0625 dps with +=2000 dps range
	      value(raw) {
	        const state = priv.get(this);
	        return toFixed(raw / state.sensitivity, 4);
	      }
	    }
	  },
	};

	Controllers.DEFAULT = Controllers.ANALOG;

	class Gyro extends Emitter {
	  constructor(options) {
	    super();

	    let isCalibrated = false;
	    const sampleSize = 100;

	    const state = {
	      x: {
	        angle: 0,
	        value: 0,
	        previous: 0,
	        calibration: [],
	        stash: [0, 0, 0, 0, 0],
	        center: 0,
	        hasValue: false
	      },
	      y: {
	        angle: 0,
	        value: 0,
	        previous: 0,
	        calibration: [],
	        stash: [0, 0, 0, 0, 0],
	        center: 0,
	        hasValue: false
	      },
	      z: {
	        angle: 0,
	        value: 0,
	        previous: 0,
	        calibration: [],
	        stash: [0, 0, 0, 0, 0],
	        center: 0,
	        hasValue: false
	      }
	    };

	    Board.Component.call(
	      this, options = Board.Options(options)
	    );

	    Board.Controller.call(this, Controllers, options);

	    if (!this.toNormal) {
	      this.toNormal = options.toNormal || (raw => raw);
	    }

	    if (!this.toDegreesPerSecond) {
	      this.toDegreesPerSecond = options.toDegreesPerSecond || (raw => raw);
	    }

	    priv.set(this, state);

	    if (typeof this.initialize === "function") {
	      this.initialize(options, data => {
	        let isChange = false;

	        Object.keys(data).forEach(axis => {
	          const value = data[axis];
	          const sensor = state[axis];

	          sensor.previous = sensor.value;
	          sensor.stash.shift();
	          sensor.stash.push(value);
	          sensor.hasValue = true;
	          sensor.value = (sum(sensor.stash) / 5) | 0;

	          if (!isCalibrated &&
	            (state.x.calibration.length === sampleSize &&
	              state.y.calibration.length === sampleSize &&
	              (this.z === undefined || state.z.calibration.length === sampleSize))) {

	            isCalibrated = true;
	            state.x.center = (sum(state.x.calibration) / sampleSize) | 0;
	            state.y.center = (sum(state.y.calibration) / sampleSize) | 0;
	            state.z.center = (sum(state.z.calibration) / sampleSize) | 0;

	            state.x.calibration.length = 0;
	            state.y.calibration.length = 0;
	            state.z.calibration.length = 0;
	          } else {
	            if (sensor.calibration.length < sampleSize) {
	              sensor.calibration.push(value);
	            }
	          }

	          if (sensor.previous !== sensor.value) {
	            isChange = true;
	          }
	        });

	        if (isCalibrated) {
	          state.x.angle += this.rate.x / 100;
	          state.y.angle += this.rate.y / 100;
	          state.z.angle += this.rate.z / 100;

	          this.emit("data", {
	            x: this.x,
	            y: this.y,
	            z: this.z
	          });

	          if (isChange) {
	            this.emit("change", {
	              x: this.x,
	              y: this.y,
	              z: this.z
	            });
	          }
	        }
	      });
	    }

	    Object.defineProperties(this, {
	      isCalibrated: {
	        get() {
	          return isCalibrated;
	        },
	        set(value) {
	          if (typeof value === "boolean") {
	            isCalibrated = value;
	          }
	        }
	      },
	      pitch: {
	        get() {
	          return {
	            rate: toFixed(this.rate.y, 2),
	            angle: toFixed(state.y.angle, 2)
	          };
	        }
	      },
	      roll: {
	        get() {
	          return {
	            rate: toFixed(this.rate.x, 2),
	            angle: toFixed(state.x.angle, 2)
	          };
	        }
	      },
	      yaw: {
	        get() {
	          return {
	            rate: this.z !== undefined ? toFixed(this.rate.z, 2) : 0,
	            angle: this.z !== undefined ? toFixed(state.z.angle, 2) : 0
	          };
	        }
	      },
	      x: {
	        get() {
	          return toFixed(this.toNormal(state.x.value), 4);
	        }
	      },
	      y: {
	        get() {
	          return toFixed(this.toNormal(state.y.value), 4);
	        }
	      },
	      z: {
	        get() {
	          return state.z.hasValue ? toFixed(this.toNormal(state.z.value), 4) : undefined;
	        }
	      },
	      rate: {
	        get() {
	          const x = this.toDegreesPerSecond(state.x.value, state.x.center);
	          const y = this.toDegreesPerSecond(state.y.value, state.y.center);
	          const z = state.z.hasValue ?
	            this.toDegreesPerSecond(state.z.value, state.z.center) : 0;

	          return {
	            x,
	            y,
	            z
	          };
	        }
	      }
	    });
	  }

	  recalibrate() {
	    this.isCalibrated = false;
	  }
	}

	Object.defineProperties(Gyro, {
	  TK_4X: {
	    value: 0.67
	  },
	  TK_1X: {
	    value: 0.167
	  }
	});


	/* istanbul ignore else */
	if (!!process.env.IS_TEST_MODE) {
	  Gyro.Controllers = Controllers;
	  Gyro.purge = () => {
	    priv.clear();
	  };
	}
	gyro = Gyro;
	return gyro;
}

var hygrometer;
var hasRequiredHygrometer;

function requireHygrometer () {
	if (hasRequiredHygrometer) return hygrometer;
	hasRequiredHygrometer = 1;
	const Board = requireBoard();
	const Emitter = emitter;
	const Fn = fn;
	const priv = new Map();

	const {
	  toFixed,
	  POW_2_14,
	  POW_2_16

	} = Fn;

	const writable = true;
	const Controllers = {

	  SHT31D: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "SHT31D", options)
	          .on("data", ({humidity}) => callback(humidity));
	      }
	    },
	    toRelativeHumidity: {
	      writable,
	      value(value) {
	        // Page 2, Table 1
	        // Based on the "Relative Humidity Conversion" formula
	        // 1.1 Humidity Sensor Performance
	        // Typical resoultion 0.01%RH
	        //
	        // Page 14
	        // 4.13 Conversion of Signal Output
	        // RH = 100 * (Srh / ((2 ** 16) - 1))
	        // Srh = Sensor raw humidity
	        return toFixed(100 * (value / (POW_2_16 - 1)), 2);
	      }
	    }
	  },


	  HTU21D: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "HTU21D", options)
	          .on("data", ({humidity}) => callback(humidity));
	      }
	    },
	    toRelativeHumidity: {
	      writable,
	      value(value) {
	        // Page 15
	        // CONVERSION OF SIGNAL OUTPUTS
	        // RH = -6 + 125 * (Srh / (2 ** 16))
	        // Srh = Sensor raw humidity
	        //
	        // Page 3, Table `SENSOR PERFORMANCE`
	        //
	        // Typical resolution 0.04 %RH
	        return toFixed(-6 + 125 * (value / POW_2_16), 2);
	      }
	    }
	  },

	  HIH6130: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "HIH6130", options)
	          .on("data", ({humidity}) => callback(humidity));
	      }
	    },
	    toRelativeHumidity: {
	      writable,
	      value(value) {
	        // Page 3
	        // Equation 1: Humidity Conversion Function
	        // (Humidity Output Count / ((2 ** 14) - 1)) * 100
	        // Page 7, Table 2
	        // Typical resoultion 0.04%RH
	        return toFixed((value / (POW_2_14 - 1)) * 100, 2);
	      }
	    }
	  },

	  DHT_I2C_NANO_BACKPACK: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "DHT_I2C_NANO_BACKPACK", options)
	          .on("data", ({humidity}) => callback(humidity));
	      }
	    },
	    toRelativeHumidity: {
	      // DHT11

	      // Page 4, Table
	      // Typical resolution 1%RH
	      //
	      // DHT21

	      // Page 2, Paragraph 5
	      // Resolution 0.1%RH
	      //
	      // DHT22

	      // Page 2, Paragraph 3
	      // Resolution 0.1%RH
	      writable,
	      value(raw) {
	        return toFixed(raw / 100, 1);
	      }
	    }
	  },

	  TH02: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "TH02", options)
	          .on("data", ({humidity}) => callback(humidity));
	      }
	    },
	    toRelativeHumidity: {
	      // Table 4
	      // Resolution 12bit (16 codes per %RH) -> ~ 2 fractional digits
	      writable,
	      value(value) {
	        if (value > 100) {
	          value = 0;
	        }
	        return toFixed(value || 0, 2);
	      }
	    }
	  },

	  SI7020: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "SI7020", options)
	          .on("data", ({humidity}) => callback(humidity));
	      }
	    },
	    toRelativeHumidity: {
	      writable,
	      value(value) {
	        // Page 7, Table 4
	        // The device can have 12-bit resolution ~ 2 fractional digits (100 / 2^12)
	        //
	        // Page 22, 5.1.1. Measuring Relative Humidity
	        // ((125 * RH_Code) / (2 ** 16)) - 6
	        return toFixed((125 * value / POW_2_16) - 6, 2);
	      }
	    }
	  },

	  BME280: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "BME280", options)
	          .on("data", ({humidity}) => callback(humidity));
	      }
	    },
	    toRelativeHumidity: {
	      writable,
	      value(value) {
	        // Page 23
	        // 47445 / 1024 = 46.333 %RH
	        return toFixed(value / 1024, 3);
	      }
	    }
	  }
	};

	Controllers.DHT11_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;
	Controllers.DHT21_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;
	Controllers.DHT22_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;
	Controllers.SI7021 = Controllers.SI7020;


	class Hygrometer extends Emitter {
	  constructor(options) {
	    super();

	    const freq = options.freq || 25;
	    let last = null;
	    let raw = null;

	    Board.Component.call(
	      this, options = Board.Options(options)
	    );

	    Board.Controller.call(this, Controllers, options);

	    priv.set(this, {});


	    if (!this.toRelativeHumidity) {
	      this.toRelativeHumidity = options.toRelativeHumidity || (x => x);
	    }

	    const propDescriptors = {
	      relativeHumidity: {
	        get() {
	          return this.toRelativeHumidity(raw);
	        }
	      }
	    };
	    // Convenience aliases
	    propDescriptors.RH = propDescriptors.relativeHumidity;

	    Object.defineProperties(this, propDescriptors);

	    if (typeof this.initialize === "function") {
	      this.initialize(options, data => {
	        raw = data;
	      });
	    }

	    setInterval(() => {
	      if (raw == null) {
	        return;
	      }

	      if (Number.isNaN(this.relativeHumidity)) {
	        return;
	      }

	      const data = {};
	      data.RH = data.relativeHumidity = this.relativeHumidity;

	      this.emit("data", data);

	      if (this.relativeHumidity !== last) {
	        last = this.relativeHumidity;
	        this.emit("change", data);
	      }
	    }, freq);
	  }
	}

	/* istanbul ignore else */
	if (!!process.env.IS_TEST_MODE) {
	  Hygrometer.Controllers = Controllers;
	  Hygrometer.purge = () => {
	    priv.clear();
	  };
	}

	hygrometer = Hygrometer;
	return hygrometer;
}

var compass;
var hasRequiredCompass;

function requireCompass () {
	if (hasRequiredCompass) return compass;
	hasRequiredCompass = 1;
	const Board = requireBoard();
	const Emitter = emitter;
	const {int16, RAD_TO_DEG, TAU} = fn;
	const priv = new Map();

	const Controllers = {

	  HMC5883L: {
	    REGISTER: {
	      value: {
	        // Page 11
	        // Table 2: Register List
	        //
	        // Configuration Register A
	        CRA: 0x00,
	        // Configuration Register B
	        // This may change, depending on gauss
	        CRB: 0x01,
	        // Mode Register
	        MODE: 0x02,
	        // Data Output X MSB Register
	        READ: 0x03,
	      }
	    },
	    initialize: {
	      value(opts, dataHandler) {
	        const state = priv.get(this);
	        const address = opts.address || 0x1E;
	        const READLENGTH = 6;

	        state.scale = 1;

	        Object.assign(state, new Compass.Scale(opts.gauss || 0.88));

	        opts.address = address;

	        this.io.i2cConfig(opts);

	        // Page 18
	        // OPERATIONAL EXAMPLES...
	        //
	        // 1. Write CRA (00) – send 0x3C 0x00 0x70 (8-average, 15 Hz default, normal measurement)
	        //
	        // Set CRA
	        // Page 12
	        this.io.i2cWrite(address, this.REGISTER.CRA, 0x70);

	        // Set CRB
	        // Page 13
	        this.io.i2cWrite(address, this.REGISTER.CRB, 0x40);

	        // Page 14
	        // Measurement: Continuous
	        this.io.i2cWrite(address, this.REGISTER.MODE, 0x00);

	        this.io.i2cRead(address, this.REGISTER.READ, READLENGTH, bytes => {
	          dataHandler({
	            x: int16(bytes[0], bytes[1]),
	            y: int16(bytes[4], bytes[5]),
	            z: int16(bytes[2], bytes[3]),
	          });
	        });
	      }
	    },
	    toScaledHeading: {
	      value({x, y}) {
	        const state = priv.get(this);

	        return ToHeading(x * state.scale, y * state.scale);
	      }
	    }
	  },

	  /**
	   * HMC6352: 2-Axis Compass Module
	   * 0x42
	   *
	   * http://bildr.org/2011/01/hmc6352/
	   */
	  HMC6352: {
	    REGISTER: {
	      value: {
	        READ: 0x41
	      }
	    },
	    initialize: {
	      value(opts, dataHandler) {
	        const state = priv.get(this);
	        const address = opts.address || 0x21;
	        const READLENGTH = 2;

	        state.scale = 1;

	        opts.delay = 10;
	        opts.address = address;

	        this.io.i2cConfig(opts);

	        this.io.i2cWrite(address, this.REGISTER.READ);

	        // Initialize continuous read
	        this.io.i2cRead(address, this.REGISTER.READ, READLENGTH, bytes => {
	          dataHandler({
	            x: (((bytes[0] << 8) + bytes[1]) / 10) | 0,
	            y: null,
	            z: null,
	          });
	        });
	      }
	    },
	    toScaledHeading: {
	      value({x}) {
	        const state = priv.get(this);
	        return x * state.scale;
	      },
	    },
	  },

	  BNO055: {
	    initialize: {
	      value(opts, dataHandler) {
	        const IMU = requireSip();
	        const driver = IMU.Drivers.get(this.board, "BNO055", opts);
	        const state = priv.get(this);

	        // AF p.32, Table 3-19: Magnetometer Unit settings
	        state.sensitivity = 16;

	        driver.on("data", ({magnetometer}) => {
	          dataHandler(magnetometer);
	        });
	      }
	    },
	    toScaledHeading: {
	      value(raw) {
	        const state = priv.get(this);

	        const x = raw.x / state.sensitivity;
	        const y = raw.y / state.sensitivity;

	        return ToHeading(x, y);
	      },
	    },
	  },

	  // http://www.nxp.com/files/sensors/doc/data_sheet/MAG3110.pdf
	  MAG3110: {
	    REGISTER: {
	      value: {
	        // Page 15
	        // Table 11 Register Address Map
	        // DR_STATUS
	        STATUS: 0x00,
	        // OUT_X_MSB
	        READ: 0x01,
	        // OFF_X_MSB
	        OFFSETS: 0x09,
	        // CTRL_REG1
	        CTRL_REG1: 0x10,
	        // CTRL_REG2
	        CTRL_REG2: 0x11,
	      }
	    },
	    initialize: {
	      value(opts, dataHandler) {
	        const state = priv.get(this);

	        // MAG3110 has only one possible address
	        const address = 0x0E;
	        let isDataPending = false;
	        let temp;

	        state.isCalibrated = false;
	        state.isPreCalibrated = false;
	        state.hasEmittedCalibration = false;
	        state.measurements = 20;

	        state.offsets = {
	          x: 0,
	          y: 0,
	          z: 0,
	        };
	        state.accum = {
	          x: { offset: null, high: 0, low: 0 },
	          y: { offset: null, high: 0, low: 0 },
	          z: { offset: null, high: 0, low: 0 },
	        };
	        opts.delay = 2;
	        opts.address = address;

	        if (opts.offsets) {
	          state.isCalibrated = true;
	          state.isPreCalibrated = true;

	          if (Array.isArray(opts.offsets)) {
	            temp = opts.offsets.slice();
	            opts.offsets = {
	              x: temp[0],
	              y: temp[1],
	              z: temp[2],
	            };
	          }

	          state.accum.x.low = opts.offsets.x[0];
	          state.accum.x.high = opts.offsets.x[1];
	          state.accum.x.offset = (state.accum.x.low + state.accum.x.high) / 2;

	          state.accum.y.low = opts.offsets.y[0];
	          state.accum.y.high = opts.offsets.y[1];
	          state.accum.y.offset = (state.accum.y.low + state.accum.y.high) / 2;

	          state.accum.z.low = opts.offsets.z[0];
	          state.accum.z.high = opts.offsets.z[1];
	          state.accum.z.offset = (state.accum.z.low + state.accum.z.high) / 2;
	        }

	        /*
	          Page 14
	          4.2.7 MAG3110 Setup Examples

	          Continuous measurements with ODR = 80 Hz, OSR = 1

	          1. Enable automatic magnetic sensor resets by setting bit AUTO_MRST_EN in CTRL_REG2.
	            (CTRL_REG2 = 0x80)
	          2. Put MAG3110 in active mode 80 Hz ODR with OSR = 1 by writing 0x01 to CTRL_REG1
	            (CTRL_REG1 = 0x01)
	          3. At this point it is possible to sync with MAG3110 utilizing INT1 pin or
	              using polling of the DR_STATUS register as explained in section 4.2.5.
	        */

	        this.io.i2cConfig(opts);
	        /*
	          Page 21
	          5.5.2 CTRL_REG2 (0x11)
	          Table 33.
	          CTRL_REG2 Register

	          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
	          |---|---|---|---|---|---|---|---|
	          | A |   | R | M |   |   |   |   |

	          A: Automatic Magnetic Sensor Reset. Default value: 0.
	          R: Data output correction. Default value: 0.
	          M: Magnetic Sensor Reset (One-Shot). Default value: 0.

	          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
	          |---|---|---|---|---|---|---|---|
	          | 1 |   | 0 | 0 |   |   |   |   |

	          0b10000000 = 128 = 0x80

	          RAW
	          0b10100000 = 160 = 0xA0
	        */
	        this.io.i2cWrite(address, this.REGISTER.CTRL_REG2, 0x80);
	        // this.io.i2cWrite(address, this.REGISTER.CTRL_REG2, 0xA0);

	        /*
	          Page 20
	          5.5.1 CTRL_REG1 (0x10)
	          Table 30. CTRL_REG1 Register
	          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
	          |---|---|---|---|---|---|---|---|
	          |DR2|DR1|DR0|OS1|OS0|FR |TM |AC |

	          See Table 31. CTRL_REG1 Description for complete descriptions

	          (Active mode, 80Hz)

	          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
	          |---|---|---|---|---|---|---|---|
	          | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |

	          0b00000001 = 1 = 0x01
	        */
	        this.io.i2cWrite(address, this.REGISTER.CTRL_REG1, 0x01);

	        const measured = {
	          x: 0,
	          y: 0,
	          z: 0,
	        };

	        const readCycle = () => {
	          this.io.i2cReadOnce(address, this.REGISTER.STATUS, 1, data => {
	            /*
	              Page 16
	              5.1.1 DR_STATUS (0x00)

	              Table 12
	              | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
	              |---|---|---|---|---|---|---|---|
	              |OVR|ZOW|XOW|YOW|DR |ZDR|YDR|XDR|

	              Table 13
	              (Contains Complete descriptions)

	              OVR (ZYXOW) (X, Y, Z-axis Data Overwrite. Default value: 0.)
	                0: No Data overwritten
	                1: Previous X, Y, Z has been overwritten

	              ZOW, YOW, XOW:
	                0: No Data overwritten
	                1: Previous X, Y, Z has been overwritten

	              DR (ZYXDR) (X or Y or Z-axis new Data Ready. Default value: 0.)
	                0: No new data is ready
	                1: New full set of data is ready

	              ZDR, YDR, XDR:
	                0: No new data is ready
	                1: New X, Y, Z data is ready

	              | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
	              |---|---|---|---|---|---|---|---|
	              | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 |


	              0b00001111 = 15 = 0x0F: A complete set of axis data is available

	              0b11111111 = 255 = 0xFF: All data is newly written

	            */
	            if (!isDataPending && (data[0] === 0x0F || data[0] === 0xFF)) {
	              isDataPending = true;

	              this.io.i2cReadOnce(address, this.REGISTER.READ, 6, bytes => {
	                let timeout = 0;

	                isDataPending = false;

	                measured.x = int16(bytes[0], bytes[1]);
	                measured.y = int16(bytes[2], bytes[3]);
	                measured.z = int16(bytes[4], bytes[5]);

	                if (!state.isCalibrated) {

	                  if (state.accum.x.offset === null) {
	                    state.accum.x.offset = measured.x;
	                    state.accum.x.low = measured.x;
	                    state.accum.x.high = measured.x;
	                  }

	                  if (state.accum.y.offset === null) {
	                    state.accum.y.offset = measured.y;
	                    state.accum.y.low = measured.y;
	                    state.accum.y.high = measured.y;
	                  }

	                  state.accum.x.low = Math.min(state.accum.x.low, measured.x);
	                  state.accum.x.high = Math.max(state.accum.x.high, measured.x);
	                  state.accum.x.offset = Math.trunc((state.accum.x.low + state.accum.x.high) / 2);

	                  state.accum.y.low = Math.min(state.accum.y.low, measured.y);
	                  state.accum.y.high = Math.max(state.accum.y.high, measured.y);
	                  state.accum.y.offset = Math.trunc((state.accum.y.low + state.accum.y.high) / 2);

	                  state.accum.z.low = Math.min(state.accum.z.low, measured.z);
	                  state.accum.z.high = Math.max(state.accum.z.high, measured.z);
	                  state.accum.z.offset = Math.trunc((state.accum.z.low + state.accum.z.high) / 2);

	                  --state.measurements;

	                  if (!state.measurements) {
	                    state.isCalibrated = true;
	                  }
	                }

	                if (state.isCalibrated) {
	                  if (!state.hasEmittedCalibration) {
	                    state.hasEmittedCalibration = true;

	                    state.offsets.x = state.accum.x.offset;
	                    state.offsets.y = state.accum.y.offset;
	                    state.offsets.z = state.accum.z.offset;

	                    this.io.i2cWrite(address, this.REGISTER.OFFSETS, [
	                      state.offsets.x >> 7, (state.offsets.x << 1) & 0xFF,
	                      state.offsets.y >> 7, (state.offsets.y << 1) & 0xFF,
	                      state.offsets.z >> 7, (state.offsets.z << 1) & 0xFF,
	                    ]);

	                    this.emit("calibrated", {
	                      x: [state.accum.x.low, state.accum.x.high],
	                      y: [state.accum.y.low, state.accum.y.high],
	                      z: [state.accum.z.low, state.accum.z.high],
	                    });
	                  }

	                  timeout = Math.floor(1000 / 80);

	                  dataHandler(measured);
	                }

	                // MAG3110 is set to read at 80Hz (do this after calibration)
	                setTimeout(readCycle, timeout);
	              });
	            } else {
	              readCycle();
	            }
	          });
	        };

	        readCycle();
	      }
	    },
	    calibrate: {
	      value(measurements) {
	        const state = priv.get(this);

	        state.isCalibrated = false;
	        state.measurements = measurements;
	      }
	    },
	    toScaledHeading: {
	      value({y, x}) {
	        const state = priv.get(this);
	        const scale = {
	          x: 1 / (state.accum.x.high - state.accum.x.low),
	          y: 1 / (state.accum.y.high - state.accum.y.low),
	        };

	        let heading = Math.atan2(-y * scale.y, x * scale.x);

	        if (heading < 0) {
	          heading += TAU;
	        }

	        return Math.trunc(heading * RAD_TO_DEG);
	      },
	    },
	  },

	  /**
	   * LSM303C: 6Dof 3-Axis Magnetometer & Accelerometer
	   *
	   * https://learn.sparkfun.com/tutorials/lsm303c-6dof-hookup-guide
	   * https://github.com/sparkfun/LSM303C_6_DOF_IMU_Breakout
	   */
	  LSM303C: {
	    initialize: {
	      value(opts, dataHandler) {
	        const IMU = requireSip();
	        const driver = IMU.Drivers.get(this.board, "LSM303C", opts);

	        driver.on("data", ({magnetometer}) => {
	          dataHandler(magnetometer);
	        });
	      }
	    },
	    toScaledHeading: {
	      value({x, y}) {
	        return ToHeading(x, y);
	      },
	    },
	  },
	};


	/**
	 * Compass
	 * @constructor
	 *
	 * five.Compass();
	 *
	 * five.Compass({
	 *  controller: "HMC5883L",
	 *  freq: 50,
	 * });
	 *
	 *
	 * Device Shorthands:
	 *
	 * "HMC5883L": new five.Magnetometer()
	 *
	 *
	 * @param {Object} opts [description]
	 *
	 */

	class Compass extends Emitter {
	  constructor(opts) {

	    super();

	    Board.Component.call(
	      this, opts = Board.Options(opts)
	    );

	    const freq = opts.freq || 25;
	    let raw = {
	      x: null,
	      y: null,
	      z: null,
	    };
	    const state = {
	      x: 0,
	      y: 0,
	      z: 0,
	      scale: 0,
	      register: 0,
	      heading: 0
	    };

	    Board.Controller.call(this, Controllers, opts);

	    if (!this.toScaledHeading) {
	      this.toScaledHeading = opts.toScaledHeading || (raw => raw);
	    }

	    priv.set(this, state);

	    if (typeof this.initialize === "function") {
	      this.initialize(opts, data => raw = data);
	    }

	    setInterval(() => {
	      if (raw.x === null) {
	        return;
	      }
	      let isChange = false;

	      state.x = raw.x;
	      state.y = raw.y;
	      state.z = raw.z;

	      const heading = this.heading;

	      if (heading !== state.heading) {
	        state.heading = heading;
	        isChange = true;
	      }

	      this.emit("data", {heading});

	      if (isChange) {
	        this.emit("change", {heading});
	      }
	    }, freq);

	    Object.defineProperties(this, {
	      /**
	       * [read-only] Bearing information
	       * @name bearing
	       * @property
	       * @type Object
	       *
	       *
	          name
	          abbr
	          low
	          mid
	          high
	          heading
	       *
	       */

	      bearing: {
	        get() {
	          const length = Compass.Points.length;
	          const heading = this.heading;
	          let point;

	          for (let i = 0; i < length; i++) {
	            point = Compass.Points[i];

	            if (heading >= point.low && heading <= point.high) {
	              // Specify fields to return to avoid returning the
	              // range array (too much noisy data)
	              return {
	                name: point.name,
	                abbr: point.abbr,
	                low: point.low,
	                high: point.high,
	                heading
	              };
	            }
	          }
	        }
	      },

	      /**
	       * [read-only] Raw X/Y/Z
	       * @name raw
	       * @property
	       * @type Object
	       *
	          x
	          y
	          z
	       */
	      raw: {
	        get() {
	          return {
	            x: raw.x,
	            y: raw.y,
	            z: raw.z
	          };
	        }
	      },

	      /**
	       * [read-only] Heading (azimuth)
	       * @name heading
	       * @property
	       * @type number
	       */
	      heading: {
	        get() {
	          return this.toScaledHeading(raw);
	        }
	      }
	    });
	  }

	  /**
	   * Compass.scale Set the scale gauss for compass readings
	   * @param  {Number} gauss [description]
	   * @return {register}       [description]
	   *
	   * Ported from:
	   * http://bildr.org/2012/02/hmc5883l_arduino/
	   */
	}

	Compass.Scale = class {

	  constructor(gauss) {
	    if (gauss === 0.88) {
	      this.register = 0x00;
	      this.scale = 0.73;
	    } else if (gauss === 1.3) {
	      this.register = 0x01;
	      this.scale = 0.92;
	    } else if (gauss === 1.9) {
	      this.register = 0x02;
	      this.scale = 1.22;
	    } else if (gauss === 2.5) {
	      this.register = 0x03;
	      this.scale = 1.52;
	    } else if (gauss === 4.0) {
	      this.register = 0x04;
	      this.scale = 2.27;
	    } else if (gauss === 4.7) {
	      this.register = 0x05;
	      this.scale = 2.56;
	    } else if (gauss === 5.6) {
	      this.register = 0x06;
	      this.scale = 3.03;
	    } else if (gauss === 8.1) {
	      this.register = 0x07;
	      this.scale = 4.35;
	    } else {
	      this.register = 0x00;
	      this.scale = 1;
	    }

	    // Setting is in the top 3 bits of the register.
	    this.register = this.register << 5;
	  }
	};


	function ToHeading(x, y) {
	  /**
	   *
	   * Applications of Magnetoresistive Sensors in Navigation Systems
	   * by Michael J. Caruso of Honeywell Inc.
	   * http://www.ssec.honeywell.com/position-sensors/datasheets/sae.pdf
	   *
	   *
	   * Azimuth (x=0, y<0)   = 90.0 (3)
	   * Azimuth (x=0, y>0)   = 270.0
	   * Azimuth (x<0)        = 180 - [arcTan(y/x)]*180/PI
	   * Azimuth (x>0, y<0)   = - [arcTan(y/x)]*180/PI
	   * Azimuth (x>0, y>0)   = 360 - [arcTan(y/x)]*180/PI
	   */
	  /**
	   * http://bildr.org/2012/02/hmc5883l_arduino/
	   * @type {[type]}
	   * Copyright (C) 2011 Love Electronics (loveelectronics.co.uk)

	   This program is free software: you can redistribute it and/or modify it under the terms of the version 3 GNU General Public License as published by the Free Software Foundation.

	   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

	   You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.

	   */

	  let radians = Math.atan2(y, x);

	  if (radians < 0) {
	    radians += TAU;
	  }

	  if (radians > TAU) {
	    radians -= TAU;
	  }

	  return radians * RAD_TO_DEG;
	}


	/**
	 * Compass.Points
	 *
	 * 32 Point Compass
	 * +1 for North
	 *
	 */

	Compass.Points = [{
	  name: "North",
	  abbr: "N",
	  low: 354.38,
	  high: 360
	}, {
	  name: "North",
	  abbr: "N",
	  low: 0,
	  high: 5.62
	}, {
	  name: "North by East",
	  abbr: "NbE",
	  low: 5.63,
	  high: 16.87
	}, {
	  name: "North-NorthEast",
	  abbr: "NNE",
	  low: 16.88,
	  high: 28.12
	}, {
	  name: "NorthEast by North",
	  abbr: "NEbN",
	  low: 28.13,
	  high: 39.37
	}, {
	  name: "NorthEast",
	  abbr: "NE",
	  low: 39.38,
	  high: 50.62
	}, {
	  name: "NorthEast by East",
	  abbr: "NEbE",
	  low: 50.63,
	  high: 61.87
	}, {
	  name: "East-NorthEast",
	  abbr: "ENE",
	  low: 61.88,
	  high: 73.12
	}, {
	  name: "East by North",
	  abbr: "EbN",
	  low: 73.13,
	  high: 84.37
	}, {
	  name: "East",
	  abbr: "E",
	  low: 84.38,
	  high: 95.62
	}, {
	  name: "East by South",
	  abbr: "EbS",
	  low: 95.63,
	  high: 106.87
	}, {
	  name: "East-SouthEast",
	  abbr: "ESE",
	  low: 106.88,
	  high: 118.12
	}, {
	  name: "SouthEast by East",
	  abbr: "SEbE",
	  low: 118.13,
	  high: 129.37
	}, {
	  name: "SouthEast",
	  abbr: "SE",
	  low: 129.38,
	  high: 140.62
	}, {
	  name: "SouthEast by South",
	  abbr: "SEbS",
	  low: 140.63,
	  high: 151.87
	}, {
	  name: "South-SouthEast",
	  abbr: "SSE",
	  low: 151.88,
	  high: 163.12
	}, {
	  name: "South by East",
	  abbr: "SbE",
	  low: 163.13,
	  high: 174.37
	}, {
	  name: "South",
	  abbr: "S",
	  low: 174.38,
	  high: 185.62
	}, {
	  name: "South by West",
	  abbr: "SbW",
	  low: 185.63,
	  high: 196.87
	}, {
	  name: "South-SouthWest",
	  abbr: "SSW",
	  low: 196.88,
	  high: 208.12
	}, {
	  name: "SouthWest by South",
	  abbr: "SWbS",
	  low: 208.13,
	  high: 219.37
	}, {
	  name: "SouthWest",
	  abbr: "SW",
	  low: 219.38,
	  high: 230.62
	}, {
	  name: "SouthWest by West",
	  abbr: "SWbW",
	  low: 230.63,
	  high: 241.87
	}, {
	  name: "West-SouthWest",
	  abbr: "WSW",
	  low: 241.88,
	  high: 253.12
	}, {
	  name: "West by South",
	  abbr: "WbS",
	  low: 253.13,
	  high: 264.37
	}, {
	  name: "West",
	  abbr: "W",
	  low: 264.38,
	  high: 275.62
	}, {
	  name: "West by North",
	  abbr: "WbN",
	  low: 275.63,
	  high: 286.87
	}, {
	  name: "West-NorthWest",
	  abbr: "WNW",
	  low: 286.88,
	  high: 298.12
	}, {
	  name: "NorthWest by West",
	  abbr: "NWbW",
	  low: 298.13,
	  high: 309.37
	}, {
	  name: "NorthWest",
	  abbr: "NW",
	  low: 309.38,
	  high: 320.62
	}, {
	  name: "NorthWest by North",
	  abbr: "NWbN",
	  low: 320.63,
	  high: 331.87
	}, {
	  name: "North-NorthWest",
	  abbr: "NNW",
	  low: 331.88,
	  high: 343.12
	}, {
	  name: "North by West",
	  abbr: "NbW",
	  low: 343.13,
	  high: 354.37
	}];

	Object.freeze(Compass.Points);

	/**
	 * Fires once every N ms, equal to value of `freq`. Defaults to 66ms
	 *
	 * @event
	 * @name read
	 * @memberOf Compass
	 */


	/**
	 * Fires when the calculated heading has changed
	 *
	 * @event
	 * @name headingchange
	 * @memberOf Compass
	 */


	/* istanbul ignore else */
	if (!!process.env.IS_TEST_MODE) {
	  Compass.Controllers = Controllers;
	  Compass.purge = () => {
	    priv.clear();
	  };
	}

	  compass = Compass;
	return compass;
}

var orientation;
var hasRequiredOrientation;

function requireOrientation () {
	if (hasRequiredOrientation) return orientation;
	hasRequiredOrientation = 1;
	const Board = requireBoard();
	const Emitter = emitter;
	const priv = new Map();

	const Controllers = {

	  BNO055: {
	    initialize: {
	      value(options, dataHandler) {
	        const IMU = requireSip();
	        const driver = IMU.Drivers.get(this.board, "BNO055", options);

	        driver.on("data", data => {
	          dataHandler(data);
	        });
	      }
	    },
	    toScaledEuler: {
	      value({euler}) {

	        return {
	          heading: euler.heading / 16,
	          roll: euler.roll / 16,
	          pitch: euler.pitch / 16,
	        };
	      }
	    },
	    toScaledQuarternion: {
	      value({quarternion}) {
	        return {
	          w: quarternion.w * (1 / (1 << 14)),
	          x: quarternion.x * (1 / (1 << 14)),
	          y: quarternion.y * (1 / (1 << 14)),
	          z: quarternion.z * (1 / (1 << 14)),
	        };
	      }
	    },
	    calibration: {
	      get() {
	        return priv.get(this).calibration;
	      }
	    },
	    isCalibrated: {
	      get() {
	        //only returns true if the calibration of the NDOF/Fusion algo is calibrated
	        return ((this.calibration >> 6) & 0x03) === 0x03; //are we fully calibrated
	      }
	    }
	  },
	};


	/**
	 * Orientation
	 * @constructor
	 *
	 * five.Orientation();
	 *
	 * five.Orientation({
	 *  controller: "BNO055",
	 *  freq: 50,
	 * });
	 *
	 *
	 * Device Shorthands:
	 *
	 * "BNO055": new five.Orientation()
	 *
	 *
	 * @param {Object} options [description]
	 *
	 */
	class Orientation extends Emitter {
	  constructor(options) {
	    super();

	    Board.Component.call(
	      this, options = Board.Options(options)
	    );

	    Board.Controller.call(this, Controllers, options);

	    const freq = options.freq || 25;
	    const state = {
	      euler: {
	        heading: 0,
	        roll: 0,
	        pitch: 0,
	      },
	      quarternion: {
	        w: 0,
	        x: 0,
	        y: 0,
	        z: 0,
	      },
	      calibration: 0,
	    };
	    let raw = null;

	    priv.set(this, state);

	    /* istanbul ignore else */
	    if (!this.toScaledQuarternion) {
	      this.toScaledQuarternion = options.toScaledQuarternion || (x => x);
	    }

	    /* istanbul ignore else */
	    if (!this.toScaledEuler) {
	      this.toScaledEuler = options.toScaledEuler || (x => x);
	    }


	    /* istanbul ignore else */
	    if (typeof this.initialize === "function") {
	      this.initialize(options, data => raw = data);
	    }

	    setInterval(() => {
	      if (raw === null) {
	        return;
	      }
	      let didOrientationChange = false;
	      let didCalibrationChange = false;

	      ["heading", "roll", "pitch"].forEach(el => {
	        /* istanbul ignore else */
	        if (state.euler[el] !== raw.orientation.euler[el]) {
	          didOrientationChange = true;
	        }
	        state.euler[el] = raw.orientation.euler[el];
	      });

	      ["w", "x", "y", "z"].forEach(el => {
	        /* istanbul ignore else */
	        if (state.quarternion[el] !== raw.orientation.quarternion[el]) {
	          didOrientationChange = true;
	        }
	        state.quarternion[el] = raw.orientation.quarternion[el];
	      });

	      //if we have a raw calibration state...
	      // not sure if this is the best place... some devices may not have a calibration state...
	      if (raw.calibration) {
	        /* istanbul ignore else */
	        if (state.calibration !== raw.calibration) {
	          didCalibrationChange = true;
	        }
	        state.calibration = raw.calibration;
	      }

	      const data = {
	        euler: this.euler,
	        quarternion: this.quarternion,
	        calibration: this.calibration
	      };

	      this.emit("data", data);

	      if (didOrientationChange) {
	        this.emit("change", data);
	      }

	      //not sure how we can get this event into other drivers
	      if (didCalibrationChange) {
	        this.emit("calibration", this.calibration);
	      }
	    }, freq);
	  }

	  get euler() {
	    return this.toScaledEuler(priv.get(this));
	  }

	  get quarternion() {
	    return this.toScaledQuarternion(priv.get(this));
	  }
	}

	/* istanbul ignore else */
	if (!!process.env.IS_TEST_MODE) {
	  Orientation.Controllers = Controllers;
	  Orientation.purge = () => {
	    priv.clear();
	  };
	}


	orientation = Orientation;
	return orientation;
}

const Emitter$c = emitter;

let Withinable$3 = class Withinable extends Emitter$c {
  constructor() {
    super();
  }
  within(range, unit, callback) {
    let upper;

    if (typeof range === "number") {
      upper = range;
      range = [0, upper];
    }

    if (!Array.isArray(range)) {
      throw new Error("within expected a range array");
    }

    if (typeof unit === "function") {
      callback = unit;
      unit = "value";
    }

    if (typeof this[unit] === "undefined") {
      return this;
    }

    this.on("data", () => {
      const value = this[unit];
      if (value >= range[0] && value <= range[1]) {
        callback.call(this, null, value);
      }
    });
    return this;
  }
};

var withinable = Withinable$3;

var thermometer;
var hasRequiredThermometer;

function requireThermometer () {
	if (hasRequiredThermometer) return thermometer;
	hasRequiredThermometer = 1;
	const Board = requireBoard();
	const EventEmitter = EventEmitter$2;
	const Withinable = withinable;
	const {
	  toFixed,
	  POW_2_16,
	} = fn;
	const {
	  log,
	  round,
	  trunc,
	} = Math;

	const CELSIUS_TO_KELVIN = 273.15;

	function analogHandler(options, callback) {
	  const pin = options.pin;

	  this.io.pinMode(pin, this.io.MODES.ANALOG);
	  this.io.analogRead(pin, data => {
	    callback.call(this, data);
	  });
	}

	const activeDrivers = new Map();

	const Drivers = {
	  MAX31850K: {
	    initialize: {
	      value(board, options) {
	        const CONSTANTS = {
	          TEMPERATURE_FAMILY: 0x3B,
	          CONVERT_TEMPERATURE_COMMAND: 0x44,
	          READ_SCRATCHPAD_COMMAND: 0xBE,
	          READ_COUNT: 9
	        };

	        const pin = options.pin;
	        const freq = options.freq || 100;
	        const getAddress = device => {
	          // 64-bit device code
	          // device[0]    => Family Code
	          // device[1..6] => Serial Number (device[1] is LSB)
	          // device[7]    => CRC
	          let result = 0;
	          for (let i = 6; i > 0; i--) {
	            result = result * 256 + device[i];
	          }
	          return result;
	        };

	        board.io.sendOneWireConfig(pin, true);
	        board.io.sendOneWireSearch(pin, (err, devices) => {
	          if (err) {
	            this.emit("error", err);
	            return;
	          }

	          this.devices = devices.filter(device => device[0] === CONSTANTS.TEMPERATURE_FAMILY, this);

	          if (devices.length === 0) {
	            this.emit("error", new Error("FAILED TO FIND TEMPERATURE DEVICE"));
	            return;
	          }

	          this.devices.forEach(device => {
	            this.emit("initialized", getAddress(device));
	          });

	          let getAddresses = () => {
	            if (this.addresses) {
	              return this.devices.filter(function(device) {
	                const address = getAddress(device);
	                return this.addresses.includes(address);
	              }, this);
	            } else {
	              return [this.devices[0]];
	            }
	          };

	          let readTemperature = () => {
	            let result;

	            // request tempeature conversion
	            let devicesToWait = getAddresses();
	            let devicesToRead = getAddresses();

	            devicesToRead.forEach(device => {
	              board.io.sendOneWireReset(pin);
	              board.io.sendOneWireWrite(pin, device, CONSTANTS.CONVERT_TEMPERATURE_COMMAND);
	            });

	            let isConversionAvailable = done => {
	              let nextDevice;

	              if (devicesToWait.length === 0) {
	                return done();
	              }

	              nextDevice = devicesToWait.pop();

	              board.io.sendOneWireReset(pin);

	              board.io.sendOneWireWriteAndRead(pin, nextDevice, CONSTANTS.READ_SCRATCHPAD_COMMAND, CONSTANTS.READ_COUNT, (err, data) => {
	                if (!data[0]) {
	                  devicesToWait.push(nextDevice);

	                  if (data[1] !== 0) { //*****checks if second data bit is 0, if not its an error and gets thrown out
	                    return done();
	                  }
	                }

	                isConversionAvailable(done);
	              });
	            };

	            let readOne = () => {
	              let device;

	              if (devicesToRead.length === 0) {
	                setTimeout(readTemperature, freq);
	                return;
	              }

	              device = devicesToRead.pop();
	              // read from the scratchpad
	              board.io.sendOneWireReset(pin);

	              board.io.sendOneWireWriteAndRead(pin, device, CONSTANTS.READ_SCRATCHPAD_COMMAND, CONSTANTS.READ_COUNT, (error, data) => {
	                if (error) {
	                  this.emit("error", error);
	                  return;
	                }

	                result = (data[1] << 8) | data[0];
	                this.emit("data", getAddress(device), result);

	                readOne();
	              });
	            };

	            isConversionAvailable(readOne);
	          };

	          readTemperature();
	        });
	      }
	    },
	    register: {
	      value(address) {
	        if (!this.addresses) {
	          this.addresses = [];
	        }

	        this.addresses.push(address);
	      }
	    }
	  },
	  DS18B20: {
	    initialize: {
	      value(board, options) {
	        const CONSTANTS = {
	          TEMPERATURE_FAMILY: 0x28,
	          CONVERT_TEMPERATURE_COMMAND: 0x44,
	          READ_SCRATCHPAD_COMMAND: 0xBE,
	          READ_COUNT: 2
	        };

	        const pin = options.pin;
	        const freq = options.freq || 100;
	        let getAddress;
	        let readThermometer;
	        let readOne;

	        getAddress = device => {
	          // 64-bit device code
	          // device[0]    => Family Code
	          // device[1..6] => Serial Number (device[1] is LSB)
	          // device[7]    => CRC
	          let i;

	          let result = 0;
	          for (i = 6; i > 0; i--) {
	            result = result * 256 + device[i];
	          }
	          return result;
	        };

	        board.io.sendOneWireConfig(pin, true);
	        board.io.sendOneWireSearch(pin, (err, devices) => {
	          if (err) {
	            this.emit("error", err);
	            return;
	          }

	          this.devices = devices.filter(device => device[0] === CONSTANTS.TEMPERATURE_FAMILY, this);

	          if (devices.length === 0) {
	            this.emit("error", new Error("FAILED TO FIND TEMPERATURE DEVICE"));
	            return;
	          }

	          this.devices.forEach(device => {
	            this.emit("initialized", getAddress(device));
	          });

	          readThermometer = () => {
	            let devicesToRead;
	            let result;

	            // request tempeature conversion
	            if (this.addresses) {
	              devicesToRead = this.devices.filter(function(device) {
	                const address = getAddress(device);
	                return this.addresses.includes(address);
	              }, this);
	            } else {
	              devicesToRead = [this.devices[0]];
	            }

	            devicesToRead.forEach(device => {
	              board.io.sendOneWireReset(pin);
	              board.io.sendOneWireWrite(pin, device, CONSTANTS.CONVERT_TEMPERATURE_COMMAND);
	            });

	            // the delay gives the sensor time to do the calculation
	            board.io.sendOneWireDelay(pin, 1);

	            readOne = () => {
	              let device;

	              if (devicesToRead.length === 0) {
	                setTimeout(readThermometer, freq);
	                return;
	              }

	              device = devicesToRead.pop();
	              // read from the scratchpad
	              board.io.sendOneWireReset(pin);

	              board.io.sendOneWireWriteAndRead(pin, device, CONSTANTS.READ_SCRATCHPAD_COMMAND, CONSTANTS.READ_COUNT, (err, data) => {
	                if (err) {
	                  this.emit("error", err);
	                  return;
	                }

	                result = (data[1] << 8) | data[0];
	                this.emit("data", getAddress(device), result);

	                readOne();
	              });
	            };

	            readOne();
	          };

	          readThermometer();
	        });
	      }
	    },
	    register: {
	      value(address) {
	        if (!this.addresses) {
	          this.addresses = [];
	        }

	        this.addresses.push(address);
	      }
	    }
	  }
	};

	Drivers.get = (board, driverName, options) => {
	  let drivers;
	  let driver;

	  if (!activeDrivers.has(board)) {
	    activeDrivers.set(board, {});
	  }

	  drivers = activeDrivers.get(board);

	  const key = `${driverName}_${options.pin}`;

	  if (!drivers[key]) {
	    driver = new EventEmitter();
	    Object.defineProperties(driver, Drivers[driverName]);
	    driver.initialize(board, options);
	    drivers[key] = driver;
	  }

	  return drivers[key];
	};

	Drivers.clear = () => {
	  activeDrivers.clear();
	};

	// References
	//
	const Controllers = {
	  // Generic thermistors. See datasheet for each device.
	  ANALOG: {
	    initialize: {
	      value: analogHandler
	    }
	  },

	  LM35: {
	    initialize: {
	      value: analogHandler
	    },
	    toCelsius: {
	      value(raw) {
	        // VOUT = 1500 mV at 150°C
	        // VOUT = 250 mV at 25°C
	        // VOUT = –550 mV at –55°C

	        const mV = this.aref * 1000 * raw / 1023;

	        // 10mV = 1°C
	        //
	        // Page 1
	        return round(mV / 10);
	      }
	    }
	  },

	  LM335: {
	    initialize: {
	      value: analogHandler
	    },
	    toCelsius: {
	      value(raw) {
	        // OUTPUT 10mV/°K

	        const mV = this.aref * 1000 * raw / 1023;

	        // Page 1
	        return round((mV / 10) - CELSIUS_TO_KELVIN);
	      }
	    }
	  },

	  TMP36: {
	    initialize: {
	      value: analogHandler
	    },
	    toCelsius: {
	      value(raw) {
	        // Analog Reference Voltage
	        const mV = this.aref * 1000 * raw / 1023;

	        // tempC = (mV / 10) - 50
	        //
	        // Page 3
	        // Table 1
	        // Accuracy 1°C
	        return round((mV / 10) - 50);
	      }
	    }
	  },

	  TMP102: {
	    ADDRESSES: {
	      value: [0x48]
	    },
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        const address = Drivers.addressResolver(this, options);

	        this.io.i2cConfig(options);

	        // Addressing is unclear.

	        this.io.i2cRead(address, 0x00, 2, data => {
	          // Based on the example code from https://www.sparkfun.com/products/11931
	          let raw = ((data[0] << 8) | data[1]) >> 4;

	          // The tmp102 does twos compliment but has the negative bit in the wrong spot, so test for it and correct if needed
	          if (raw & (1 << 11)) {
	            raw |= 0xF800; // Set bits 11 to 15 to 1s to get this reading into real twos compliment
	          }

	          // twos compliment
	          raw = raw >> 15 ? ((raw ^ 0xFFFF) + 1) * -1 : raw;

	          callback(raw);
	        });
	      }
	    },
	    toCelsius: {
	      value(raw) {
	        // 6.5 Electrical Characteristics
	        // –25°C to 85°C ±0.5
	        return toFixed(raw / 16, 1);
	      }
	    },
	  },

	  MAX31850K: {
	    initialize: {
	      value(options, callback) {
	        const state = priv.get(this);
	        const address = options.address;
	        const driver = Drivers.get(this.board, "MAX31850K", options);

	        if (address) {
	          state.address = address;
	          driver.register(address);
	        } else {
	          if (driver.addressless) {
	            this.emit("error", "You cannot have more than one MAX31850K without an address");
	          }
	          driver.addressless = true;
	        }

	        driver.once("initialized", dataAddress => {
	          if (!state.address) {
	            state.address = dataAddress;
	          }
	        });

	        driver.on("data", (dataAddress, data) => {
	          if (!address || dataAddress === address) {
	            callback(data);
	          }
	        });
	      }
	    },
	    toCelsius: {
	      // Page 4
	      // Thermocouple Temperature Data Resolution
	      value(value) {
	        return toFixed(value / 16, 2);
	      }
	    },
	    address: {
	      get() {
	        return priv.get(this).address || 0x00;
	      }
	    }
	  },

	  // Based on code from Westin Pigott:
	  //    https://github.com/westinpigott/one-wire-temps
	  // And the datasheet:
	  // OneWire protocol.  The device needs to be issued a "Convert Temperature"
	  // command which can take up to 10 microseconds to compute, so we need
	  // tell the board to delay 1 millisecond before issuing the "Read Scratchpad" command
	  //
	  // This device requires the OneWire support enabled via ConfigurableFirmata
	  DS18B20: {
	    initialize: {
	      value(options, callback) {
	        const state = priv.get(this);
	        const address = options.address;
	        const driver = Drivers.get(this.board, "DS18B20", options);

	        if (address) {
	          state.address = address;
	          driver.register(address);
	        } else {
	          if (driver.addressless) {
	            this.emit("error", "You cannot have more than one DS18B20 without an address");
	          }
	          driver.addressless = true;
	        }

	        driver.once("initialized", dataAddress => {
	          if (!state.address) {
	            state.address = dataAddress;
	          }
	        });

	        driver.on("data", (dataAddress, data) => {
	          if (!address || dataAddress === address) {
	            callback(data);
	          }
	        });
	      }
	    },
	    toCelsius: {
	      value(value) {
	        // ±0.5°C accuracy from -10°C to +85°C
	        //
	        // Temp resolution is as follows:
	        // 9b,    10b     11b,     12b
	        // 0.5°C, 0.25°C, 0.125°C, 0.0625°C
	        //
	        // I'm not sure which we're reading, so default to 4
	        // fractional digits until we can verify
	        return toFixed(value / 16, 4);
	      }
	    },
	    address: {
	      get() {
	        return priv.get(this).address || 0x00;
	      }
	    }
	  },


	  SHT31D: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "SHT31D", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(value) {
	        // Page 4, Table 1.2 Temperature Sensor Performance
	        // Resolution: 0.015
	        //
	        // Page 14
	        // 4.13 Conversion of Signal Output
	        // T[C] = -45 + 175 * (St / ((2 ** 26) - 1))
	        // St = Sensor raw temperature
	        return toFixed(-45 + (175 * (value / (POW_2_16 - 1))), 3);
	      }
	    }
	  },

	  HTU21D: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "HTU21D", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(value) {
	        // Page 5
	        // Digital Relative Humidity sensor with Temperature output
	        // Resolution shows 0.01-0.04
	        //
	        // Page 15
	        // CONVERSION OF SIGNAL OUTPUTS
	        // T = -46.85 + 175.72 * (Stemp / (2 ** 16))
	        // Stemp = Sensor raw temperature
	        return toFixed(-46.85 + (175.72 * (value / POW_2_16)), 2);
	      }
	    }
	  },
	  HIH6130: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "HIH6130", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(raw) {
	        // Page 3
	        // 5.0 Calculation of Optional Temperature
	        // from the Digital Output
	        //
	        // -40 C = 0
	        // 125 C = 2 ** 14 - 1
	        return round(raw / 1000);
	      }
	    }
	  },

	  DHT_I2C_NANO_BACKPACK: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "DHT_I2C_NANO_BACKPACK", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(raw) {
	        // Page 2
	        // 5. Product parameters
	        // Range: ... ±2°C
	        return round(raw / 100);
	      }
	    }
	  },

	  TH02: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "TH02", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(raw) {
	        // Page 8, Table 5
	        // Temperature Sensor
	        // Accuracy Typical at 25 °C — ±0.5 ±1.0 °C
	        return toFixed(raw, 1);
	      }
	    }
	  },

	  MPU6050: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "MPU6050", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(raw) {
	        // No sub-degree/fractional parts illustrated in datasheet
	        return round((raw / 340.00) + 36.53);
	      }
	    }
	  },

	  BNO055: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "BNO055", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(raw) {
	        // Page 37, Table 3-37
	        // Temperature data representation
	        // 1°C = 1 LSB
	        // raw is already C
	        return trunc(raw);
	      }
	    }
	  },

	  MPL115A2: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "MPL115A2", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(raw) {
	        // No description, so removing fractional parts
	        return trunc((raw - 498) / -5.35 + 25);
	      }
	    }
	  },

	  MPL3115A2: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "MPL3115A2", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(raw) {
	        // Page 5
	        // Table 2 Mechanical Characteristics
	        // Accuracy @ 25 °C ±1°C
	        return round(raw / 16);
	      }
	    }
	  },

	  MS5611: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "MS5611", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(raw) {
	        // Page 1
	        // TECHNICAL DATA
	        // Resolution <0.01 °C
	        return toFixed(raw, 2);
	      }
	    }
	  },

	  GROVE: {
	    initialize: {
	      value: analogHandler
	    },
	    toCelsius: {
	      value(raw) {
	        // http://www.seeedstudio.com/wiki/Grove_-_Temperature_Sensor
	        const adcres = 1023;
	        // Beta parameter
	        const beta = 3975;
	        // 10 kOhm (sensor resistance)
	        const rb = 10000;
	        // Ginf = 1/Rinf
	        // var ginf = 120.6685;
	        // Reference Temperature 25°C
	        const tempr = 298.15;

	        const rthermistor = (adcres - raw) * rb / raw;
	        const tempc = 1 / (log(rthermistor / rb) / beta + 1 / tempr) - CELSIUS_TO_KELVIN;

	        return round(tempc);
	      }
	    }
	  },

	  // MF52A103J3470
	  TINKERKIT: {
	    initialize: {
	      value: analogHandler
	    },
	    toCelsius: {
	      value(value) {
	        const adcres = 1023;
	        const beta = 3950;
	        const rb = 10000; // 10 kOhm
	        const ginf = 120.6685; // Ginf = 1/Rinf

	        const rthermistor = rb * (adcres / value - 1);
	        const tempc = beta / (log(rthermistor * ginf));

	        return round(tempc - CELSIUS_TO_KELVIN);
	      }
	    }
	  },

	  BMP180: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "BMP180", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(value) {
	        // Page 6, Table 1
	        // Operating conditions, output signal and mechanical characteristics
	        //
	        // Resolution of output data
	        // pressure 0.01 hPa
	        // temperature 0.1 °C
	        return toFixed(value, 1);
	      }
	    }
	  },

	  BMP280: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "BMP280", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(value) {
	        // Page 8
	        //
	        // Resolution of output data in ultra high resolution mode*
	        // Pressure 0.0016 hPa
	        // Temperature 0.01 °C
	        //
	        // * resolution mode is currently not configurable.
	        //
	        return toFixed(value, 2);
	      }
	    }
	  },

	  BME280: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "BME280", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(value) {
	        // Page 23
	        // Resolution is 0.01 DegC.
	        return toFixed(value, 2);
	      }
	    }
	  },

	  SI7020: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "SI7020", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(value) {
	        // Page 9, Table 5. Temperature Sensor
	        // Accuracy1 –10 °C< tA < 85 °C — ±0.3 ±0.4 °C
	        //
	        // Page 23
	        // (See temperature conversion expression)
	        return toFixed((175.72 * value / 65536) - 46.85, 1);
	      }
	    }
	  },

	  MCP9808: {
	    ADDRESSES: {
	      value: [0x18]
	    },
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        const address = Drivers.addressResolver(this, options);

	        this.io.i2cConfig(options);
	        // Page 17
	        // Register 0x05 = Ta (Temp, Ambient)
	        this.io.i2cRead(address, 0x05, 2, data => {
	          // Page 24
	          // 5.1.3 AMBIENT TEMPERATURE REGISTER (TA)
	          // Page 25
	          let value = (((data[0] << 8) | data[1]) & 0x0FFF) / 16;

	          if (value & 0x1000) {
	            value -= 256;
	          }
	          callback(value);
	        });
	      }
	    },
	    toCelsius: {
	      value(value) {
	        // Page 1
	        // Microchip Technology Inc.s MCP9808 digital
	        // temperature sensor converts temperatures between
	        // -20°C and +100°C to a digital word with
	        // ±0.25°C/±0.5°C (typical/maximum) accuracy.
	        return toFixed(value, 2);
	      }
	    },
	  },

	  LSM303C: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "LSM303C", options)
	          .on("data", ({temperature}) => callback(temperature));
	      }
	    },
	    toCelsius: {
	      value(value) {
	        // int16 resolution, 8 bits per C, 0 = 25 C
	        return toFixed((value / 8) + 25, 1);
	      }
	    }
	  },
	};

	Controllers.BMP085 = Controllers.BMP180;
	Controllers.GY521 = Controllers.MPU6050;
	Controllers.SI7021 = Controllers.SI7020;
	Controllers.DHT11_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;
	Controllers.DHT21_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;
	Controllers.DHT22_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;
	Controllers.DEFAULT = Controllers.ANALOG;

	var priv = new Map();

	class Thermometer extends Withinable {
	  constructor(options) {
	    super();

	    let last = null;
	    let raw = null;

	    Board.Component.call(
	      this, options = Board.Options(options)
	    );


	    Board.Controller.call(this, Controllers, options);

	    const state = {
	      enabled: typeof options.enabled === "undefined" ? true : options.enabled,
	      intervalId: null,
	      freq: options.freq || 25,
	      previousFreq: options.freq || 25,
	    };

	    priv.set(this, state);

	    // Analog Reference Voltage (default to board.io.aref || 5)
	    this.aref = options.aref || this.io.aref || 5;

	    if (!this.toCelsius) {
	      this.toCelsius = options.toCelsius || (x => x);
	    }

	    // TODO: Move this out of the constructor
	    const eventProcessing = () => {
	      if (raw == null) {
	        return;
	      }

	      const data = {};
	      data.C = data.celsius = this.celsius;
	      data.F = data.fahrenheit = this.fahrenheit;
	      data.K = data.kelvin = this.kelvin;

	      this.emit("data", data);

	      if (this.celsius !== last) {
	        last = this.celsius;
	        this.emit("change", data);
	      }
	    };

	    const descriptors = {
	      celsius: {
	        get() {
	          return this.toCelsius(raw);
	        }
	      },
	      fahrenheit: {
	        get() {
	          return toFixed((this.celsius * 9 / 5) + 32, 2);
	        }
	      },
	      kelvin: {
	        get() {
	          return toFixed(this.celsius + CELSIUS_TO_KELVIN, 2);
	        }
	      },
	      freq: {
	        get() {
	          return state.freq;
	        },
	        set(newFreq) {
	          state.freq = newFreq;
	          if (state.intervalId) {
	            clearInterval(state.intervalId);
	          }

	          if (state.freq !== null) {
	            state.intervalId = setInterval(eventProcessing, newFreq);
	          }
	        }
	      },
	    };
	    // Convenience aliases
	    descriptors.C = descriptors.celsius;
	    descriptors.F = descriptors.fahrenheit;
	    descriptors.K = descriptors.kelvin;

	    Object.defineProperties(this, descriptors);

	    if (typeof this.initialize === "function") {
	      this.initialize(options, data => raw = data);
	    }

	    // Set the freq property only after the get and set functions are defined
	    // and only if the sensor is not `enabled: false`
	    if (state.enabled) {
	      this.freq = state.freq;
	    }
	  }

	  /**
	   * enable Enable a disabled thermometer.
	   *
	   * @return {Object} instance
	   *
	   */
	  enable() {
	    const state = priv.get(this);

	    /* istanbul ignore else */
	    if (!state.enabled) {
	      this.freq = state.freq || state.previousFreq;
	    }

	    return this;
	  }

	  /**
	   * disable Disable an enabled thermometer.
	   *
	   * @return {Object} instance
	   *
	   */
	  disable() {
	    const state = priv.get(this);

	    /* istanbul ignore else */
	    if (state.enabled) {
	      state.enabled = false;
	      state.previousFreq = state.freq;
	      this.freq = null;
	    }

	    return this;
	  }
	}

	Thermometer.Drivers = Drivers;

	/* istanbul ignore else */
	if (!!process.env.IS_TEST_MODE) {
	  Thermometer.Controllers = Controllers;
	  Thermometer.purge = () => {
	    priv.clear();
	  };
	}

	thermometer = Thermometer;
	return thermometer;
}

var sip;
var hasRequiredSip;

function requireSip () {
	if (hasRequiredSip) return sip;
	hasRequiredSip = 1;
	const Board = requireBoard();
	const Emitter = emitter;
	const Fn = fn;
	const priv = new Map();
	const activeDrivers = new Map();
	const {
	  int16,
	  uint16,
	  uint24,
	  s32,
	  u32,
	} = Fn;

	const ACCELEROMETER = "accelerometer";
	const ALTIMETER = "altimeter";
	const BAROMETER = "barometer";
	const GYRO = "gyro";
	const HYGROMETER = "hygrometer";
	const MAGNETOMETER = "magnetometer";
	const ORIENTATION = "orientation";
	const THERMOMETER = "thermometer";

	function Components(controller, options) {
	  const state = priv.get(this);
	  const descriptors = Object.create(null);

	  for (const component of this.components) {
	    // TODO: Can this be put inside the get accessor?
	    // - Lazy init?
	    state[component] = new Components[component](
	      Object.assign({
	        controller: options.controller || controller,
	        freq: options.freq,
	        board: this.board,
	      }, options)
	    );

	    descriptors[component] = {
	      get() {
	        return state[component];
	      }
	    };

	    // TODO: Get rid of this trash
	    if (backwardCompatibilityGarbageHacks[component]) {
	      descriptors[backwardCompatibilityGarbageHacks[component]] = descriptors[component];
	    }
	  }

	  Object.defineProperties(this, descriptors);
	}

	Components.accelerometer = requireAccelerometer();
	Components.altimeter = requireAltimeter();
	Components.barometer = requireBarometer();
	Components.gyro = requireGyro();
	Components.hygrometer = requireHygrometer();
	Components.magnetometer = requireCompass();
	Components.orientation = requireOrientation();
	Components.thermometer = requireThermometer();
	Components.sunlight = requireBlokdots_sunlight();

	const backwardCompatibilityGarbageHacks = {
	  thermometer: "temperature",
	};

	const Drivers = {

	  // blokdots ————————————————————
	  SI1145: {
	    ADDRESSES: {
	      value: [0x60]
	    },
	    REGISTER: {
	      value: {
	        ALS_VIS: 0x22, // Visible Light Ambient
	        ALS_IR: 0x24, // Infrared Light Ambient
	        AUX_UV: 0x2C, // UV

	        INT_CFG: 0x03,
	        IRQ_ENABLE: 0x04,
	        IRQMODE1: 0x05,
	        IRQMODE2: 0x06,
	        HW_KEY: 0x07,
	        MEAS_RATE0: 0x08, 
	        MEAS_RATE1: 0x09,
	        PSALS_AUTO: 0x0F,
	        UCOEF0: 0x13,
	        UCOEF1: 0x14,
	        UCOEF2: 0x15,
	        UCOEF3: 0x16,
	        COMMAND: 0x18,
	        RESPONSE: 0x20,
	        IRQ_STATUS: 0x21,

	        PARAM_WR: 0x17,
	        PARAM_RD: 0x2E,
	        PARAM_SET: 0xA0,

	        PSLED21: 0x0F,
	      }
	    },
	    COMMANDS: {
	      value: {
	        RESET: 0x01,
	      }
	    },
	    PARAMS: {
	      value: {
	        CHLIST: 0x01,
	        CHLIST_ENUV:0x80,
	        CHLIST_ENALSIR:0x20,
	        CHLIST_ENALSVIS:0x10,
	        CHLIST_ENPS1:0x01,

	        PS1ADCMUX:0x07,
	        ADCMUX_LARGEIR:0x03,
	        PSLED12SEL:0x02,
	        PSLED12SEL_PS1LED1:0x10,
	        PSADCGAIN:0x0B,
	        PSADCOUNTER:0x0A,
	        PSADCMISC:0x0C,
	        PSADCMISC_RANGE:0x20, 
	        PSADCMISC_PSMODE:0x04,

	        ALSIRADCMUX:0x0E,
	        ADCMUX_SMALLIR:0x00,
	        ALSIRADCGAIN:0x1E,
	        ALSIRADCOUNTER:0x1D,

	        ALSIRADCMISC:0x1F,
	        ALSIRADCMISC_RANGE:0x20,
	        ALSVISADCGAIN:0x11,
	        ALSVISADCOUNTER:0x10,
	        ADCCOUNTER_511CLK:0x70,
	        ALSVISADCMISC:0x12,
	        ALSVISADCMISC_VISRANGE:0x20,
	      }
	    },
	    initialize: {
	      value(board, options) {


	        // SOURCES 
	        // ###############
	        // Registers -> https://files.seeedstudio.com/wiki/Grove-Sunlight_Sensor/res/Si1145-46-47.pdf 
	        // Code -> https://github.com/adafruit/Adafruit_SI1145_Library/blob/master/Adafruit_SI1145.cpp

	        const io = board.io;
	        const address = Drivers.addressResolver(this, options);

	        const computed = {
	          ir: null,
	          uv: null,
	          vis: null
	        };
	  
	        io.i2cConfig(options);

	        const reset = () => {
	          io.i2cWriteReg(address, this.REGISTER.MEASRATE0, 0);
	          io.i2cWriteReg(address, this.REGISTER.MEASRATE1, 0);
	          io.i2cWriteReg(address, this.REGISTER.IRQ_ENABLE, 0);
	          io.i2cWriteReg(address, this.REGISTER.IRQMODE1, 0);
	          io.i2cWriteReg(address, this.REGISTER.IRQMODE2, 0);
	          io.i2cWriteReg(address, this.REGISTER.INT_CFG, 0);
	          io.i2cWriteReg(address, this.REGISTER.IRQ_STATUS, 0xFF);

	          // setTimeout(()=>{
	            io.i2cWriteReg(address, this.REGISTER.COMMAND, this.COMMANDS.RESET);
	            setTimeout(()=>{
	              io.i2cWriteReg(address, this.REGISTER.HW_KEY, 0x17);
	            },50);
	          // },50)
	        };

	        reset();

	        const writeParam = (p,v) => {
	          io.i2cWriteReg(address, this.REGISTER.PARAM_WR, v);
	          io.i2cWriteReg(address, this.REGISTER.COMMAND, p | this.REGISTER.PARAM_SET);
	          // return io.i2cReadOnce(address, this.REGISTER.PARAM_RD, 1,console.log);
	        };

	        setTimeout(()=>{

	          // enable UVindex measurement coefficients!
	          io.i2cWriteReg(address, this.REGISTER.UCOEF0, 0x29);
	          io.i2cWriteReg(address, this.REGISTER.UCOEF1, 0x89);
	          io.i2cWriteReg(address, this.REGISTER.UCOEF2, 0x02);
	          io.i2cWriteReg(address, this.REGISTER.UCOEF3, 0x00);

	          // Enable UV Sensor
	          writeParam(this.PARAMS.CHLIST, this.PARAMS.CHLIST_ENUV | this.PARAMS.CHLIST_ENALSIR | this.PARAMS.CHLIST_ENALSVIS | this.PARAMS.CHLIST_ENPS1);

	          // enable interrupt on every sample
	          io.i2cWriteReg(address, this.REGISTER.INTCFG, this.REGISTER.INTCFG_INTOE);
	          io.i2cWriteReg(address, this.REGISTER.IRQEN, this.REGISTER.IRQEN_ALSEVERYSAMPLE);

	          // Prox Sense 1 ————————————————————

	          // program LED current
	          io.i2cWriteReg(address, this.REGISTER.PSLED21, 0x03); // 20mA for LED 1 only
	          writeParam(this.PARAMS.PS1ADCMUX, this.PARAMS.ADCMUX_LARGEIR);
	          // prox sensor #1 uses LED #1
	          writeParam(this.PARAMS.PSLED12SEL, this.PARAMS.PSLED12SEL_PS1LED1);
	          // fastest clocks, clock div 1
	          writeParam(this.PARAMS.PSADCGAIN, 0);
	          // take 511 clocks to measure
	          writeParam(this.PARAMS.PSADCOUNTER, this.PARAMS.ADCCOUNTER_511CLK);
	          // in prox mode, high range
	          writeParam(this.PARAMS.PSADCMISC,
	                     this.PARAMS.PSADCMISC_RANGE | this.PARAMS.PSADCMISC_PSMODE);

	          writeParam(this.PARAMS.ALSIRADCMUX, this.PARAMS.ADCMUX_SMALLIR);
	          // fastest clocks, clock div 1
	          writeParam(this.PARAMS.ALSIRADCGAIN, 0);
	          // take 511 clocks to measure
	          writeParam(this.PARAMS.ALSIRADCOUNTER, this.PARAMS.ADCCOUNTER_511CLK);
	          // in high range mode
	          writeParam(this.PARAMS.ALSIRADCMISC, this.PARAMS.ALSIRADCMISC_RANGE);

	          // fastest clocks, clock div 1
	          writeParam(this.PARAMS.ALSVISADCGAIN, 0);
	          // take 511 clocks to measure
	          writeParam(this.PARAMS.ALSVISADCOUNTER, this.PARAMS.ADCCOUNTER_511CLK);
	          // in high range mode (not normal signal)
	          writeParam(this.PARAMS.ALSVISADCMISC, this.PARAMS.ALSVISADCMISC_VISRANGE);

	          // Prox Sense 1 # END ————————————————————


	          // measurement rate for auto —————————————
	          io.i2cWriteReg(address, this.REGISTER.MEAS_RATE0, 0xFF);
	          // 255 * 31.25uS = 8ms

	          // auto run
	          io.i2cWriteReg(address, this.REGISTER.COMMAND, this.REGISTER.PSALS_AUTO);

	          readCycle();

	        // Wait until after reset
	        }, 500); 

	        
	        const handler = (data, type) => {

	          // console.log(type, data)

	          const compVal = uint16(data[1], data[0]);

	          // const compVal = parseInt( data[0], 16 );
	          
	          switch( type ){
	            case 'uv':
	              computed.uv = compVal;
	              break;
	            case 'ir':
	              computed.ir = compVal;
	              break;
	            case 'vis':
	              computed.vis = compVal;
	              break;
	          }
	          
	        };

	        const readCycle = () => {
	          
	          // io.i2cWriteReg(address, this.REGISTER.COMMAND, 0x00);
	          
	          // io.i2cRead(address, this.REGISTER.AUX_UV, 2, handler);
	          io.i2cReadOnce(address, this.REGISTER.AUX_UV, 2, (arr)=>handler(arr,'uv'));
	          io.i2cReadOnce(address, this.REGISTER.ALS_IR, 2, (arr)=>handler(arr,'ir'));
	          // io.i2cReadOnce(address, this.REGISTER.ALS_VIS, 2, (arr)=>handler(arr,'vis'));

	          // io.i2cWrite(address, this.REGISTER.ALS_VIS, [0x00, 0x00])
	          // io.i2cReadOnce(address, 2, (arr)=>handler(arr,'vis'));

	          io.i2cReadOnce(address, this.REGISTER.ALS_VIS, 2, (arr)=>handler(arr,'vis'));
	          
	          // console.log( computed )
	          this.emit("data", computed);

	          // start again
	          setTimeout(readCycle, 500);
	        };
	      }
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.SI1145, options);
	        return `SI1145-${address}`;
	      }
	    }
	  },

	  // ————————————————————————————————

	  SHT31D: {
	    ADDRESSES: {
	      value: [0x44]
	    },
	    REGISTER: {
	      value: {
	        // Table 13
	        SOFT_RESET: 0x22,
	        // Table 8
	        MEASURE_HIGH_REPEATABILITY: 0x2400,


	      }
	    },
	    initialize: {
	      value(board, options) {
	        const READLENGTH = 6;
	        const io = board.io;
	        const address = Drivers.addressResolver(this, options);
	        io.i2cConfig(options);

	        io.i2cWrite(address, [
	          // Page 12, Table 13
	          this.REGISTER.SOFT_RESET >> 8,
	          this.REGISTER.SOFT_RESET & 0xFF,
	        ]);

	        const computed = {
	          temperature: null,
	          humidity: null,
	        };

	        // temp msb, temp lsb, temp CRC, humidity msb, humidity lsb, humidity CRC
	        const readCycle = () => {
	          // Page 10, Table 8
	          // Send high repeatability measurement command
	          io.i2cWrite(address, [
	            this.REGISTER.MEASURE_HIGH_REPEATABILITY >> 8,
	            this.REGISTER.MEASURE_HIGH_REPEATABILITY & 0xFF,
	          ]);

	          setTimeout(() => {
	            io.i2cReadOnce(address, READLENGTH, data => {
	              computed.temperature = uint16(data[0], data[1]);
	              computed.humidity = uint16(data[3], data[4]);
	              this.emit("data", computed);
	              readCycle();
	            });
	          }, 16);
	        };

	        readCycle();
	      }
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.SHT31D, options);
	        return `sht-31d-${address}`;
	      }
	    }
	  },

	  HTU21D: {
	    ADDRESSES: {
	      value: [0x40]
	    },
	    REGISTER: {
	      value: {
	        HUMIDITY: 0xE5,
	        TEMPERATURE: 0xE3,
	        SOFT_RESET: 0xFE,
	      }
	    },
	    initialize: {
	      value(board, options) {
	        const io = board.io;
	        const address = Drivers.addressResolver(this, options);
	        // The "no hold" measurement requires waiting
	        // _at least_ 22ms between register write and
	        // register read. Delay is measured in μs:
	        // 22ms = 22000μs; recommend 50ms = 50000μs
	        options.delay = 50000;

	        io.i2cConfig(options);
	        io.i2cWrite(address, this.REGISTER.SOFT_RESET);

	        const computed = {
	          temperature: null,
	          humidity: null,
	        };

	        let cycle = 0;
	        const readCycle = () => {
	          // Despite the registers being back to back, the HTU21D
	          // does not like when 5 bytes are requested, so we put
	          // the two data sources on their own read channels.
	          const isTemperatureCycle = cycle === 0;
	          const register = isTemperatureCycle ? this.REGISTER.TEMPERATURE : this.REGISTER.HUMIDITY;

	          io.i2cReadOnce(address, register, 2, data => {
	            if (isTemperatureCycle) {
	              computed.temperature = uint16(data[0], data[1]);
	            } else {
	              computed.humidity = uint16(data[0], data[1]);
	            }

	            if (++cycle === 2) {
	              cycle = 0;
	              this.emit("data", computed);
	            }

	            readCycle();
	          });
	        };

	        readCycle();
	      }
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.HTU21D, options);
	        return `htu-s1d-${address}`;
	      }
	    }
	  },
	  HIH6130: {
	    ADDRESSES: {
	      value: [0x27]
	    },
	    initialize: {
	      value(board, options) {
	        const io = board.io;
	        const address = Drivers.addressResolver(this, options);
	        io.i2cConfig(options);

	        const computed = {
	          humidity: null,
	          temperature: null,
	        };

	        let delay = 36.65;

	        const measureCycle = () => {
	          // The most common use cases involve continuous
	          // sampling of sensor data, so that's what this
	          // controller-driver will provide.
	          io.i2cWrite(address, 0xA0, [0x00, 0x00]);

	          setTimeout(() => {
	            io.i2cWrite(address, 0x80, [0x00, 0x00]);
	            io.i2cReadOnce(address, 4, data => {
	              // Page 2, Figure 4.
	              // Humidity and Temperature Data Fetch, Four Byte Data Read
	              // B7:6 Contain status bits
	              const status = data[0] >> 6;
	              // Mask out B7:6 status bits from H MSB
	              computed.humidity = int16(data[0] & 0x3F, data[1]);
	              // Shift off B1:0 (which are empty)
	              computed.temperature = int16(data[2], data[3] >> 2);

	              // Page 3, 2.6 Status Bits
	              //
	              // 0 0 Normal
	              // 0 1 Stale
	              // 1 0 Command Mode
	              // 1 1 Diagnostic Condition
	              //
	              // When the two status bits read "01", "stale" data is
	              // indicated. This means that the data that already
	              // exists in the sensor's output buffer has already
	              // been fetched by the Master, and has not yet been
	              // updated with the next data from the current measurement
	              // cycle. This can happen when the Master polls the
	              // data quicker than the sensor can update the output buffer.
	              if (status === 0) {
	                delay--;
	              }

	              if (status === 1) {
	                delay++;
	              }

	              this.emit("data", computed);

	              measureCycle();
	            });
	          // Page 3
	          // 3.0 Measurement Cycle
	          // The measurement cycle duration is typically
	          // 36.65 ms for temperature and humidity readings.
	          }, delay);
	        };

	        measureCycle();
	      }
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.HIH6130, options);
	        return `hih6130-${address}`;
	      }
	    }
	  },
	  DHT_I2C_NANO_BACKPACK: {
	    ADDRESSES: {
	      value: [0x0A]
	    },
	    REGISTER: {
	      value: {
	        READ: 0x00,
	      }
	    },
	    initialize: {
	      value(board, options) {
	        const io = board.io;
	        // Correspond to firmware variables
	        const dhtPin = 2;
	        let dhtType = 11;

	        const address = Drivers.addressResolver(this, options);
	        io.i2cConfig(options);

	        const dhtVariantExec = /(\d{2})/.exec(options.controller);
	        const dhtVariant = dhtVariantExec && dhtVariantExec.length && dhtVariantExec[0];

	        if (dhtVariant) {
	          dhtType = +dhtVariant;

	          if (Number.isNaN(dhtType)) {
	            dhtType = 11;
	          }
	        }

	        const computed = {
	          temperature: null,
	          humidity: null,
	        };

	        io.i2cWrite(address, [dhtPin, dhtType]);
	        io.i2cRead(address, 4, data => {
	          computed.humidity = int16(data[0], data[1]);
	          computed.temperature = int16(data[2], data[3]);
	          this.emit("data", computed);
	        });
	      }
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.DHT_I2C_NANO_BACKPACK, options);
	        return `dht_i2c_nano_backpack-${address}`;
	      }
	    }
	  },
	  MPU6050: {
	    ADDRESSES: {
	      value: [0x68, 0x69]
	    },
	    REGISTER: {
	      value: {
	        SETUP: [0x6B, 0x00],
	        READ: 0x3B
	      }
	    },
	    initialize: {
	      value(board, options) {
	        const READLENGTH = 14;
	        const io = board.io;
	        const address = Drivers.addressResolver(this, options);
	        const computed = {
	          accelerometer: {},
	          temperature: {},
	          gyro: {}
	        };

	        io.i2cConfig(options);
	        io.i2cWrite(address, this.REGISTER.SETUP);

	        io.i2cRead(address, this.REGISTER.READ, READLENGTH, data => {
	          computed.accelerometer = {
	            x: int16(data[0], data[1]),
	            y: int16(data[2], data[3]),
	            z: int16(data[4], data[5])
	          };

	          computed.temperature = int16(data[6], data[7]);

	          computed.gyro = {
	            x: int16(data[8], data[9]),
	            y: int16(data[10], data[11]),
	            z: int16(data[12], data[13])
	          };

	          this.emit("data", computed);
	        });
	      },
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.MPU6050, options);
	        return `mpu-6050-${address}`;
	      }
	    }
	  },
	  BNO055: {
	    ADDRESSES: {
	      value: [0x28, 0x29]
	    },
	    REGISTER: {
	      value: {
	        //
	        // 4.2.1 Register map Page 0
	        //
	        READ: {
	          /*
	            All motion data is in the following order:
	            X LSB
	            X MSB
	            Y LSB
	            Y MSB
	            Z LSB
	            Z MSB

	            The quarternion data is WXYZ
	            W LSB
	            W MSB
	            X LSB
	            X MSB
	            Y LSB
	            Y MSB
	            Z LSB
	            Z MSB

	           */

	          // m/s^2 by default
	          ACCEL: 0x08, // X LSB

	          // ? by default
	          MAG: 0x0E, // X LSB

	          // dps by default
	          GYRO: 0x14, // X LSB

	          //euler angles - degrees
	          EULER: 0x1A, // heading LSB

	          //quarternion
	          QUARTERNION: 0x20, // W LSB

	          // °C by default
	          TEMP: 0x34,
	        },

	        LENGTH: {
	          ACCEL: 6,
	          MAG: 6,
	          GYRO: 6,
	          EULER: 6,
	          QUARTERNION: 8,
	          TEMP: 1,
	        },

	        OPR_MODE_ADDR: 0x3D,
	        OPR_MODES: {
	          CONFIG: 0x00,
	          ACCONLY: 0x01,
	          MAGONLY: 0x02,
	          GYRONLY: 0x03,
	          ACCMAG: 0x04,
	          ACCGYRO: 0x05,
	          MAGGYRO: 0x06,
	          AMG: 0x07,
	          IMUPLUS: 0x08,
	          COMPASS: 0x09,
	          M4G: 0x0A,
	          NDOF_FMC_OFF: 0x0B,
	          NDOF: 0x0C,
	        },

	        PWR_MODE_ADDR: 0x3E,
	        PWR_MODES: {
	          NORMAL: 0x00,
	          LOW: 0x01,
	          SUSPEND: 0x02,
	        },

	        PAGE_ID_ADDR: 0x07,
	        PAGE_STATES: {
	          ZERO: 0x00,
	        },

	        CALIBRATION: 0x35,
	        SYS_TRIGGER: 0x3F,

	        UNIT_SEL_ADDR: 0x3B,

	        AXIS_MAP_CONFIG_ADDR: 0x41,
	        AXIS_MAP_SIGN_ADDR: 0x42,
	      }
	    },
	    initialize: {
	      value(board, options) {
	        const io = board.io;

	        // Page 67 4.3.54
	        // a value for what we use to consider the system calibrated,
	        // 0xC0 represents the just fusion algorithm/system
	        const calibrationMask = options.calibrationMask || 0xC0;

	        const address = Drivers.addressResolver(this, options);
	        const computed = {
	          accelerometer: {
	            x: null,
	            y: null,
	            z: null,
	          },
	          gyro: {
	            x: null,
	            y: null,
	            z: null,
	          },
	          magnetometer: {
	            x: null,
	            y: null,
	            z: null,
	          },
	          orientation: {
	            euler: {
	              heading: null,
	              roll: null,
	              pitch: null,
	            },
	            quarternion: {
	              w: null,
	              x: null,
	              y: null,
	              z: null,
	            },
	          },
	          temperature: null,
	          calibration: null,
	        };

	        io.i2cConfig(options);

	        // Put chip into CONFIG operation mode
	        io.i2cWriteReg(address, this.REGISTER.OPR_MODE_ADDR, this.REGISTER.OPR_MODES.CONFIG);

	        // Set register page to 0
	        io.i2cWriteReg(address, this.REGISTER.PAGE_ID_ADDR, this.REGISTER.PAGE_STATES.ZERO);

	        // Page 70, 4.3.63 SYS_TRIGGER
	        //
	        // RST_SYS (Set to reset system)
	        //
	        // B7 B6 B5 B4 B3 B2 B1 B0
	        //  0  0  1  0  0  0  0  0
	        //
	        io.i2cWriteReg(address, this.REGISTER.SYS_TRIGGER, 0x20);

	        const por = new Promise(resolve => {
	          setTimeout(() => {

	            // Normal power mode
	            io.i2cWriteReg(address, this.REGISTER.PWR_MODE_ADDR, this.REGISTER.PWR_MODES.NORMAL);

	            // Page 70, 4.3.63 SYS_TRIGGER
	            //
	            // CLK_SEL:
	            //
	            // B7 B6 B5 B4 B3 B2 B1 B0
	            //  0  0  0  0  0  0  0  0
	            //
	            //io.i2cWriteReg(address, this.REGISTER.SYS_TRIGGER, 0x00);
	            // do we want to enable an external crystal??
	            io.i2cWriteReg(address, this.REGISTER.SYS_TRIGGER, options.enableExternalCrystal ? 0x80 : 0x00);

	            // AF Page 24 3.4, Axis remap
	            //
	            // AXIS_MAP_CONFIG:
	            //
	            // B7 B6 B5 B4 B3 B2 B1 B0
	            //  0  0  0  0  0  0  0  0
	            //  -  -  z  z  y  y  x  x
	            //
	            // x axis = 00, y axis = 01, z axis = 10
	            //
	            // see also the defaults starting on Page 50
	            //
	            const axisMap = options.axisMap || 0x24;
	            io.i2cWriteReg(address, this.REGISTER.AXIS_MAP_CONFIG_ADDR, axisMap);

	            // AF Page 24 3.4, Axis remap
	            //
	            // AXIS_MAP_CONFIG:
	            //
	            // B7 B6 B5 B4 B3 B2 B1 B0
	            //  0  0  0  0  0  0  0  0
	            //  -  -  -  -  -  x  y  z
	            //
	            // 0 = positive, 1 = negative
	            //
	            const axisSign = options.axisSign || 0x00;
	            io.i2cWriteReg(address, this.REGISTER.AXIS_MAP_SIGN_ADDR, axisSign);

	            // Set operational mode to "nine degrees of freedom"
	            setTimeout(() => {
	              io.i2cWriteReg(address, this.REGISTER.OPR_MODE_ADDR, this.REGISTER.OPR_MODES.NDOF);
	              resolve();
	            }, 10);

	            // Page 13, 1.2, OPERATING CONDITIONS BNO055
	            // From reset to config mode
	          }, 650);
	        });

	        por.then(() => new Promise(resolve => {
	          const readCalibration = () => {
	            io.i2cReadOnce(address, this.REGISTER.CALIBRATION, 1, data => {

	              const calibration = data[0];
	              const didCalibrationChange = computed.calibration !== calibration;


	              computed.calibration = calibration;

	              // It is useful, possibly to know when the calibration state changes
	              // some of the calibrations are a little picky to get right, so emitting
	              // the calibration state as it changes is useful.
	              if (didCalibrationChange) {
	                this.emit("calibration", computed.calibration);
	              }

	              if ((calibration & calibrationMask) === calibrationMask) {

	                // Emit the calibration state so we can work out in our userspace if
	                // we are good to go, and for when we are performing the calibration steps
	                // let everyone know we are calibrated.
	                this.emit("calibrated");

	                resolve();
	              } else {
	                readCalibration();
	              }

	            });
	          };

	          readCalibration();

	        })).then(() => {

	          // Temperature requires no calibration, begin reading immediately
	          // here we read out temp, and the calibration state since they are back to back
	          // and the device can, has been observed to go out of calibration and we may want to check
	          io.i2cRead(address, this.REGISTER.READ.TEMP, 2, data => {
	            computed.temperature = data[0];

	            const didCalibrationChange = computed.calibration !== data[1];
	            computed.calibration = data[1];

	            this.emit("data", computed);
	            if (didCalibrationChange) {
	              this.emit("calibration", computed.calibration);
	            }
	          });


	          // ACCEL, MAG and GYRO are 6 bytes each => 18 bytes total
	          io.i2cRead(address, this.REGISTER.READ.ACCEL, 18, data => {

	            computed.accelerometer = {
	              x: int16(data[1], data[0]),
	              y: int16(data[3], data[2]),
	              z: int16(data[5], data[4])
	            };

	            computed.magnetometer = {
	              x: int16(data[7], data[6]),
	              y: int16(data[9], data[8]),
	              z: int16(data[11], data[10])
	            };

	            computed.gyro = {
	              x: int16(data[13], data[12]),
	              y: int16(data[15], data[14]),
	              z: int16(data[17], data[16])
	            };

	            this.emit("data", computed);
	          });

	          // Moved the ndof/quarternions to their own read.. bytes go missing, lots of 32 byte buffers everywhere
	          io.i2cRead(address, this.REGISTER.READ.EULER, 14, data => {

	            // raw euler
	            computed.orientation.euler = {
	              heading: int16(data[1], data[0]),
	              roll: int16(data[3], data[2]),
	              pitch: int16(data[5], data[4])
	            };

	            // scaled quarternion - unitless
	            computed.orientation.quarternion = {
	              w: int16(data[7], data[6]),
	              x: int16(data[9], data[8]),
	              y: int16(data[11], data[10]),
	              z: int16(data[13], data[12])
	            };

	            this.emit("data", computed);
	          });

	        });
	      },
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.BNO055, options);
	        return `bno055-${address}`;
	      }
	    }
	  },

	  MPL115A2: {
	    ADDRESSES: {
	      value: [0x60]
	    },
	    REGISTER: {
	      value: {
	        // Page 5
	        // Table 2. Device Memory Map
	        COEFFICIENTS: 0x04,
	        PADC_MSB: 0x00,
	        CONVERT: 0x12,
	      }
	    },
	    initialize: {
	      value(board, options) {
	        const io = board.io;
	        const address = Drivers.addressResolver(this, options);
	        io.i2cConfig(options);

	        const computed = {
	          pressure: null,
	          temperature: null,
	        };

	        const cof = {
	          a0: null,
	          b1: null,
	          b2: null,
	          c12: null
	        };

	        const handler = data => {

	          // Page 5
	          // 3.1 Pressure, Temperature and Coefficient Bit-Width Specifications
	          const Padc = uint16(data[0], data[1]) >> 6;
	          const Tadc = uint16(data[2], data[3]) >> 6;

	          // Page 6
	          // 3.2 Compensation
	          computed.pressure = cof.a0 + (cof.b1 + cof.c12 * Tadc) * Padc + cof.b2 * Tadc;
	          computed.temperature = Tadc;

	          this.emit("data", computed);

	          readCycle();
	        };

	        var readCycle = () => {
	          io.i2cWriteReg(address, this.REGISTER.CONVERT, 0x00);
	          // Page 5
	          // Table 2. Device Memory Map
	          // Starting from PADC_MSB, read 4 bytes:
	          //
	          // Padc_MSB
	          // Padc_LSB
	          // Tadc_MSB
	          // Tadc_LSB
	          //
	          io.i2cReadOnce(address, this.REGISTER.PADC_MSB, 4, handler);

	          // TODO: User specified "frequency" needs to be applied here.
	        };

	        const pCoefficients = new Promise(resolve => {
	          io.i2cReadOnce(address, this.REGISTER.COEFFICIENTS, 8, data => {
	            const A0 = int16(data[0], data[1]);
	            const B1 = int16(data[2], data[3]);
	            const B2 = int16(data[4], data[5]);
	            const C12 = int16(data[6], data[7]) >> 2;

	            // Source:
	            // https://github.com/adafruit/Adafruit_MPL115A2
	            // a0 is the pressure offset coefficient
	            // b1 is the pressure sensitivity coefficient
	            // b2 is the temperature coefficient of offset (TCO)
	            // c12 is the temperature coefficient of sensitivity (TCS)
	            cof.a0 = A0 / 8;
	            cof.b1 = B1 / 8192;
	            cof.b2 = B2 / 16384;
	            cof.c12 = C12 / 4194304;

	            resolve();
	          });
	        });

	        pCoefficients.then(readCycle);
	      },
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.MPL115A2, options);
	        return `mpl115a2-${address}`;
	      }
	    }
	  },
	  // Based off of the AdaFruit Arduino library for this chip
	  // https://github.com/adafruit/Adafruit_MPL3115A2_Library
	  MPL3115A2: {
	    ADDRESSES: {
	      value: [0x60]
	    },
	    REGISTER: {
	      // Page 18
	      // 13 Register descriptions
	      value: {
	        STATUS: 0x00,
	        PRESSURE: 0x01,
	        CONFIG: 0x13,
	        BAR_IN_MSB: 0x14,
	        BAR_IN_LSB: 0x15,
	        CONTROL: 0x26,
	      }
	    },
	    MASK: {
	      value: {
	        STATUS: {
	          PRESSURE_DATA_READ: 0x04
	        },
	        CONTROL: {
	          SBYB: 0x01,
	          OS128: 0x38,
	          ALTIMETER: 0x80,
	          PRESSURE: 0x00
	        },
	        CONFIG: {
	          TDEFE: 0x01,
	          PDEFE: 0x02,
	          DREM: 0x04
	        }
	      }
	    },
	    initialize: {
	      value(board, options) {
	        const READLENGTH = 6;
	        const io = board.io;
	        let isPressure = false;
	        let elevation = null;
	        let offset = 0;

	        const address = Drivers.addressResolver(this, options);
	        // See http://www.henrylahr.com/?p=99 for implementation approach
	        //
	        let altNow = 0;
	        const computed = {
	          pressure: 0,
	          altitude: 0,
	          temperature: 0
	        };

	        if (typeof options.elevation !== "undefined") {
	          elevation = options.elevation;
	        }

	        if (elevation !== null && elevation <= 0) {
	          offset = Math.abs(elevation) + 1;
	          elevation = 1;
	        }

	        const waitForReady = next => {
	          io.i2cReadOnce(address, this.REGISTER.STATUS, 1, data => {
	            if (data[0] & this.MASK.STATUS.PRESSURE_DATA_READ) {
	              next();
	            } else {
	              setTimeout(() => {
	                waitForReady(next);
	              }, 100);
	            }
	          });
	        };

	        const readValues = () => {
	          const modeMask = isPressure ? this.MASK.CONTROL.PRESSURE : this.MASK.CONTROL.ALTIMETER;
	          const mode = this.MASK.CONTROL.SBYB | this.MASK.CONTROL.OS128 | modeMask;

	          io.i2cWrite(address, this.REGISTER.CONTROL, mode);

	          waitForReady(() => {
	            io.i2cReadOnce(address, this.REGISTER.PRESSURE, READLENGTH, data => {
	              const value = uint24(data[1], data[2], data[3]) >> 4;
	              const temperature = uint16(data[4], data[5]) >> 4;
	              let altVal;

	              computed.temperature = temperature;

	              if (isPressure) {
	                computed.pressure = value;
	                this.emit("data", computed);
	              } else {
	                const m = data[1];
	                const c = data[2];
	                const l = data[3];
	                const fl = (l >> 4) / 16;

	                altVal = (m << 8 | c) + fl;
	                altNow = (altNow * 3 + altVal) / 4;

	                computed.altitude = altNow - offset;
	              }

	              isPressure = !isPressure;

	              readValues();
	            });
	          });
	        };

	        const reads = [];
	        const calibrate = () => {
	          // Clear Oversampling and OST
	          io.i2cWrite(address, this.REGISTER.CONTROL, 0x3B);
	          io.i2cWrite(address, this.REGISTER.CONTROL, 0x39);

	          setTimeout(() => {
	            io.i2cReadOnce(address, this.REGISTER.PRESSURE, READLENGTH, data => {
	              const m = data[1];
	              const c = data[2];
	              const l = data[3];
	              const fl = (l >> 4) / 4;

	              reads.push((m << 10 | c << 2) + fl);

	              if (reads.length === 4) {
	                const curpress = (reads[0] + reads[1] + reads[2] + reads[3]) / 4;
	                const seapress = curpress / ((1 - elevation * 0.0000225577) ** 5.255);

	                // Update Barometric input for Altitude
	                io.i2cWrite(address, this.REGISTER.BAR_IN_MSB, (seapress / 2) >> 8);
	                io.i2cWrite(address, this.REGISTER.BAR_IN_LSB, (seapress / 2) & 0xFF);

	                // Get into Altitude mode
	                // One shot & OST bit
	                io.i2cWrite(address, this.REGISTER.CONTROL, 0xBB);
	                io.i2cWrite(address, this.REGISTER.CONTROL, 0xB9);

	                setTimeout(() => {
	                  io.i2cReadOnce(address, this.REGISTER.PRESSURE, READLENGTH, data => {
	                    const m = data[1];
	                    const c = data[2];
	                    const l = data[3];
	                    const fl = (l >> 4) / 16;

	                    altNow = (m << 8 | c) + fl;

	                    readValues();
	                  });
	                }, 550);

	              } else {
	                calibrate();
	              }
	            });
	          }, 500);
	        };

	        io.i2cConfig(
	          Object.assign(options, {
	            settings: {
	              stopTX: true
	            }
	          })
	        );

	        // configure the chip
	        // Set Altitude Offset.
	        io.i2cWriteReg(address, 0x2D, 0x00);

	        io.i2cWriteReg(address, this.REGISTER.BAR_IN_MSB, 0);
	        io.i2cWriteReg(address, this.REGISTER.BAR_IN_LSB, 0);

	        io.i2cWriteReg(address, this.REGISTER.CONFIG,
	          this.MASK.CONFIG.TDEFE |
	          this.MASK.CONFIG.PDEFE |
	          this.MASK.CONFIG.DREM);

	        if (elevation !== null) {
	          calibrate();
	        } else {
	          readValues();
	        }
	      }
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.MPL3115A2, options);
	        return `mpl3115a2-${address}`;
	      }
	    }
	  },
	  BMP180: {
	    ADDRESSES: {
	      value: [0x77]
	    },
	    REGISTER: {
	      value: {
	        COEFFICIENTS: 0xAA,
	        READ: 0x00,
	        READ_START: 0xF4,
	        READ_RESULT: 0xF6,
	      }
	    },
	    initialize: {
	      value(board, options) {
	        const io = board.io;
	        let elevation = null;
	        let offset = 0;

	        if (typeof options.elevation !== "undefined") {
	          elevation = options.elevation;
	        }

	        if ((elevation != null && elevation <= 0) ||
	            elevation == null) {
	          offset = Math.abs(elevation) + 1;
	          elevation = 1;
	        }

	        const address = Drivers.addressResolver(this, options);
	        /**
	         * Table 1: Operating conditions, output signal and mechanical characteristics
	         *
	         * Pressure Conversion Delay (ms)
	         *
	         * [
	         *   5,   LOW
	         *   8,   STANDARD
	         *   14,  HIGH
	         *   26,  ULTRA
	         *  ]
	         *
	         * These numbers are derived from rounding the Max column of
	         * Table 1, for the Conversion Time entries.
	         */

	        const mode = options.mode || 3;
	        const kpDelay = [5, 8, 14, 26][mode];
	        const oss = Fn.constrain(mode, 0, 3);

	        const cof = {
	          a1: null,
	          a2: null,
	          a3: null,
	          a4: null,
	          a5: null,
	          a6: null,
	          b1: null,
	          b2: null,
	          b5: null,
	          mb: null,
	          mc: null,
	          md: null,
	        };

	        io.i2cConfig(options);

	        const pCoefficients = new Promise(resolve => {
	          io.i2cReadOnce(address, this.REGISTER.COEFFICIENTS, 22, data => {
	            // BMP085
	            // Page 12
	            // 3.4 Calibration Coefficients
	            //
	            // BMP180
	            // Page 13
	            // 3.4 Calibration Coefficients
	            //
	            cof.a1 = int16(data[0], data[1]);
	            cof.a2 = int16(data[2], data[3]);
	            cof.a3 = int16(data[4], data[5]);
	            cof.a4 = uint16(data[6], data[7]);
	            cof.a5 = uint16(data[8], data[9]);
	            cof.a6 = uint16(data[10], data[11]);
	            cof.b1 = int16(data[12], data[13]);
	            cof.b2 = int16(data[14], data[15]);
	            cof.mb = int16(data[16], data[17]);
	            cof.mc = int16(data[18], data[19]);
	            cof.md = int16(data[20], data[21]);

	            resolve();
	          });
	        });

	        pCoefficients.then(() => {

	          // BMP085
	          // Pages 10, 11
	          // 3.3 Measurement of pressure and temperature
	          // Pages 12, 13, 14
	          // 3.5 Calculating pressure and temperature
	          //
	          // BMP180
	          // Pages 11, 12
	          // 3.3 Measurement of pressure and temperature
	          // Pages 13, 14, 15, 16
	          // 3.5 Calculating pressure and temperature
	          //
	          const computed = {
	            altitude: null,
	            pressure: null,
	            temperature: null,
	          };

	          let cycle = 0;

	          // BMP180
	          // Pages 11, 15
	          // 3.3 Measurement of pressure and temperature
	          // 3.5 Calculating pressure and temperature
	          const readCycle = () => {

	            // cycle 0: temperature
	            // cycle 1: pressure

	            const isTemperatureCycle = cycle === 0;
	            const component = isTemperatureCycle ? 0x2E : 0x34 + (oss << 6);
	            const numBytes = isTemperatureCycle ? 2 : 3;
	            const delay = isTemperatureCycle ? 5 : kpDelay;


	            io.i2cWriteReg(address, this.REGISTER.READ_START, component);

	            // Once the READ_START register is set,
	            // delay the READ_RESULT request based on the
	            // mode value provided by the user, or default.
	            setTimeout(() => {
	              io.i2cReadOnce(address, this.REGISTER.READ_RESULT, numBytes, data => {
	                let compensated;
	                let uncompensated;
	                let x1;
	                let x2;
	                let x3;
	                let b3;
	                let b4;
	                let b6;
	                let b7;
	                let b6s;
	                let bx;

	                if (isTemperatureCycle) {
	                  // TEMPERATURE
	                  uncompensated = int16(data[0], data[1]);

	                  // Compute the true temperature
	                  x1 = ((uncompensated - cof.a6) * cof.a5) >> 15;
	                  x2 = ((cof.mc << 11) / (x1 + cof.md)) >> 0;

	                  // Compute b5, which is used by the pressure cycle
	                  cof.b5 = (x1 + x2) | 0;

	                  // Steps of 0.1°C
	                  computed.temperature = ((cof.b5 + 8) >> 4) / 10;
	                } else {
	                  // PRESSURE
	                  uncompensated = uint24(data[0], data[1], data[2]) >> (8 - oss);

	                  b6 = cof.b5 - 4000;
	                  b6s = b6 * b6;
	                  bx = b6s >> 12;

	                  // Intermediary x1 & x2 to calculate x3 for b3
	                  x1 = (cof.b2 * bx) >> 11;
	                  x2 = (cof.a2 * b6) >> 11;
	                  x3 = x1 + x2;
	                  b3 = ((((cof.a1 * 4 + x3) << oss) + 2) / 4) >> 0;

	                  // Intermediary x1 & x2 to calculate x3 for b4
	                  x1 = (cof.a3 * b6) >> 13;
	                  x2 = (cof.b1 * bx) >> 16;
	                  x3 = ((x1 + x2) + 2) >> 2;
	                  b4 = (cof.a4 * (x3 + 32768)) >> 15;
	                  b7 = (uncompensated - b3) * (50000 >> oss);

	                  if (b7 < Fn.POW_2_31) {
	                    compensated = (b7 * 2) / b4;
	                  } else {
	                    compensated = (b7 / b4) * 2;
	                  }

	                  compensated >>= 0;

	                  x1 = (compensated >> 8) * (compensated >> 8);
	                  x1 = (x1 * 3038) >> 16;
	                  x2 = (-7357 * compensated) >> 16;

	                  compensated += (x1 + x2 + 3791) >> 4;

	                  // Steps of 1Pa (= 0.01hPa = 0.01mbar) (=> 0.001kPa)
	                  computed.pressure = compensated;

	                  // 3.7 Calculating pressure at sea level
	                  const seapress = compensated / ((1 - elevation * 0.0000225577) ** 5.255);
	                  const altitude = 44330 * (1 - compensated / seapress ** (1 / 5.255));

	                  // Page 3 (of BMP280 Datasheet)
	                  // ...relative accuracy is ±0.12 hPa, which is equivalent to
	                  // ±1 m difference in altitude.
	                  computed.altitude = Math.round(altitude - offset);
	                }

	                if (++cycle === 2) {
	                  cycle = 0;
	                  this.emit("data", computed);
	                }

	                readCycle();
	              });
	            }, delay);
	          };

	          // Kick off "read loop"
	          //
	          readCycle();
	        });
	      }
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.BMP180, options);
	        return `bmp180-${address}`;
	      }
	    }
	  },

	  BMP280: {
	    ADDRESSES: {
	      value: [0x77]
	    },
	    REGISTER: {
	      value: {
	        COEFFICIENTS: 0x88,
	        CONFIG: 0xF5,
	        MEASURE: 0xF4,
	        // 0xF7, 0xF8, 0xF9
	        // MSB, LSB, XLSB
	        PRESSURE: 0xF7,
	        // 0xFA, 0xFB, 0xFC
	        // MSB, LSB, XLSB
	        TEMPERATURE: 0xFA,
	        RESET: 0xE0,
	      }
	    },
	    initialize: {
	      value(board, options) {
	        const io = board.io;
	        let elevation = null;
	        let offset = 0;

	        if (typeof options.elevation !== "undefined") {
	          elevation = options.elevation;
	        }

	        if ((elevation != null && elevation <= 0) ||
	            elevation == null) {
	          offset = Math.abs(elevation) + 1;
	          elevation = 1;
	        }

	        const address = Drivers.addressResolver(this, options);
	        const dig = {
	          T1: null,
	          T2: null,
	          T3: null,
	          P1: null,
	          P2: null,
	          P3: null,
	          P4: null,
	          P5: null,
	          P6: null,
	          P7: null,
	          P8: null,
	          P9: null,
	        };

	        io.i2cConfig(options);

	        // Page. 24
	        // 4.3.2 Register 0xE0 "reset"
	        io.i2cWrite(address, this.REGISTER.RESET, 0xB6);

	        const pCoefficients = new Promise(resolve => {
	          io.i2cReadOnce(address, this.REGISTER.COEFFICIENTS, 24, data => {

	            // Page 21, Table 17
	            // Compensation parameter storage, naming and data type
	            // These are received LSB FIRST
	            //

	            dig.T1 = uint16(data[1], data[0]);
	            dig.T2 = int16(data[3], data[2]);
	            dig.T3 = int16(data[5], data[4]);

	            dig.P1 = uint16(data[7], data[6]);
	            dig.P2 = int16(data[9], data[8]);
	            dig.P3 = int16(data[11], data[10]);
	            dig.P4 = int16(data[13], data[12]);
	            dig.P5 = int16(data[15], data[14]);
	            dig.P6 = int16(data[17], data[16]);
	            dig.P7 = int16(data[19], data[18]);
	            dig.P8 = int16(data[21], data[20]);
	            dig.P9 = int16(data[23], data[22]);

	            resolve();
	          });
	        });

	        pCoefficients.then(() => {
	          /*
	          CTRL_MEAS bits

	          | DATA LSB                      |
	          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
	          | - | - | - | - | - | - | - | - |
	          | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 |
	          */

	          io.i2cWrite(address, this.REGISTER.MEASURE, 0x3F);

	          const computed = {
	            altitude: null,
	            pressure: null,
	            temperature: null,
	          };

	          //
	          // Page 12
	          // 3.3.1 Pressure measurement
	          //
	          // Page 13
	          // 3.3.2 Temperature measurement
	          //

	          io.i2cRead(address, this.REGISTER.PRESSURE, 6, data => {
	            let compensated = 0;

	            // Page 45
	            // "Returns temperature in DegC, double precision. Output value of
	            // '51.23' equals 51.23 DegC. t_fine carries fine temperature as global value"
	            let fine;

	            // var1, var2
	            //
	            // Expect:
	            //
	            // int32
	            //
	            let v1;

	            let v2;

	            // Page 44
	            // "Both pressure and temperature values are expected to be
	            // received in 20 bit format, positive, stored in a 32 bit signed integer. "
	            //
	            //  V = int32(uint24(m, l, xl))
	            //  V >> 4;
	            //

	            // Page 45
	            let P = s32(uint24(data[0], data[1], data[2]));
	            let T = s32(uint24(data[3], data[4], data[5]));

	            P >>= 4;
	            T >>= 4;

	            // TEMPERATURE

	            // Page 45
	            // bmp280_compensate_T_int32
	            // var1 = ((((adc_T>>3) – ((BMP280_S32_t)dig_T1<<1))) *
	            //                        ((BMP280_S32_t)dig_T2)) >> 11;
	            // var2 = (((((adc_T>>4) – ((BMP280_S32_t)dig_T1)) *
	            //          ((adc_T>>4) – ((BMP280_S32_t)dig_T1))) >> 12) *
	            //          ((BMP280_S32_t)dig_T3)) >> 14;
	            //
	            //
	            const adc16 = T >> 4;
	            const adc16subT1 = adc16 - dig.T1;
	            v1  = (((T >> 3) - (dig.T1 << 1)) * dig.T2) >> 11;
	            v2  = (((adc16subT1 * adc16subT1) >> 12) * dig.T3) >> 14;

	            // t_fine = var1 + var2;
	            fine = v1 + v2;

	            // Page 7, 8
	            // Table 2: Parameter specification
	            //
	            //
	            // Temperature 0.01 °C
	            //
	            // As toFixed(2)
	            //
	            // C = +(((t_fine * 5 + 128) >> 8) / 100).toFixed(resolution)
	            //
	            computed.temperature = ((fine * 5 + 128) >> 8) / 100;

	            v1 = undefined;
	            v2 = undefined;


	            // PRESSURE
	            // Page 46
	            // bmp280_compensate_P_int32
	            //
	            // Every single seemingly arbitrary magic number comes from the datasheet.
	            // Datasheets are evidently written by people that don't care about
	            // anyone else actually understanding how a thing works.
	            //

	            // var1 = (((BMP280_S32_t)t_fine)>>1) – (BMP280_S32_t)64000;
	            v1 = s32(fine >> 1) - 64000;

	            // var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((BMP280_S32_t)dig_P6);
	            v2 = (((v1 >> 2) * (v1 >> 2)) >> 11) * s32(dig.P6);

	            // var2 = var2 + ((var1*((BMP280_S32_t)dig_P5))<<1);
	            v2 += (v1 * s32(dig.P5)) << 1;

	            // var2 = (var2>>2)+(((BMP280_S32_t)dig_P4)<<16);
	            v2 = (v2 >> 2) + (s32(dig.P4) << 16);


	            // var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) +
	            //          ((((BMP280_S32_t)dig_P2) * var1)>>1))>>18;
	            v1 = (((dig.P3 * (((v1 >> 2) * (v1 >> 2)) >> 13)) >> 3) + ((s32(dig.P2) * v1) >> 1)) >> 18;

	            // var1 =((((32768+var1))*((BMP280_S32_t)dig_P1))>>15);
	            v1 = (((Fn.POW_2_15 + v1) * s32(dig.P1)) >> 15);

	            if (v1 === 0) {
	              // Prevent division by zero
	              return 0;
	            }

	            // p = (((BMP280_U32_t)(((BMP280_S32_t)1048576)-adc_P)-(var2>>12)))*3125;
	            compensated = u32((s32(Fn.POW_2_20) - P) - (v2 >> 12)) * 3125;

	            if (compensated < Fn.POW_2_31) {
	              // p = (p << 1) / ((BMP280_U32_t)var1);
	              compensated = ((compensated << 1) >>> 0) / u32(v1);
	            } else {
	              // p = (p / (BMP280_U32_t)var1) * 2;
	              compensated = ((compensated / u32(v1)) >>> 0) * 2;
	            }

	            compensated = u32(compensated) >>> 0;

	            // var1 = (((BMP280_S32_t)dig_P9) * ((BMP280_S32_t)(((p>>3) * (p>>3))>>13)))>>12;
	            const compshift3r = compensated >> 3;
	            v1 = (s32(dig.P9) * s32(((compshift3r * compshift3r) >> 13))) >> 12;

	            // var2 = (((BMP280_S32_t)(p>>2)) * ((BMP280_S32_t)dig_P8))>>13;
	            v2 = (s32(compensated >> 2) * s32(dig.P8)) >> 13;

	            // p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));
	            compensated = u32(s32(compensated) + ((v1 + v2 + dig.P7) >> 4));

	            // Steps of 1Pa (= 0.01hPa = 0.01mbar) (=> 0.001kPa)
	            computed.pressure = compensated;

	            // Calculating pressure at sea level (copied from BMP180)
	            const seapress = compensated / ((1 - elevation * 0.0000225577) ** 5.255);
	            const altitude = 44330 * (1 - compensated / seapress ** (1 / 5.255));

	            // Page 3
	            // ...relative accuracy is ±0.12 hPa, which is equivalent to
	            // ±1 m difference in altitude.
	            computed.altitude = Math.round(altitude - offset);

	            this.emit("data", computed);
	          });
	        });
	      }
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.BMP280, options);
	        return `bmp280-${address}`;
	      }
	    }
	  },

	  BME280: {
	    ADDRESSES: {
	      value: [0x77]
	    },
	    REGISTER: {
	      value: {
	        COEFFICIENTS_TP: 0x88,
	        COEFFICIENTS_H: 0xE1,
	        CONFIG: 0xF5,
	        MEASURE_H: 0xF2,
	        MEASURE_TP: 0xF4,
	        PRESSURE: 0xF7,
	        // 0xF7, 0xF8, 0xF9
	        //  MSB,  LSB, XLSB
	        TEMPERATURE: 0xFA,
	        // 0xFA, 0xFB, 0xFC
	        //  MSB,  LSB, XLSB
	        HUMIDITY: 0xFD,
	        // 0xFD, 0xFE
	        //  MSB,  LSB
	        RESET: 0xE0,
	      }
	    },
	    initialize: {
	      value(board, options) {
	        const io = board.io;
	        let elevation = null;
	        let offset = 0;

	        if (typeof options.elevation !== "undefined") {
	          elevation = options.elevation;
	        }

	        if ((elevation != null && elevation <= 0) ||
	            elevation == null) {
	          offset = Math.abs(elevation) + 1;
	          elevation = 1;
	        }

	        const address = Drivers.addressResolver(this, options);
	        const dig = {
	          T1: null,
	          T2: null,
	          T3: null,
	          P1: null,
	          P2: null,
	          P3: null,
	          P4: null,
	          P5: null,
	          P6: null,
	          P7: null,
	          P8: null,
	          P9: null,
	          H1: null,
	          H2: null,
	          H3: null,
	          H4: null,
	          H5: null,
	          H6: null,
	        };

	        io.i2cConfig(options);

	        // Page. 24
	        // 4.3.2 Register 0xE0 "reset"
	        io.i2cWrite(address, this.REGISTER.RESET, 0xB6);

	        const pCoefficients = new Promise(resolveCoeffs => {

	          // Page 22,
	          // Table 16: Compensation parameter storage, naming and data type
	          // These are received LSB FIRST
	          //
	          // The H register is not contiguous!


	          Promise.all([
	            new Promise(resolve => {
	              io.i2cReadOnce(address, 0x88, 24, data => {
	                dig.T1 = uint16(data[1], data[0]);
	                dig.T2 = int16(data[3], data[2]);
	                dig.T3 = int16(data[5], data[4]);

	                dig.P1 = uint16(data[7], data[6]);
	                dig.P2 = int16(data[9], data[8]);
	                dig.P3 = int16(data[11], data[10]);
	                dig.P4 = int16(data[13], data[12]);
	                dig.P5 = int16(data[15], data[14]);
	                dig.P6 = int16(data[17], data[16]);
	                dig.P7 = int16(data[19], data[18]);
	                dig.P8 = s32(int16(data[21], data[20]));
	                dig.P9 = s32(int16(data[23], data[22]));
	                resolve();
	              });
	            }),
	            new Promise(resolve => {
	              io.i2cReadOnce(address, 0xA1, 1, data => {
	                dig.H1 = Fn.u8(data[0]);
	                resolve();
	              });
	            }),
	            new Promise(resolve => {
	              io.i2cReadOnce(address, 0xE1, 8, data => {
	                /*
	                  0xE1 => data[0]
	                  0xE2 => data[1]
	                  0xE3 => data[2]
	                  0xE4 => data[3]
	                  0xE5 => data[4]
	                  0xE6 => data[5]
	                  0xE7 => data[6]
	                */

	                //        0xE2   0xE1
	                // H2   [15:8]  [7:0]
	                dig.H2 = s32(int16(data[1], data[0]));

	                //  0xE3
	                dig.H3 = s32(data[2]);

	                // Special Bit arrangements for H4 & H5
	                //
	                //      0xE5    0xE4
	                // H4  [3:0]  [11:4]     signed short
	                //      0xE6    0xE5
	                // H5 [11:4]   [3:0]    signed short

	                dig.H4 = s32((data[3] << 4) | (data[4] & 0xF));
	                dig.H5 = s32((data[5] << 4) | (data[4] >> 4));

	                // 0xE7
	                dig.H6 = Fn.s8(data[6]);

	                resolve();
	              });
	            })
	          ]).then(resolveCoeffs);
	        });

	        pCoefficients.then(() => {
	          /*
	            Table 19: Register 0xF2 "ctrl_hum"

	            Bit 2, 1, 0
	            Controls oversampling of humidity


	            osrs_h[2:0] Humidity oversampling
	            000 Skipped (output set to 0x8000)
	            001 oversampling ×1
	            010 oversampling ×2
	            011 oversampling ×4
	            100 oversampling ×8
	            101, others oversampling ×16

	            |           |       | HUM       |
	            | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
	            | - | - | - | - | - | - | - | - |
	            | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 |
	          */
	          io.i2cWrite(address, this.REGISTER.MEASURE_H, 0x05);

	          /*
	            Table 22: Register 0xF4 "ctrl_meas"

	            Bit 7, 6, 5
	            Controls oversampling of temperature data

	            Bit 4, 3, 2
	            Controls oversampling of pressure data

	            Bit 1, 0
	            Controls the sensor mode of the device


	            osrs_h[2:0] Humidity oversampling
	            000 Skipped (output set to 0x8000)
	            001 oversampling ×1
	            010 oversampling ×2
	            011 oversampling ×4
	            100 oversampling ×8
	            101, others oversampling ×16


	            000 Skipped (output set to 0x80000)
	            001 oversampling ×1
	            010 oversampling ×2
	            011 oversampling ×4
	            100 oversampling ×8
	            101, others oversampling ×16

	            00 Sleep mode
	            01 and 10 Forced mode
	            11 Normal mode

	            | TEMP      | PRES      | Mode  |
	            | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
	            | - | - | - | - | - | - | - | - |
	            | 1 | 0 | 1 | 1 | 0 | 1 | 1 | 1 |

	          */
	          io.i2cWrite(address, this.REGISTER.MEASURE_TP, 0xB7);


	          const computed = {
	            altitude: null,
	            pressure: null,
	            humidity: null,
	            temperature: null,
	          };

	          //
	          // Page 12
	          // 3.3.1 Pressure measurement
	          //
	          // Page 13
	          // 3.3.2 Temperature measurement
	          //

	          const standby = Date.now();

	          io.i2cRead(address, this.REGISTER.PRESSURE, 8, data => {
	            //
	            // Response time to complete 63% of a step is 1 second.
	            // Don't emit a reading until a complete step has occurred.
	            // This will be ~1587ms
	            // (1 / 63 * 100) * 1000 = 1587.3015873015872ms
	            // if ((standby + 1587) > Date.now()) {
	            if (!process.env.IS_TEST_MODE) {
	              if ((standby + 1000) > Date.now()) {
	                return;
	              }
	            }

	            let compensated = 0;

	            // Page 45
	            // "Returns temperature in DegC, double precision. Output value of
	            // '51.23' equals 51.23 DegC. t_fine carries fine temperature as global value"
	            let fine;

	            // var1, var2
	            //
	            // Expect:
	            //
	            // int32
	            //
	            let v1;

	            let v2;
	            let vx;

	            // Page 50
	            // "Both pressure and temperature values are expected to be
	            // received in 20 bit format, positive, stored in a 32 bit signed integer. "
	            //
	            //  V = int32(uint24(m, l, xl))
	            //  V >> 4;
	            //

	            // Page 50
	            let P = s32(uint24(data[0], data[1], data[2]));
	            let T = s32(uint24(data[3], data[4], data[5]));
	            const H = s32(uint16(data[6], data[7]));

	            P >>= 4;
	            T >>= 4;

	            // TEMPERATURE

	            // Page 23
	            // bmp280_compensate_T_int32
	            // var1 = ((((adc_T>>3) – ((BMP280_S32_t)dig_T1<<1))) *
	            //                        ((BMP280_S32_t)dig_T2)) >> 11;
	            // var2 = (((((adc_T>>4) – ((BMP280_S32_t)dig_T1)) *
	            //          ((adc_T>>4) – ((BMP280_S32_t)dig_T1))) >> 12) *
	            //          ((BMP280_S32_t)dig_T3)) >> 14;
	            //
	            //
	            const adc16 = T >> 4;
	            const adc16subT1 = adc16 - dig.T1;
	            v1  = (((T >> 3) - (dig.T1 << 1)) * dig.T2) >> 11;
	            v2  = (((adc16subT1 * adc16subT1) >> 12) * dig.T3) >> 14;

	            // t_fine = var1 + var2;
	            fine = v1 + v2;

	            // Page 7, 8
	            // Table 2: Parameter specification
	            //
	            //
	            // Temperature 0.01 °C
	            //
	            // As toFixed(2)
	            //
	            // C = +(((t_fine * 5 + 128) >> 8) / 100).toFixed(resolution)
	            //
	            computed.temperature = ((fine * 5 + 128) >> 8) / 100;

	            v1 = undefined;
	            v2 = undefined;


	            // PRESSURE
	            // Page 23
	            // bmp280_compensate_P_int32
	            //
	            // Every single seemingly arbitrary magic number comes from the datasheet.
	            // Datasheets are evidently written by people that don't care about
	            // anyone else actually understanding how a thing works.
	            //

	            // var1 = (((BMP280_S32_t)t_fine)>>1) – (BMP280_S32_t)64000;
	            v1 = s32(fine >> 1) - 64000;

	            // var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((BMP280_S32_t)dig_P6);
	            v2 = (((v1 >> 2) * (v1 >> 2)) >> 11) * s32(dig.P6);

	            // var2 = var2 + ((var1*((BMP280_S32_t)dig_P5))<<1);
	            v2 += (v1 * s32(dig.P5)) << 1;

	            // var2 = (var2>>2)+(((BMP280_S32_t)dig_P4)<<16);
	            v2 = (v2 >> 2) + (s32(dig.P4) << 16);


	            // var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) +
	            //          ((((BMP280_S32_t)dig_P2) * var1)>>1))>>18;
	            v1 = (((dig.P3 * (((v1 >> 2) * (v1 >> 2)) >> 13)) >> 3) + ((s32(dig.P2) * v1) >> 1)) >> 18;

	            // var1 =((((32768+var1))*((BMP280_S32_t)dig_P1))>>15);
	            v1 = (((Fn.POW_2_15 + v1) * s32(dig.P1)) >> 15);

	            if (v1 === 0) {
	              // Prevent division by zero
	              return 0;
	            }

	            // p = (((BMP280_U32_t)(((BMP280_S32_t)1048576)-adc_P)-(var2>>12)))*3125;
	            compensated = u32((s32(Fn.POW_2_20) - P) - (v2 >> 12)) * 3125;

	            if (compensated < Fn.POW_2_31) {
	              // p = (p << 1) / ((BMP280_U32_t)var1);
	              compensated = ((compensated << 1) >>> 0) / u32(v1);
	            } else {
	              // p = (p / (BMP280_U32_t)var1) * 2;
	              compensated = ((compensated / u32(v1)) >>> 0) * 2;
	            }

	            compensated = u32(compensated) >>> 0;

	            // var1 = (((BMP280_S32_t)dig_P9) * ((BMP280_S32_t)(((p>>3) * (p>>3))>>13)))>>12;
	            const compshift3r = compensated >> 3;
	            v1 = (s32(dig.P9) * s32(((compshift3r * compshift3r) >> 13))) >> 12;

	            // var2 = (((BMP280_S32_t)(p>>2)) * ((BMP280_S32_t)dig_P8))>>13;
	            v2 = (s32(compensated >> 2) * dig.P8) >> 13;

	            // p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));
	            compensated = u32(s32(compensated) + ((v1 + v2 + dig.P7) >> 4));

	            // Steps of 1Pa (= 0.01hPa = 0.01mbar) (=> 0.001kPa)
	            computed.pressure = compensated;

	            // Calculating pressure at sea level (copied from BMP180)
	            const seapress = compensated / ((1 - elevation * 0.0000225577) ** 5.255);
	            const altitude = 44330 * (1 - compensated / seapress ** (1 / 5.255));

	            // Page 3
	            // ...relative accuracy is ±0.12 hPa, which is equivalent to
	            // ±1 m difference in altitude.
	            computed.altitude = Math.round(altitude - offset);


	            // Page 23, 24
	            // BME280_U32_t bme280_compensate_H_int32(BME280_S32_t adc_H)

	            // BME280_S32_t v_x1_u32r;
	            // v_x1_u32r = (t_fine – ((BME280_S32_t)76800));
	            vx = s32(fine - 76800);

	            // v_x1_u32r = (((((adc_H << 14) – (((BME280_S32_t)dig_H4) << 20) – (((BME280_S32_t)dig_H5) * v_x1_u32r)) +
	            // ((BME280_S32_t)16384)) >> 15) * (((((((v_x1_u32r * ((BME280_S32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((BME280_S32_t)dig_H3)) >> 11) + ((BME280_S32_t)32768))) >> 10) + ((BME280_S32_t)2097152)) *
	            // ((BME280_S32_t)dig_H2) + 8192) >> 14));

	            vx = (((((H << 14) - s32(dig.H4 << 20) - (dig.H5 * vx)) + Fn.POW_2_14) >> 15) *
	                  (((((((vx * dig.H6) >> 10) * (((vx * dig.H3) >> 11) + Fn.POW_2_15)) >> 10) + Fn.POW_2_21) * dig.H2 + Fn.POW_2_13) >> 14));

	            // v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)_bme280_calib.dig_H1)) >> 4));
	            vx -= (((((vx >> 15) * (vx >> 15)) >> 7) * s32(dig.H1) >> 4));

	            // v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
	            // v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
	            vx = Fn.constrain(vx, 0, 419430400);

	            computed.humidity = u32(vx >> 12);

	            this.emit("data", computed);
	          });
	        });
	      }
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.BME280, options);
	        return `bme280-${address}`;
	      }
	    }
	  },
	  SI7020: {
	    ADDRESSES: {
	      value: [0x40]
	    },
	    REGISTER: {
	      value: {
	        HUMIDITY: 0xE5,
	        TEMPERATURE: 0xE0,
	      }
	    },
	    initialize: {
	      value(board, options) {
	        const io = board.io;
	        const address = Drivers.addressResolver(this, options);
	        // The "no hold" measurement requires waiting
	        // _at least_ 22ms between register write and
	        // register read. Delay is measured in μs:
	        // 22ms = 22000μs; recommend 50ms = 50000μs
	        options.delay = 50000;

	        io.i2cConfig(options);

	        // Reference
	        // P. 19
	        const computed = {
	          temperature: null,
	          humidity: null,
	        };

	        // Despite the registers being back to back, the SI7020
	        // does not like when 5 bytes are requested, so we put
	        // the two data sources on their own read channels.
	        io.i2cRead(address, this.REGISTER.TEMPERATURE, 2, data => {
	          computed.temperature = uint16(data[0], data[1]);
	          this.emit("data", computed);
	        });

	        io.i2cRead(address, this.REGISTER.HUMIDITY, 2, data => {
	          computed.humidity = uint16(data[0], data[1]);
	          this.emit("data", computed);
	        });
	      }
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.SI7020, options);
	        return `si7020-${address}`;
	      }
	    },
	  },

	  MS5611: {
	    ADDRESSES: {
	      value: [0x77]
	    },
	    REGISTER: {
	      value: {
	        COEFFICIENTS: 0xA2,
	        READ: 0x00,
	        PRESSURE: 0x40,
	        TEMPERATURE: 0x50,
	        RESET: 0x1E,
	      }
	    },
	    initialize: {
	      value(board, options) {
	        const io = board.io;
	        let elevation = null;
	        let offset = 0;


	        if (typeof options.elevation !== "undefined") {
	          elevation = options.elevation;
	        }

	        if ((elevation != null && elevation <= 0) ||
	            elevation == null) {
	          offset = Math.abs(elevation) + 1;
	          elevation = 1;
	        }

	        const address = Drivers.addressResolver(this, options);
	        const computed = {
	          altitude: null,
	          pressure: null,
	          temperature: null,
	        };

	        /**
	         * Page 6
	         *
	         * Startup in I2C Mode
	         *
	         * 1. Reset
	         * 2. Read PROM (128 bits of calibration data)
	         * 3. D1 Conversion
	         * 4. D2 Conversion
	         * 5. Read ADC (24 but pressure/temperature)
	         */
	        const mode = options.mode || 5;
	        /*
	        [
	         ULTRA_LOW_POWER
	         LOW_POWER
	         STANDARD
	         HIGH_RES
	         ULTRA_HIGH_RES *
	         ]
	         */

	        const kpDelay = [1, 2, 3, 4, 5, 10][mode];

	        /**
	         * Page 7
	         */
	        const cof = {
	          C1: null,
	          C2: null,
	          C3: null,
	          C4: null,
	          C5: null,
	          C6: null,
	        };

	        const cKeys = Object.keys(cof);


	        // TODO: confirm this is actually necessary?
	        options.delay = kpDelay * 1000;

	        io.i2cConfig(options);
	        io.i2cWrite(address, this.REGISTER.RESET);

	        const pCoefficients = new Promise(resolve => {
	          // First, a small delay is required following the reset...
	          setTimeout(() => {
	            // Next, each coefficient must be read on it's own.
	            const cofs = cKeys.map((key, index) => {
	              const register = this.REGISTER.COEFFICIENTS + (index * 2);
	              return new Promise(resolve => {
	                io.i2cReadOnce(address, register, 2, data => {
	                  cof[key] = uint16(data[0], data[1]);
	                  resolve();
	                });
	              });
	            });

	            Promise.all(cofs).then(resolve);
	          }, 50);
	        });

	        pCoefficients.then(() => {
	          // Page 7, 8
	          //
	          let cycle = 0;
	          let D1;
	          let D2;
	          let dT;
	          let TEMP;
	          let OFF;
	          let SENS;
	          let P;
	          let TEMP2;
	          let OFF2;
	          let SENS2;

	          const readCycle = () => {

	            // cycle 0: temperature
	            // cycle 1: pressure

	            const isTemperatureCycle = cycle === 0;
	            const component = (isTemperatureCycle ? 0x50 : 0x40) + mode;

	            io.i2cWrite(address, component);

	            if (isTemperatureCycle) {
	              D2 = 0;
	              dT = 0;
	              TEMP = 0;
	              TEMP2 = 0;
	              OFF2 = 0;
	              SENS2 = 0;
	            } else {
	              D1 = 0;
	              OFF = 0;
	              SENS = 0;
	              P = 0;
	            }

	            // Once the READ_START register is set,
	            // delay the READ_RESULT request based on the
	            // mode value provided by the user, or default.
	            setTimeout(() => {
	              io.i2cReadOnce(address, this.REGISTER.READ, 3, data => {

	                if (isTemperatureCycle) {
	                  // TEMPERATURE
	                  D2 = uint24(data[0], data[1], data[2]);

	                  // Calculate temperature
	                  // Page 7
	                  // Difference between actual and reference temperature [2]
	                  // dT
	                  //  = D2 - TREF
	                  //  = D2 - C5 * (2 ** 8)
	                  dT = D2 - (cof.C5 * Fn.POW_2_8);

	                  // Actual temperature (-40…85°C with 0.01°C resolution)
	                  // TEMP
	                  //  = 20°C + dT * TEMP * SENS
	                  //  = 2000 + dT * C6 / (2 ** 23)
	                  TEMP = 2000 + dT * cof.C6 / Fn.POW_2_23;

	                  // SECOND ORDER TEMPERATURE COMPENSATION
	                  // Page 8
	                  // These ridiculous magic numbers come from
	                  // the datasheet. No explanation is given.
	                  //
	                  if (TEMP < 2000) {
	                    TEMP2 = dT ** 2 / Fn.POW_2_31;
	                    OFF2 = 5 * ((TEMP - 2000) ** 2) / 2;
	                    SENS2 = 5 * ((TEMP - 2000) ** 2) / Fn.POW_2_2;

	                    if (TEMP < -1500) {
	                      OFF2 = OFF2 + 7 * ((TEMP + 1500) ** 2);
	                      SENS2 = SENS2 + 11 * ((TEMP + 1500) ** 2) / 2;
	                    }
	                  }


	                  TEMP -= TEMP2;

	                  computed.temperature = TEMP / 100;
	                } else {
	                  // PRESSURE
	                  D1 = uint24(data[0], data[1], data[2]);

	                  // Offset at actual temperature [3]
	                  // OFF
	                  //  = OFFT1 +TCO* dT = C2 * (2 ** 16) + (C4 * dT )/ (2 ** 7)
	                  OFF = cof.C2 * Fn.POW_2_16 + (cof.C4 * dT) / Fn.POW_2_7;

	                  // Sensitivity at actual temperature [4]
	                  // SENS =SENST1 +TCS* dT= C1 * (2 ** 15) + (C3 * dT )/ (2 ** 8)
	                  SENS = cof.C1 * Fn.POW_2_15 + (cof.C3 * dT) / Fn.POW_2_8;

	                  // SECOND ORDER TEMPERATURE COMPENSATION
	                  // Page 8
	                  OFF -= OFF2;
	                  SENS -= SENS2;

	                  // Temperature compensated pressure (10…1200mbar with 0.01mbar resolution)
	                  // P = D1 * SENS - OFF = (D1 * SENS / 2 21 - OFF) / 2 15
	                  P = (D1 * SENS / Fn.POW_2_21 - OFF) / Fn.POW_2_15;

	                  // Steps of 1Pa (= 0.01hPa = 0.01mbar) (=> 0.001kPa)
	                  computed.pressure = P;

	                  // Sea level pressure...
	                  const seapress = P / ((1 - elevation * 0.0000225577) ** 5.255);
	                  const altitude = 44330 * (1 - P / seapress ** (1 / 5.255));

	                  computed.altitude = altitude - offset;
	                }

	                if (++cycle === 2) {
	                  cycle = 0;
	                  this.emit("data", computed);
	                }

	                readCycle();
	              });
	            }, kpDelay);
	          };

	          // Kick off "read loop"
	          //
	          readCycle();
	        });
	      }
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.MS5611, options);
	        return `ms5611-${address}`;
	      }
	    },
	  },

	  TH02: {
	    ADDRESSES: {
	      value: [0x40]
	    },
	    COMMAND: {
	      value: {
	        MEASURE_HUMIDITY: 0x01,
	        MEASURE_TEMPERATURE: 0x11,
	      }
	    },
	    REGISTER: {
	      value: {
	        STATUS: 0x00,
	        READ: 0x01,
	        CONFIG: 0x03,
	      }
	    },
	    initialize: {
	      value(board, options) {
	        const io = board.io;
	        const address = Drivers.addressResolver(this, options);
	        const computed = {
	          temperature: null,
	          humidity: null,
	        };

	        let cycle = 0;

	        io.i2cConfig(
	          Object.assign(options, {
	            settings: {
	              stopTX: true
	            }
	          })
	        );

	        const readCycle = () => {
	          // 1. Determine which data we want to request
	          const isTemperatureCycle = cycle === 0;
	          const command = isTemperatureCycle ?
	            this.COMMAND.MEASURE_TEMPERATURE :
	            this.COMMAND.MEASURE_HUMIDITY;


	          const conversion = new Promise(resolve => {
	            // 2. Send the appropriate measurement/conversion
	            //    command for this read cycle.
	            io.i2cWrite(address, this.REGISTER.CONFIG, command);

	            // 3. Await an affirmative status result. This signifies that
	            //    measurement and conversion are complete and values may
	            //    be read from the peripheral register.get
	            //
	            //    Register design like this is really painful to work
	            //    with. These peripherals have ample space to store data
	            //    in different registers, but do not.
	            const requestStatus = () => {
	              io.i2cReadOnce(address, this.REGISTER.STATUS, 1, data => {
	                const status = data[0];

	                if (!(status & 0x01)) {
	                  resolve();
	                } else {
	                  requestStatus();
	                }
	              });
	            };

	            requestStatus();
	          });

	          // Page. 16, 18
	          //
	          conversion.then(() => {
	            // Both values will be placed in the 0x01 after
	            // the command is received and the measurement taken.

	            // The datasheet _SAYS_ read the MSB and LSB from 0x01 and 0x02,
	            // but in reality, reading from 0x01 produces nothing. Trial and
	            // error testing resulted in discovering the correct data located
	            // in 0x02 & 0x03.
	            //
	            // One might assume that we could then read 2 bytes from 0x02,
	            // but that also produces garbage, so in the end we need to read
	            // 3 bytes from 0x01.
	            Promise.all([
	              new Promise(resolve => {
	                io.i2cReadOnce(address, 0x01, 1, data => {
	                  resolve(data[0]);
	                });
	              }),
	              new Promise(resolve => {
	                io.i2cReadOnce(address, 0x02, 1, data => {
	                  resolve(data[0]);
	                });
	              })
	            ]).then(data => {

	              if (isTemperatureCycle) {
	                computed.temperature = ((uint16(data[0], data[1]) >> 2) / 32) - 50;
	              } else {
	                computed.humidity = ((uint16(data[0], data[1]) >> 4) / 16) - 24;
	              }

	              if (++cycle === 2) {
	                cycle = 0;
	                this.emit("data", computed);
	              }

	              readCycle();
	            });
	          });
	        };

	        readCycle();
	      },
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.TH02, options);
	        return `th02-${address}`;
	      }
	    }
	  },

	  /**
	   * LSM303C: 6Dof 3-Axis Magnetometer & Accelerometer
	   *
	   * https://learn.sparkfun.com/tutorials/lsm303c-6dof-hookup-guide
	   * https://github.com/sparkfun/LSM303C_6_DOF_IMU_Breakout
	   */
	  LSM303C: {
	    ADDRESSES: {
	      value: [
	        0x1D,
	        0x1E,
	      ]
	    },
	    COMMAND: {
	      value: {
	        ACC_SETUP: [0x4, 0x3F, 0x3F, 0x3F],
	        MAG_SETUP: [0xD8, 0x60, 0x40, 0xD8, 0x8, 0x00]
	      }
	    },
	    REGISTER: {
	      value: {
	        ACC_CTRL_SEQ: [0x23, 0x20, 0x20, 0x20],
	        ACC_STATUS: 0x27,
	        ACC_OUTX_L: 0x28,
	        ACC_OUTX_H: 0x29,
	        ACC_OUTY_L: 0x2A,
	        ACC_OUTY_H: 0x2B,
	        ACC_OUTZ_L: 0x2C,
	        ACC_OUTZ_H: 0x2D,
	        MAG_CTRL_SEQ: [0x20, 0x21, 0x24, 0x20, 0x23, 0x22],
	        MAG_STATUS: 0x27,
	        MAG_OUTX_L: 0x28,
	        MAG_OUTX_H: 0x29,
	        MAG_OUTY_L: 0x2A,
	        MAG_OUTY_H: 0x2B,
	        MAG_OUTZ_L: 0x2C,
	        MAG_OUTZ_H: 0x2D,
	        MAG_TEMP_OUT_L: 0x2E,
	        MAG_TEMP_OUT_H: 0x2F,
	      }
	    },
	    initialize: {
	      value(board, options) {

	        const ACC_SENSITIVITY = 0.06103515625; // LSB/mg
	        const MAG_SENSITIVITY = 0.00048828125; // LSB/Ga

	        const io = board.io;
	        const frequency = this.freq || 40;
	        const [ACC_ADDRESS, MAG_ADDRESS] = this.ADDRESSES;

	        const accelerometer = {};
	        const magnetometer = {};
	        const computed = {
	          temperature: 0,
	          magnetometer,
	          accelerometer
	        };

	        // ACC Initialization sequence (4 bytes)
	        const initializeAccelerometer = () => {
	          io.i2cConfig(Object.assign({}, options, { address: ACC_ADDRESS }));
	          this.REGISTER.ACC_CTRL_SEQ
	            .forEach((ctrlReg, i) => {
	              io.i2cWrite(ACC_ADDRESS, ctrlReg, this.COMMAND.ACC_SETUP[i]);
	            });
	        };

	        // MAG Initialization sequence (6 bytes)
	        const initializeMagnetometer = () => {
	          io.i2cConfig(Object.assign({}, options, { address: MAG_ADDRESS }));
	          this.REGISTER.MAG_CTRL_SEQ
	            .forEach((ctrlReg, i) => {
	              io.i2cWrite(MAG_ADDRESS, ctrlReg, this.COMMAND.MAG_SETUP[i]);
	            });
	        };

	        const readAccelerometer = done => {
	          io.i2cReadOnce(ACC_ADDRESS, this.REGISTER.ACC_OUTX_L, 6, data => {
	            accelerometer.x = int16(data[1], data[0]) * ACC_SENSITIVITY;
	            accelerometer.y = int16(data[3], data[2]) * ACC_SENSITIVITY;
	            accelerometer.z = int16(data[5], data[4]) * ACC_SENSITIVITY;
	            done();
	          });
	        };

	        const readMagnetometer = done => {
	          io.i2cReadOnce(MAG_ADDRESS, this.REGISTER.MAG_OUTX_L, 6, data => {
	            magnetometer.x = int16(data[1], data[0]) * MAG_SENSITIVITY;
	            magnetometer.y = int16(data[3], data[2]) * MAG_SENSITIVITY;
	            magnetometer.z = int16(data[5], data[4]) * MAG_SENSITIVITY;
	            done();
	          });
	        };

	        const readTemperature = done => {
	          io.i2cReadOnce(MAG_ADDRESS, this.REGISTER.MAG_TEMP_OUT_L, 2, data => {
	            computed.temperature = int16(data[1], data[0]);
	            done();
	          });
	        };

	        // Rinse and repeat
	        const readCycle = () => {
	          Promise.all([
	            new Promise(readAccelerometer),
	            new Promise(readMagnetometer),
	            new Promise(readTemperature)
	          ])
	          .then(() => {
	            this.emit("data", computed);
	            setTimeout(readCycle, frequency);
	          });
	        };

	        // Kick off
	        initializeAccelerometer();
	        initializeMagnetometer();
	        readCycle();
	      },
	    },
	    identifier: {
	      value(options) {
	        const address = Drivers.addressResolver(Drivers.LSM303C, options);
	        return `lsm303c-${address}`;
	      }
	    }
	  },
	};

	// Otherwise known as...
	Drivers.BMP085 = Drivers.BMP180;
	Drivers.GY521 = Drivers.MPU6050;
	Drivers.SI7021 = Drivers.SI7020;
	Drivers.DHT11_I2C_NANO_BACKPACK = Drivers.DHT_I2C_NANO_BACKPACK;
	Drivers.DHT21_I2C_NANO_BACKPACK = Drivers.DHT_I2C_NANO_BACKPACK;
	Drivers.DHT22_I2C_NANO_BACKPACK = Drivers.DHT_I2C_NANO_BACKPACK;


	Drivers.get = (board, driverName, options = {}) => {
	  let drivers;
	  let driverKey;
	  let driver;

	  if (!activeDrivers.has(board)) {
	    activeDrivers.set(board, {});
	  }

	  drivers = activeDrivers.get(board);
	  driverKey = Drivers[driverName].identifier.value(options);

	  if (!drivers[driverKey]) {
	    driver = new Emitter();
	    Object.defineProperties(driver, Drivers[driverName]);
	    driver.initialize(board, options);
	    drivers[driverKey] = driver;
	  }

	  return drivers[driverKey];
	};

	Drivers.addressResolver = (driver, options) => {
	  const addresses = driver.ADDRESSES;
	  const address = options.address || (
	    Array.isArray(addresses) ? addresses[0] : addresses.value[0]
	  );
	  options.address = address;
	  return address;
	};

	Drivers.clear = () => {
	  activeDrivers.clear();
	};

	const Controllers = {
	  /**
	   * MPU6050 3-axis Gyro/Accelerometer and Thermometer
	   *
	   * http://playground.arduino.cc/Main/MPU6050
	   */

	  MPU6050: {
	    initialize: {
	      value(options) {
	        Components.call(this, "MPU6050", options);
	      }
	    },
	    components: {
	      value: [ACCELEROMETER, GYRO, THERMOMETER]
	    },
	  },

	  BNO055: {
	    initialize: {
	      value(options) {
	        const state = priv.get(this);
	        const CONTROLLER = "BNO055";

	        state.calibrationMask = options.calibrationMask || 0xC0;

	        // here we want to catch the events coming out of the driver and re-emit them
	        // not sure what is cleaner here, picking these up from a data event
	        // in the sub controllers, or this
	        Drivers.get(this.board, CONTROLLER, options)
	          .on("calibrated", () => this.emit("calibrated"))
	          .on("calibration", state => this.emit("calibration", state));

	        Components.call(this, CONTROLLER, options);
	      }
	    },
	    components: {
	      value: [ACCELEROMETER, GYRO, MAGNETOMETER, ORIENTATION, THERMOMETER]
	    },
	    calibration: {
	      get() {
	        return this.orientation.calibration;
	      }
	    },
	    isCalibrated: {
	      get() {
	        //returns if the system and all sensors are fully calibrated
	        const {calibrationMask} = priv.get(this);
	        return (this.orientation.calibration & calibrationMask) === calibrationMask;
	      }
	    }
	  },
	  MPL115A2: {
	    initialize: {
	      value(options) {
	        Components.call(this, "MPL115A2", options);
	      }
	    },
	    components: {
	      value: [BAROMETER, THERMOMETER]
	    },
	  },
	  SHT31D: {
	    initialize: {
	      value(options) {
	        Components.call(this, "SHT31D", options);
	      }
	    },
	    components: {
	      value: [HYGROMETER, THERMOMETER]
	    },
	  },
	  HTU21D: {
	    initialize: {
	      value(options) {
	        Components.call(this, "HTU21D", options);
	      }
	    },
	    components: {
	      value: [HYGROMETER, THERMOMETER]
	    },
	  },
	  HIH6130: {
	    initialize: {
	      value(options) {
	        Components.call(this, "HIH6130", options);
	      }
	    },
	    components: {
	      value: [HYGROMETER, THERMOMETER]
	    },
	  },
	  DHT_I2C_NANO_BACKPACK: {
	    initialize: {
	      value(options) {
	        Components.call(this, "DHT_I2C_NANO_BACKPACK", options);
	      }
	    },
	    components: {
	      value: [HYGROMETER, THERMOMETER]
	    },
	  },
	  MPL3115A2: {
	    initialize: {
	      value(options) {
	        Components.call(this, "MPL3115A2", options);
	      }
	    },
	    components: {
	      value: [ALTIMETER, BAROMETER, THERMOMETER]
	    },
	  },
	  // This controller and driver pair are used for both
	  // BMP180 and BMP085
	  BMP180: {
	    initialize: {
	      value(options) {
	        Components.call(this, "BMP180", options);
	      }
	    },
	    components: {
	      value: [ALTIMETER, BAROMETER, THERMOMETER]
	    },
	  },
	  BMP280: {
	    initialize: {
	      value(options) {
	        Components.call(this, "BMP280", options);
	      }
	    },
	    components: {
	      value: [ALTIMETER, BAROMETER, THERMOMETER]
	    },
	  },
	  BME280: {
	    initialize: {
	      value(options) {
	        Components.call(this, "BME280", options);
	      }
	    },
	    components: {
	      value: [ALTIMETER, BAROMETER, HYGROMETER, THERMOMETER]
	    },
	  },
	  SI7020: {
	    initialize: {
	      value(options) {
	        Components.call(this, "SI7020", options);
	      }
	    },
	    components: {
	      value: [HYGROMETER, THERMOMETER]
	    },
	  },
	  MS5611: {
	    initialize: {
	      value(options) {
	        Components.call(this, "MS5611", options);
	      }
	    },
	    components: {
	      value: [ALTIMETER, BAROMETER, THERMOMETER]
	    },
	  },

	  TH02: {
	    initialize: {
	      value(options) {
	        Components.call(this, "TH02", options);
	      }
	    },
	    components: {
	      value: [HYGROMETER, THERMOMETER]
	    },
	  },

	  LSM303C: {
	    initialize: {
	      value(options) {
	        Components.call(this, "LSM303C", options);
	      }
	    },
	    components: {
	      value: [MAGNETOMETER, THERMOMETER, ACCELEROMETER]
	    },
	  },
	};

	// Otherwise known as...
	Controllers.BMP085 = Controllers.BMP180;
	Controllers.GY521 = Controllers.MPU6050;
	Controllers.SI7021 = Controllers.SI7020;
	Controllers.DHT11_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;
	Controllers.DHT21_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;
	Controllers.DHT22_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;


	class IMU extends Emitter {
	  constructor(options) {
	    super();

	    Board.Component.call(
	      this, options = Board.Options(options)
	    );

	    Board.Controller.call(this, Controllers, options);

	    let state = {};
	    priv.set(this, state);

	    this.freq = options.freq || 20;

	    if (typeof this.initialize === "function") {
	      this.initialize(options);
	    }

	    // The IMU/Multi isn't considered "ready"
	    // until one of the components has notified via
	    // a change event.
	    this.isReady = false;

	    setInterval(() => {
	      if (this.isReady) {
	        this.emit("data", this);
	      }
	    }, this.freq);

	    const awaiting = this.components.slice();

	    if (this.components && this.components.length > 0) {
	      this.components.forEach(component => {
	        if (!(this[component] instanceof Emitter)) {
	          return;
	        }

	        this[component].on("change", () => {
	          if (awaiting.length) {
	            const index = awaiting.indexOf(component);

	            if (index !== -1) {
	              awaiting.splice(index, 1);
	            }
	          }

	          if (!awaiting.length && !this.isReady) {
	            this.isReady = true;
	          }

	          if (this.isReady) {
	            this.emit("change", this, component);
	          }
	        });
	      });
	    }
	  }
	}


	IMU.Drivers = Drivers;

	/* istanbul ignore else */
	if (!!process.env.IS_TEST_MODE) {
	  IMU.Controllers = Controllers;
	  IMU.purge = () => {
	    priv.clear();
	  };
	}

	sip = IMU;
	return sip;
}

var blokdots_sunlight;
var hasRequiredBlokdots_sunlight;

function requireBlokdots_sunlight () {
	if (hasRequiredBlokdots_sunlight) return blokdots_sunlight;
	hasRequiredBlokdots_sunlight = 1;
	const Board = requireBoard();
	const Emitter = EventEmitter$2;
	const { toFixed } = fn;

	const Controllers = {
	  SI1145: {
	    initialize: {
	      value(options, callback) {
	        const { Drivers } = requireSip();
	        Drivers.get(this.board, "SI1145", options)
	          .on("data", data => callback(data));
	      }
	    },
	    toUVindex : {
	      value( value ) {
	        return toFixed(value / 100, 2);
	      }
	    }
	  }
	};


	class Sunlight extends Emitter {
	  constructor(options) {
	    super();

	    Board.Component.call(
	      this, options = Board.Options(options)
	    );

	    Board.Controller.call(this, Controllers, options);

	    const freq = options.freq || 250;
	    let last = null;
	    let raw = null;

	    if (!this.toUVindex) {
	      this.toUVindex = options.toUVindex || (x => x);
	    }

	    if (typeof this.initialize === "function") {
	      this.initialize(options, data => {
	        raw = data;
	      });
	    }

	    Object.defineProperties(this, {
	      uv: {
	        get() {
	          return this.toUVindex(raw.uv);
	        }
	      },
	      ir: {
	        get() {
	          return raw.ir
	        }
	      },
	      vis: {
	        get() {
	          return raw.vis
	        }
	      }
	    });

	    setInterval(() => {
	      if (raw === null) {
	        return;
	      }

	      const data = {
	        uv: this.uv,
	        ir: this.ir,
	        vis: this.vis
	      };

	      this.emit("data", data);

	      if( last === null || this.vis !== last.vis || this.ir !== last.ir || this.uv !== last.uv){
	        
	        // only emit if has values
	        if( last !== null ){
	          this.emit("change", data);
	        }

	        last = {...data};
	      }
	    }, freq);
	  }
	}

	/* istanbul ignore else */
	if (!!process.env.IS_TEST_MODE) {
	  Sunlight.Controllers = Controllers;
	  Sunlight.purge = function() {};
	}

	blokdots_sunlight = Sunlight;
	return blokdots_sunlight;
}

const SI = 1.70158;
const SIO = 1.70158 * 1.525;
const SB = 7.5625;
const HALF = 0.5;
const {
  PI,
  cos,
  sin,
  sqrt,
} = Math;

const ease$1 = {};
ease$1.linear = n => n;
ease$1.inQuad = n => n * n;
ease$1.outQuad = n => n * (2 - n);
ease$1.inOutQuad = n => {
  n *= 2;
  return n < 1 ?
    HALF * n * n :
    -HALF * (--n * (n - 2) - 1);
};
ease$1.inCube = n => n * n * n;
ease$1.outCube = n => --n * n * n + 1;
ease$1.inOutCube = n => {
  n *= 2;
  return n < 1 ?
    HALF * (n * n * n) :
    HALF * ((n -= 2) * n * n + 2);
};

ease$1.inQuart = n => n * n * n * n;
ease$1.outQuart = n => 1 - (--n * (n * n * n));
ease$1.inOutQuart = n => {
  n *= 2;
  return n < 1 ?
    HALF * (n * n * n * n) :
    -HALF * ((n -= 2) * (n * n * n) - 2);
};

ease$1.inQuint = n => n * n * n * n * n;
ease$1.outQuint = n => --n * (n * n * n * n) + 1;
ease$1.inOutQuint = n => {
  n *= 2;
  return n < 1 ?
    HALF * (n * n * n * n * n) :
    HALF * ((n -= 2) * (n * n * n * n) + 2);
};

ease$1.inSine = n => 1 - cos(n * PI / 2);
ease$1.outSine = n => sin(n * PI / 2);
ease$1.inOutSine = n => HALF * (1 - cos(PI * n));

ease$1.inExpo = n => 0 === n ? 0 : Math.pow(1024, n - 1);
ease$1.outExpo = n => 1 === n ? n : 1 - Math.pow(2, -10 * n);
ease$1.inOutExpo = n => {
  if (n === 0) { return 0; }
  if (n === 1) { return 1; }
  return (n *= 2) < 1 ?
    HALF * Math.pow(1024, n - 1) :
    HALF * (-Math.pow(2, -10 * (n - 1)) + 2);
};

ease$1.inCirc = n => 1 - sqrt(1 - n * n);
ease$1.outCirc = n => sqrt(1 - (--n * n));
ease$1.inOutCirc = n => {
  n *= 2;
  return (n < 1) ?
    -HALF * (sqrt(1 - n * n) - 1) :
    HALF * (sqrt(1 - (n -= 2) * n) + 1);
};

ease$1.inBack = n => n * n * ((SI + 1) * n - SI);
ease$1.outBack = n => --n * n * ((SI + 1) * n + SI) + 1;
ease$1.inOutBack = n => {
  return (n *= 2) < 1 ?
    HALF * (n * n * ((SIO + 1) * n - SIO)) :
    HALF * ((n -= 2) * n * ((SIO + 1) * n + SIO) + 2);
};

ease$1.outBounce = n => {
  if (n < (1 / 2.75)) {
    return SB * n * n;
  } else if (n < (2 / 2.75)) {
    return SB * (n -= (1.5 / 2.75)) * n + 0.75;
  } else if (n < (2.5 / 2.75)) {
    return SB * (n -= (2.25 / 2.75)) * n + 0.9375;
  } else {
    return SB * (n -= (2.625 / 2.75)) * n + 0.984375;
  }
};

ease$1.inBounce = n => 1 - ease$1.outBounce(1 - n);
ease$1.inOutBounce = n => {
  return n < HALF ?
    ease$1.inBounce(n * 2) * HALF :
    ease$1.outBounce(n * 2 - 1) * HALF + HALF;
};

const exportables = {};

Object.keys(ease$1).forEach(key => {
  exportables[key.toLowerCase()] = ease$1[key];
});

var easing = new Proxy({}, {
  get(target, property) {
    return exportables[property.replace(/([a-z])([A-Z])/g, "$1$2").toLowerCase()];
  }
});

var temporal$1;
var hasRequiredTemporal;

function requireTemporal () {
	if (hasRequiredTemporal) return temporal$1;
	hasRequiredTemporal = 1;
	var Emitter = EventEmitter$2.EventEmitter;
	var util = require$$1$1;

	// Default resolution is 1ms
	var resolutionDivisor = 1e6;

	// All APIs will be added to `exportable`, which is lastly
	// assigned as the value of module.exports
	var exportable = new Emitter();

	// Object containing callback queues, keys are time in MS
	var queue = {};

	// Store the last event time
	var gLast = Date.now();

	// Actively processing queue
	var isProcessing = false;

	var tick = commonjsGlobal.setImmediate || process.nextTick;

	var hrTime = function() {
	  var hrtime = process.hrtime();
	  return Math.floor((hrtime[0] * 1e9 + hrtime[1]) / resolutionDivisor);
	};

	var time = function() {
	  return Date.now();
	};

	var getTime = time;

	/**
	 * Task create a temporal task item
	 * @param {Object} entry Options for entry {time, task}
	 */
	function Task(entry) {
	  if (!(this instanceof Task)) {
	    return new Task(entry);
	  }

	  this.called = 0;
	  this.now = this.calledAt = getTime();

	  if (resolutionDivisor !== 1e6) {
	    entry.time = ~~(entry.time * (1e6 / resolutionDivisor));
	  }

	  // Side table property definitions
	  this.isRunnable = true;
	  this.later = this.now + entry.time;
	  this.task = entry.task;
	  this.type = entry.type;
	  this.time = entry.time;

	  if (this.later > gLast) {
	    gLast = this.later;
	  }

	  if (!queue[this.later]) {
	    queue[this.later] = [];
	  }
	  // console.log( entry.later, this );
	  queue[this.later].push(this);
	}

	// Inherit EventEmitter API
	util.inherits(Task, Emitter);

	/**
	 * Task.deriveOp (reduction)
	 * (static)
	 */
	Task.deriveOp = function(p, v) {
	  return v !== "task" ? v : p;
	};


	/**
	 * stop Stop the current behaviour
	 */
	Task.prototype.stop = function() {
	  this.isRunnable = false;
	  this.emit("stop");
	};

	function Queue(tasks) {
	  this.refs = [];
	  this.add(tasks);
	}

	util.inherits(Queue, Emitter);

	Queue.prototype.stop = function() {
	  this.refs.forEach(function(ref) {
	    ref.stop();
	  });

	  this.emit("stop");
	};

	Queue.prototype.add = function(tasks) {
	  var op, item, task, ref;

	  this.cumulative = this.cumulative || 0;

	  while (tasks.length) {
	    item = tasks.shift();
	    op = Object.keys(item).reduce(Task.deriveOp, "");

	    this.cumulative += item[op];

	    // For the last task, ensure that an "end" event is
	    // emitted after the final callback is called.
	    if (tasks.length === 0) {
	      task = item.task;
	      item.task = temporald => {
	        task.call(this, temporald);

	        // Emit the end event _from_ within the _last_ task
	        // defined in the Queue tasks. Use the |tasks| array
	        // object as the access key.
	        this.emit("end", temporald);

	        // Reset on last one in the queue
	        this.cumulative = 0;
	      };
	    }

	    if (op === "loop" && tasks.length === 0) {
	      // When transitioning from a "delay" to a "loop", allow
	      // the loop to iterate the amount of time given,
	      // but still start at the correct offset.
	      ref = exportable.delay(this.cumulative - item[op], () => {
	        ref = exportable.loop(item[op], item.task);

	        this.refs.push(ref);
	      });
	    } else {
	      ref = exportable[op](this.cumulative, item.task);
	    }

	    this.refs.push(ref);
	  }
	};

	exportable.queue = function(tasks) {
	  var queue = new Queue(tasks);
	  processQueue();
	  return queue;
	};

	// For more information about this approach:
	//
	//    https://dl.dropbox.com/u/3531958/empirejs/index.html
	//

	var previousTime = getTime();

	function processQueue() {

	  if (!isProcessing) {
	    isProcessing = true;
	    exportable.emit("busy");
	  }

	  var now = getTime();
	  var entries = [];
	  var callProcessQueue = true;
	  var entry, i;

	  // Nothing scheduled, don't call processQueue again
	  if (gLast <= now) {
	    callProcessQueue = false;
	  }

	  for (i = previousTime; i <= now; i++) {
	    // Accumlate entries
	    [].push.apply(entries, queue[i] || []);
	  }

	  if (entries.length) {

	    // console.log(now, entries);
	    // console.log( entries );
	    while (entries.length) {
	      // Shift the entry out of the current list
	      entry = entries.shift();

	      // Execute the entry's callback, with
	      // "entry" as first arg
	      if (entry.isRunnable) {
	        entry.called++;
	        entry.calledAt = now;
	        entry.task.call(entry, entry);
	      }

	      // Additional "loop" handling
	      if (entry.type === "loop" && entry.isRunnable) {
	        // There is an active loop, so keep the
	        // processQueue active.
	        callProcessQueue = true;

	        // Calculate the next execution time
	        entry.later = now + entry.time;

	        // With sub-millisecond wait times, it's conceivable that the clock
	        // may have passed our next task time so make sure it runs
	        if (entry.later > gLast) {
	          gLast = entry.later;
	        }

	        // Create a queue entry if none exists
	        if (!queue[entry.later]) {
	          queue[entry.later] = [];
	        }

	        if (entry.isRunnable) {
	          // Push the entry into the queue
	          queue[entry.later].push(entry);
	        }
	      }
	    }

	    // Cleanup
	    for (i = previousTime; i <= now; i++) {
	      delete queue[i];
	    }

	    entries.length = 0;
	  }

	  previousTime = now;

	  if (callProcessQueue) {
	    tick(processQueue);
	  } else {
	    isProcessing = false;
	    exportable.emit("idle");
	  }
	}

	["loop", "delay"].forEach(function(type) {
	  exportable[type] = function(time, operation) {
	    if (typeof time === "function") {
	      operation = time;
	      time = 10;
	    }
	    var task = new Task({
	      time: time,
	      type: type,
	      task: operation
	    });

	    if (!isProcessing) {
	      processQueue();
	    }

	    return task;
	  };
	});

	// Alias "delay" as "wait" or "defer" (back compat with old compulsive API)
	// These aid only in user code that desires clarity in purpose.
	// Certain practical applications might be suited to
	// "defer" or "wait" vs. "delay"
	//
	exportable.wait = exportable.defer = exportable.delay;

	exportable.repeat = function(n, ms, callback) {
	  return exportable.loop(ms, function(context) {
	    callback(context);

	    if (context.called === n) {
	      this.stop();
	    }
	  });
	};

	exportable.clear = function() {
	  isProcessing = false;
	  exportable.removeAllListeners();
	  queue = {};
	};

	exportable.resolution = function(value) {
	  if (value === 0.1 || value === 0.01) {
	    resolutionDivisor = 1e6 * value;
	    getTime = hrTime;
	  } else {
	    resolutionDivisor = 1e6;
	    getTime = time;
	  }
	  previousTime = getTime();
	};

	temporal$1 = exportable;
	return temporal$1;
}

const Emitter$b = emitter;
const ease = easing;
const { cloneDeep, constrain: constrain$4 } = fn;
let temporal;

// TODO list
// Use functions as keyFrames
// Test metronomic on real animation
// Create jquery FX like queue

/**
 * The max time we want to allow a temporal animation segment to run.
 * When running, temporal can push CPU utilization to 100%. When this
 * time (in ms) is reached we will fall back to setInterval which is less
 * accurate (by nanoseconds) but perfectly serviceable.
 **/
let temporalTTL = 5000;

/**
 * Animation
 * @constructor
 *
 * @param {target} A Servo or Servo.Collection to be animated
 *
 * Animating a single servo
 *
 *   var servo = new five.Servo(10);
 *   var animation = new five.Animation(servo);
 *   animation.enqueue({
 *     cuePoints: [0, 0.25, 0.75, 1],
 *     keyFrames: [{degrees: 90}, 60, -120, {degrees: 90}],
 *     duration: 2000
 *   });
 *
 *
 * Animating a servo array
 *
 *   var a = new five.Servo(9),
 *     b = new five.Servo(10);
 *   var servos = new five.Servo.Collection([a, b]);
 *   var animation = new five.Animation(servos);
 *   animation.enqueue({
 *     cuePoints: [0, 0.25, 0.75, 1],
 *     keyFrames: [
 *       [{degrees: 90}, 60, -120, {degrees: 90}],
 *       [{degrees: 180}, -120, 90, {degrees: 180}],
 *     ],
 *     duration: 2000
 *   });
 *
 */

let Animation$5 = class Animation extends Emitter$b {
  constructor(target) {
    super();

    // Necessary to avoid loading temporal unless necessary
    if (!temporal) {
      temporal = requireTemporal();
    }

    Object.assign(this, new Animation.Segment());

    this.defaultTarget = target || {};
  }
  /**
   * Add an animation segment to the animation queue
   * @param {Object} options Options: cuePoints, keyFrames, duration,
   *   easing, loop, metronomic, progress, fps, onstart, onpause,
   *   onstop, oncomplete, onloop
   */
  enqueue(options = {}) {
    /* istanbul ignore else */
    if (typeof options.target === "undefined") {
      options.target = this.defaultTarget;
    }

    this.segments.push(options);

    /* istanbul ignore if */
    if (!this.paused && !this.isRunning) {
      this.next();
    }

    return this;
  }

  /**
   * Plays next segment in queue
   * Users need not call this. It's automatic
   */
  next() {

    if (this.isRunning) {
      return this;
    } else {
      this.isRunning = true;
    }

    if (this.segments.length > 0) {
      Object.assign(this, new Animation.Segment(this.segments.shift()));
      this.paused = this.currentSpeed === 0 ? true : false;

      if (this.onstart) {
        this.onstart();
      }

      this.normalizeKeyframes();

      if (this.reverse) {
        this.currentSpeed *= -1;
      }

      if (this.currentSpeed !== 0) {
        this.play();
      } else {
        this.paused = true;
      }
    } else {
      this.playLoop.stop();
    }

    return this;
  }

  /**
   * pause
   *
   * Pause animation while maintaining progress, speed and segment queue
   *
   */
  pause() {

    this.emit("animation:pause");

    if (this.playLoop) {
      this.playLoop.stop();
    }
    this.paused = true;

    if (this.onpause) {
      this.onpause();
    }

  }

  /**
   * stop
   *
   * Stop all animations
   *
   */
  stop() {

    this.emit("animation:stop");

    this.segments = [];
    this.isRunning = false;
    if (this.playLoop) {
      this.playLoop.stop();
    }

    if (this.onstop) {
      this.onstop();
    }

  }

  /**
   * speed
   *
   * Get or set the current playback speed
   *
   * @param {Number} speed
   *
   */
  speed(speed) {

    if (typeof speed === "undefined") {
      return this.currentSpeed;
    } else {
      this.currentSpeed = speed;

      // Find our timeline endpoints and refresh rate
      this.scaledDuration = this.duration / Math.abs(this.currentSpeed);
      this.startTime = Date.now() - this.scaledDuration * this.progress;
      this.endTime = this.startTime + this.scaledDuration;

      if (!this.paused) {
        this.play();
      }
      return this;
    }
  }

  /**
   * This function is called in each frame of our animation
   * Users need not call this. It's automatic
   */
  loopFunction({calledAt}) {

    // Find the current timeline progress
    const progress = this.calculateProgress(calledAt);

    // Find the left and right cuePoints/keyFrames;
    const indices = this.findIndices(progress);

    // call render function with tweened value
    this.target[Animation.render](this.tweenedValue(indices, progress));

    /**
     * If this animation has been running in temporal for too long
     * fall back to using setInterval so we don't melt the user's CPU
     **/
    if (calledAt > this.fallBackTime) {
      this.fallBackTime = Infinity;
      if (this.playLoop) {
        this.playLoop.stop();
      }
      this.playLoop = new Animation.TemporalFallback(this);
    }

    // See if we have reached the end of the animation
    /* istanbul ignore else */
    if ((this.progress === 1 && !this.reverse) || (progress === this.loopback && this.reverse)) {

      if (this.loop || (this.metronomic && !this.reverse)) {

        if (this.onloop) {
          this.onloop();
        }

        if (this.metronomic) {
          this.reverse = this.reverse ? false : true;
        }

        this.normalizeKeyframes();
        this.progress = this.loopback;
        this.startTime = Date.now() - this.scaledDuration * this.progress;
        this.endTime = this.startTime + this.scaledDuration;
      } else {

        this.isRunning = false;

        if (this.oncomplete) {
          process.nextTick(() => this.oncomplete());
        }

        if (this.segments.length > 0) {
          process.nextTick(() => this.next());
        } else {
          this.stop();
        }
      }
    }
  }

  /**
   * play
   *
   * Start a segment
   */
  play() {
    const now = Date.now();

    if (this.playLoop) {
      this.playLoop.stop();
    }

    this.paused = false;
    this.isRunning = true;

    // Find our timeline endpoints and refresh rate
    this.scaledDuration = this.duration / Math.abs(this.currentSpeed);
    this.startTime = now - this.scaledDuration * this.progress;
    this.endTime = this.startTime + this.scaledDuration;

    // If our animation runs for more than 5 seconds switch to setTimeout
    this.fallBackTime = now + temporalTTL;
    this.frameCount = 0;

    /* istanbul ignore else */
    if (this.fps) {
      this.rate = 1000 / this.fps;
    }

    this.rate = this.rate | 0;

    this.playLoop = temporal.loop(this.rate, data => this.loopFunction(data));
  }

  findIndices(progress) {
    const indices = {
      left: null,
      right: null
    };

    // Find our current before and after cuePoints
    indices.right = this.cuePoints.findIndex(point => point >= progress);
    indices.left = indices.right === 0 ? /* istanbul ignore next */ 0 : indices.right - 1;

    return indices;
  }

  calculateProgress(calledAt) {

    let progress = (calledAt - this.startTime) / this.scaledDuration;

    if (progress > 1) {
      progress = 1;
    }

    this.progress = progress;

    if (this.reverse) {
      progress = 1 - progress;
    }

    // Ease the timeline
    // to do: When reverse replace inFoo with outFoo and vice versa. skip inOutFoo
    return constrain$4(ease[this.easing](progress), 0, 1);
  }

  tweenedValue(indices, progress) {

    const tween = {
      duration: null,
      progress: null
    };

    const result = this.normalizedKeyFrames.map(keyFrame => {
      const kIndices = {
        left: null,
        right: null
      };

      // If the keyframe at indices.left is null, move left
      for (kIndices.left = indices.left; kIndices.left > -1; kIndices.left--) {
        /* istanbul ignore else */
        if (keyFrame[kIndices.left] !== null) {
          break;
        }
      }

      // If the keyframe at indices.right is null, move right
      kIndices.right = keyFrame.findIndex((frame, index) =>
        index >= indices.right && frame !== null
      );

      // Find our progress for the current tween
      tween.duration = this.cuePoints[kIndices.right] - this.cuePoints[kIndices.left];
      tween.progress = (progress - this.cuePoints[kIndices.left]) / tween.duration;

      // Catch divide by zero
      if (!Number.isFinite(tween.progress)) {
        /* istanbul ignore next */
        tween.progress = this.reverse ? 0 : 1;
      }

      const left = keyFrame[kIndices.left];
      const right = keyFrame[kIndices.right];

      // Apply tween easing to tween.progress
      // to do: When reverse replace inFoo with outFoo and vice versa. skip inOutFoo
      tween.progress = ease[right.easing](tween.progress);

      // Calculate this tween value
      let calcValue;

      if (right.position) {
        // This is a tuple
        calcValue = right.position.map((value, index) => (value - left.position[index]) *
          tween.progress + left.position[index]);
      } else {
        if (typeof right.value === "number" && typeof left.value === "number") {
          calcValue = (right.value - left.value) * tween.progress + left.value;
        } else {
          calcValue = this.target[Animation.keys].reduce((accum, key) => {
            accum[key] = (right.value[key] - left.value[key]) * tween.progress + left.value[key];
            return accum;
          }, {});
        }
      }

      return calcValue;
    });

    return result;
  }

  // Make sure our keyframes conform to a standard
  normalizeKeyframes() {
    let previousVal;
    let keyFrameSet = cloneDeep(this.keyFrames);
    const cuePoints = this.cuePoints;

    // Run through the target's normalization
    keyFrameSet = this.target[Animation.normalize](keyFrameSet);

    // keyFrames can be passed as a single dimensional array if
    // there is just one servo/device. If the first element is not an
    // array, nest keyFrameSet so we only have to deal with one format
    if (!Array.isArray(keyFrameSet[0])) {
      keyFrameSet = [keyFrameSet];
    }

    keyFrameSet.forEach(function(keyFrames) {

      // Pad the right side of keyFrames arrays with null
      for (let i = keyFrames.length; i < cuePoints.length; i++) {
        keyFrames.push(null);
      }

      keyFrames.forEach((keyFrame, i, source) => {

        if (keyFrame !== null) {

          // keyFrames need to be converted to objects
          if (typeof keyFrame !== "object") {
            keyFrame = {
              step: keyFrame,
              easing: "linear"
            };
          }

          // Replace step values
          if (typeof keyFrame.step !== "undefined") {
            keyFrame.value = keyFrame.step === false ?
              previousVal : previousVal + keyFrame.step;
          }

          // Set a default easing function
          if (!keyFrame.easing) {
            keyFrame.easing = "linear";
          }

          // Copy value from another frame
          /* istanbul ignore if */
          if (typeof keyFrame.copyValue !== "undefined") {
            keyFrame.value = source[keyFrame.copyValue].value;
          }

          // Copy everything from another keyframe in this array
          /* istanbul ignore if */
          if (keyFrame.copyFrame) {
            keyFrame = source[keyFrame.copyFrame];
          }

          previousVal = keyFrame.value;

        } else {

          if (i === source.length - 1) {
            keyFrame = {
              value: previousVal,
              easing: "linear"
            };
          } else {
            keyFrame = null;
          }

        }
        source[i] = keyFrame;

      }, this);
    });

    this.normalizedKeyFrames = keyFrameSet;

    return this;
  }
};


/**
 * Placeholders for Symbol
 */
Animation$5.keys = "@@keys";
Animation$5.normalize = "@@normalize";
Animation$5.render = "@@render";

/**
 * Temporal will run up the CPU. temporalFallback is used
 * for long running animations.
 */
Animation$5.TemporalFallback = class {
  constructor(animation) {
    this.interval = setInterval(() => {
      animation.loopFunction({
        calledAt: Date.now()
      });
    }, animation.rate);
  }
  stop() {
    if (this.interval) {
      clearInterval(this.interval);
    }
  }
};


/**
 * Animation.Segment()
 *
 * Create a defaulted segment.
 *
 * Every property ever used on an animation segment
 * MUST be listed here, otherwise properties will
 * persist across segments. This default object is
 * primarily for resetting state.
 *
 */
Animation$5.Segment = class {
  constructor(options) {
    this.cuePoints = [0, 1];
    this.duration = 1000;
    this.easing = "linear";
    this.loop = false;
    this.loopback = 0;
    this.metronomic = false;
    this.currentSpeed = 1;
    this.progress = 0;
    this.fps = 60;
    this.rate = 1000 / 60;
    this.paused = false;
    this.isRunning = false;
    this.segments = [];
    this.onstart = null;
    this.onpause = null;
    this.onstop = null;
    this.oncomplete = null;
    this.onloop = null;

    if (options) {
      Object.assign(this, options);

      if (options.segments) {
        this.segments = options.segments.slice();
      }
    }
  }
};

var animation = Animation$5;

const Emitter$a = emitter;
let shared;

class Bank {
  constructor(options) {
    this.address = options.address;
    this.io = options.io;
    this.io.i2cConfig(options);
  }

  read(register, numBytes, callback) {
    if (register) {
      this.io.i2cRead(this.address, register, numBytes, callback);
    } else {
      this.io.i2cRead(this.address, numBytes, callback);
    }
  }

  write(register, bytes) {
    if (!Array.isArray(bytes)) {
      bytes = [bytes];
    }
    this.io.i2cWrite(this.address, register, bytes);
  }
}

let EVS$5 = class EVS extends Emitter$a {
  constructor({io}) {
    super();

    if (shared) {
      return shared;
    }

    this.bank = {
      a: new Bank({
        address: EVS.BANK_A,
        io,
      }),
      b: new Bank({
        address: EVS.BANK_B,
        io,
      })
    };

    shared = this;
  }

  setup({bank, mode}, type) {
    this.bank[bank].write(mode, [type]);
  }

  read(port, register, numBytes, callback) {

    if (port.sensor && port.offset && !EVS.isRawSensor(port)) {
      register += port.offset;
    }

    this.bank[port.bank].read(register, numBytes, callback);
  }

  write({bank}, register, data) {
    this.bank[bank].write(register, data);
  }
};

EVS$5.shieldPort = pin => {
  const port = EVS$5[pin];

  if (port === undefined) {
    throw new Error("Invalid EVShield pin name");
  }

  let address;
  let analog;
  let bank;
  let motor;
  let mode;
  let offset;
  let sensor;
  let endsWithS1 = false;

  if (pin.startsWith("BA")) {
    address = EVS$5.BANK_A;
    bank = "a";
  } else {
    address = EVS$5.BANK_B;
    bank = "b";
  }

  if (pin.includes("M")) {
    motor = pin.endsWith("M1") ? EVS$5.S1 : EVS$5.S2;
  }

  if (pin.includes("S")) {
    endsWithS1 = pin.endsWith("S1");

    // Used for reading 2 byte integer values from raw sensors
    analog = endsWithS1 ? EVS$5.S1_ANALOG : EVS$5.S2_ANALOG;
    // Sensor Mode (1 or 2?)
    mode = endsWithS1 ? EVS$5.S1_MODE : EVS$5.S2_MODE;
    // Used for read registers
    offset = endsWithS1 ? EVS$5.S1_OFFSET : EVS$5.S2_OFFSET;
    // Used to address "sensor type"
    sensor = endsWithS1 ? EVS$5.S1 : EVS$5.S2;
  }

  return {
    address,
    analog,
    bank,
    mode,
    motor,
    offset,
    port,
    sensor,
  };
};

EVS$5.isRawSensor = ({analog}) => analog === EVS$5.S1_ANALOG || analog === EVS$5.S2_ANALOG;


/*
 * Shield Registers
 */

EVS$5.BAS1 = 0x01;
EVS$5.BAS2 = 0x02;
EVS$5.BBS1 = 0x03;
EVS$5.BBS2 = 0x04;

EVS$5.BAM1 = 0x05;
EVS$5.BAM2 = 0x06;
EVS$5.BBM1 = 0x07;
EVS$5.BBM2 = 0x08;

EVS$5.BANK_A = 0x1A;
EVS$5.BANK_B = 0x1B;

EVS$5.S1 = 0x01;
EVS$5.S2 = 0x02;

EVS$5.M1 = 0x01;
EVS$5.M2 = 0x02;
EVS$5.MM = 0x03;

EVS$5.Type_NONE = 0x00;
EVS$5.Type_SWITCH = 0x01;
EVS$5.Type_ANALOG = 0x02;

EVS$5.Type_I2C = 0x09;

/*
 * Sensor Mode NXT
 */
EVS$5.Type_NXT_LIGHT_REFLECTED = 0x03;
EVS$5.Type_NXT_LIGHT = 0x04;
EVS$5.Type_NXT_COLOR = 0x0D;
EVS$5.Type_NXT_COLOR_RGBRAW = 0x04;
EVS$5.Type_NXT_COLORRED = 0x0E;
EVS$5.Type_NXT_COLORGREEN = 0x0F;
EVS$5.Type_NXT_COLORBLUE = 0x10;
EVS$5.Type_NXT_COLORNONE = 0x11;


EVS$5.Type_DATABIT0_HIGH = 0x40;

/*
 * Sensor Port Controls
 */
EVS$5.S1_MODE = 0x6F;
// EVS.S1_EV3_MODE = 0x6F;
EVS$5.S1_ANALOG = 0x70;
EVS$5.S1_OFFSET = 0;

EVS$5.S2_MODE = 0xA3;
// EVS.S2_EV3_MODE = 0x6F;
EVS$5.S2_ANALOG = 0xA4;
EVS$5.S2_OFFSET = 52;

/*
 * Sensor Mode EV3
 */
EVS$5.Type_EV3_LIGHT_REFLECTED = 0x00;
EVS$5.Type_EV3_LIGHT = 0x01;
EVS$5.Type_EV3_COLOR = 0x02;
EVS$5.Type_EV3_COLOR_REFRAW = 0x03;
EVS$5.Type_EV3_COLOR_RGBRAW = 0x04;
EVS$5.Type_EV3_TOUCH = 0x12;
EVS$5.Type_EV3 = 0x13;

/*
 * Sensor Read Registers
 */
EVS$5.Light = 0x83;
EVS$5.Bump = 0x84;
EVS$5.ColorMeasure = 0x83;
EVS$5.Proximity = 0x83;
EVS$5.Touch = 0x83;
EVS$5.Ultrasonic = 0x81;
EVS$5.Mode = 0x81;

/*
 * Sensor Read Byte Counts
 */
EVS$5.Light_Bytes = 2;
EVS$5.Analog_Bytes = 2;
EVS$5.Bump_Bytes = 1;
EVS$5.ColorMeasure_Bytes = 2;
EVS$5.Proximity_Bytes = 2;
EVS$5.Touch_Bytes = 1;


/*
 * Motor selection
 */
EVS$5.Motor_1 = 0x01;
EVS$5.Motor_2 = 0x02;
EVS$5.Motor_Both = 0x03;

/*
 * Motor next action
 */
// stop and let the motor coast.
EVS$5.Motor_Next_Action_Float = 0x00;
// apply brakes, and resist change to tachometer, but if tach position is forcibly changed, do not restore position
EVS$5.Motor_Next_Action_Brake = 0x01;
// apply brakes, and restore externally forced change to tachometer
EVS$5.Motor_Next_Action_BrakeHold = 0x02;

EVS$5.Motor_Stop = 0x60;
EVS$5.Motor_Reset = 0x52;

/*
 * Motor direction
 */

EVS$5.Motor_Reverse = 0x00;
EVS$5.Motor_Forward = 0x01;

/*
 * Motor Tachometer movement
 */

// Move the tach to absolute value provided
EVS$5.Motor_Move_Absolute = 0x00;
// Move the tach relative to previous position
EVS$5.Motor_Move_Relative = 0x01;

/*
 * Motor completion
 */

EVS$5.Motor_Completion_Dont_Wait = 0x00;
EVS$5.Motor_Completion_Wait_For = 0x01;

/*
 * 0-100
 */
EVS$5.Speed_Full = 90;
EVS$5.Speed_Medium = 60;
EVS$5.Speed_Slow = 25;

/*
 * Motor Port Controls
 */
EVS$5.CONTROL_SPEED = 0x01;
EVS$5.CONTROL_RAMP = 0x02;
EVS$5.CONTROL_RELATIVE = 0x04;
EVS$5.CONTROL_TACHO = 0x08;
EVS$5.CONTROL_BRK = 0x10;
EVS$5.CONTROL_ON = 0x20;
EVS$5.CONTROL_TIME = 0x40;
EVS$5.CONTROL_GO = 0x80;

EVS$5.STATUS_SPEED = 0x01;
EVS$5.STATUS_RAMP = 0x02;
EVS$5.STATUS_MOVING = 0x04;
EVS$5.STATUS_TACHO = 0x08;
EVS$5.STATUS_BREAK = 0x10;
EVS$5.STATUS_OVERLOAD = 0x20;
EVS$5.STATUS_TIME = 0x40;
EVS$5.STATUS_STALL = 0x80;

EVS$5.COMMAND = 0x41;
EVS$5.VOLTAGE = 0x6E;

EVS$5.SETPT_M1 = 0x42;
EVS$5.SPEED_M1 = 0x46;
EVS$5.TIME_M1 = 0x47;
EVS$5.CMD_B_M1 = 0x48;
EVS$5.CMD_A_M1 = 0x49;

EVS$5.SETPT_M2 = 0x4A;
EVS$5.SPEED_M2 = 0x4E;
EVS$5.TIME_M2 = 0x4F;
EVS$5.CMD_B_M2 = 0x50;
EVS$5.CMD_A_M2 = 0x51;


/*
 * Motor Read registers.
 */
EVS$5.POSITION_M1 = 0x52;
EVS$5.POSITION_M2 = 0x56;
EVS$5.STATUS_M1 = 0x5A;
EVS$5.STATUS_M2 = 0x5B;
EVS$5.TASKS_M1 = 0x5C;
EVS$5.TASKS_M2 = 0x5D;

EVS$5.ENCODER_PID = 0x5E;
EVS$5.SPEED_PID = 0x64;
EVS$5.PASS_COUNT = 0x6A;
EVS$5.TOLERANCE = 0x6B;

/*
 * Built-in components
 */
EVS$5.BTN_PRESS = 0xDA;
EVS$5.RGB_LED = 0xD7;
EVS$5.CENTER_RGB_LED = 0xDE;



var evshield = EVS$5;

const Board$l = requireBoard();
const Collection$b = collection;
const Emitter$9 = emitter;
const EVS$4 = evshield;
const Fn$9 = fn;

const priv$k = new Map();
const Pins$5 = Board$l.Pins;
const aliases$1 = {
  down: ["down", "press"],
  up: ["up", "release"]
};

const Controllers$g = {
  DEFAULT: {
    initialize: {
      value(options, callback) {
        const state = priv$k.get(this);

        if (Pins$5.isFirmata(this) &&
            (typeof options.pinValue === "string" &&
              (options.pinValue.length > 1 && options.pinValue[0] === "A"))) {
          options.pinValue = this.io.analogPins[+options.pinValue.slice(1)];
        }

        this.pin = Number.isNaN(+options.pinValue) ? options.pinValue : +options.pinValue;

        this.io.pinMode(this.pin, this.io.MODES.INPUT);

        // Enable the pullup resistor after setting pin mode
        if (this.pullup) {
          this.io.digitalWrite(this.pin, this.io.HIGH);
        }

        // Enable the pulldown resistor after setting pin mode
        if (this.pulldown) {
          this.io.digitalWrite(this.pin, this.io.LOW);
        }

        this.io.digitalRead(this.pin, data => {
          if (data !== state.last) {
            callback(data);
          }
        });
      }
    },
    toBoolean: {
      writable: true,
      value(raw) {
        return raw === this.downValue;
      }
    }
  },

  TINKERKIT: {
    initialize: {
      value(options, callback) {
        const state = priv$k.get(this);
        let value = 0;

        this.io.pinMode(this.pin, this.io.MODES.ANALOG);

        this.io.analogRead(this.pin, data => {
          data = data > 512 ?  1 : 0;

          // This condition simulates digitalRead's
          // behavior of limiting calls to changes in
          // pin value.
          /* istanbul ignore else */
          if (data !== value && data !== state.last) {
            callback(data);
          }

          value = data;
        });
      }
    },
    toBoolean: {
      writable: true,
      value(raw) {
        return raw === this.downValue;
      }
    }
  },

  EVS_EV3: {
    initialize: {
      value(options, callback) {
        const state = priv$k.get(this);

        state.previous = 0;
        state.shield = EVS$4.shieldPort(options.pin);
        state.register = EVS$4.Touch;

        state.ev3 = new EVS$4(Object.assign(options, {
          io: this.io
        }));
        state.ev3.setup(state.shield, EVS$4.Type_EV3_TOUCH);
        state.ev3.read(state.shield, EVS$4.Touch, EVS$4.Touch_Bytes, data => {
          const value = data[0];
          // Since i2cRead is continuous regardless of the reading,
          // and digitalRead is continuous but only called for changes
          // in reading value, we need to suppress repeated calls to
          // callback by limiting to only changed values.
          /* istanbul ignore else */
          if (state.previous !== value) {
            callback(value);
          }
          state.previous = value;
        });
      }
    },
    toBoolean: {
      writable: true,
      value(raw) {
        return raw === this.downValue;
      }
    }
  },
  EVS_NXT: {
    initialize: {
      value(options, callback) {
        const state = priv$k.get(this);

        state.previous = 0;
        state.shield = EVS$4.shieldPort(options.pin);

        state.ev3 = new EVS$4(Object.assign(options, {
          io: this.io
        }));
        state.ev3.setup(state.shield, EVS$4.Type_ANALOG);
        state.ev3.read(state.shield, state.shield.analog, EVS$4.Analog_Bytes, data => {
          let value = data[0] | (data[1] << 8);
          // Since i2cRead is continuous regardless of the reading,
          // and digitalRead is continuous but only called for changes
          // in reading value, we need to suppress repeated calls to
          // callback by limiting to only changed values.
          value = value < 300 ? 1 : 0;

          /* istanbul ignore else */
          if (state.previous !== value) {
            callback(value);
          }
          state.previous = value;
        });
      }
    },
    toBoolean: {
      writable: true,
      value(raw) {
        return raw === this.downValue;
      }
    }
  }
};

/**
 * Button
 * @constructor
 *
 * Button();
 *
 * Button({
 *   pin: 10
 * });
 *
 *
 * @param {Object} options [description]
 *
 */

class Button extends Emitter$9 {
  constructor(options) {
    super();

    let raw;
    let invert = false;
    let downValue = 1;
    let upValue = 0;
    const state = {
      interval: null,
      last: null
    };

    // Create a debounce boundary on event triggers
    // this avoids button events firing on
    // press noise and false positives
    const trigger = Fn$9.debounce(key => {
      aliases$1[key].forEach(type => this.emit(type));
    }, 7);

    let pinValue = typeof options === "object" ? options.pin : options;

    Board$l.Component.call(
      this, options = Board$l.Options(options)
    );

    Board$l.Controller.call(this, Controllers$g, options);

    options.pinValue = pinValue;

    // `holdtime` is used by an interval to determine
    // if the button has been released within a specified
    // time frame, in milliseconds.
    this.holdtime = options.holdtime || 500;

    // `options.isPullup` is included as part of an effort to
    // phase out "isFoo" options properties
    this.pullup = options.pullup || options.isPullup || false;

    this.pulldown = options.pulldown || options.isPulldown || false;

    // Turns out some button circuits will send
    // 0 for up and 1 for down, and some the inverse,
    // so we can invert our function with this option.
    // Default to invert in pullup mode, but use options.invert
    // if explicitly defined (even if false)
    invert = typeof options.invert !== "undefined" ?
      options.invert : (this.pullup || false);

    if (invert) {
      downValue = downValue ^ 1;
      upValue = upValue ^ 1;
    }

    state.last = upValue;

    // Create a "state" entry for privately
    // storing the state of the button
    priv$k.set(this, state);

    Object.defineProperties(this, {
      value: {
        get() {
          return Number(this.isDown);
        }
      },
      invert: {
        get() {
          return invert;
        },
        set(value) {
          invert = value;
          downValue = invert ? 0 : 1;
          upValue = invert ? 1 : 0;
          state.last = upValue;
        }
      },
      downValue: {
        get() {
          return downValue;
        },
        set(value) {
          downValue = value;
          upValue = value ^ 1;
          invert = value ? true : false;
          state.last = upValue;
        }
      },
      upValue: {
        get() {
          return upValue;
        },
        set(value) {
          upValue = value;
          downValue = value ^ 1;
          invert = value ? true : false;
          state.last = downValue;
        }
      },
      isDown: {
        get() {
          return this.toBoolean(raw);
        }
      }
    });

    /* istanbul ignore else */
    if (typeof this.initialize === "function") {
      this.initialize(options, data => {
        // Update the raw data value, which
        // is used by isDown = toBoolean()
        raw = data;

        if (!this.isDown) {
          /* istanbul ignore else */
          if (state.interval) {
            clearInterval(state.interval);
          }
          trigger("up");
        }

        if (this.isDown) {
          trigger("down");

          state.interval = setInterval(() => {
            /* istanbul ignore else */
            if (this.isDown) {
              this.emit("hold");
            }
          }, this.holdtime);
        }

        state.last = data;
      });
    }
  }
}

/**
 * Fired when the button is pressed down
 *
 * @event
 * @name down
 * @memberOf Button
 */

/**
 * Fired when the button is held
 *
 * @event
 * @name hold
 * @memberOf Button
 */

/**
 * Fired when the button is released
 *
 * @event
 * @name up
 * @memberOf Button
 */


/**
 * Buttons()
 * new Buttons()
 */

class Buttons extends Collection$b.Emitter {
  constructor(numsOrObjects) {
    super(numsOrObjects);
  }
  get type() {
    return Button;
  }
}

Collection$b.installMethodForwarding(
  Buttons.prototype, Button.prototype
);

// Assign Buttons Collection class as static "method" of Button.
Button.Collection = Buttons;

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  Button.Controllers = Controllers$g;
  Button.purge = function() {
    priv$k.clear();
  };
}


var button = Button;

const Board$k = requireBoard();
const EVS$3 = evshield;
const Emitter$8 = emitter;
const Fn$8 = fn;
const priv$j = new Map();

const Controllers$f = {
  EVS_EV3: {
    initialize: {
      value(options, callback) {
        const state = priv$j.get(this);

        if (options.mode) {
          options.mode = options.mode.toUpperCase();
        }

        state.mode = options.mode === "RAW" ? EVS$3.Type_EV3_COLOR_RGBRAW : EVS$3.Type_EV3_COLOR;
        state.bytes = state.mode === EVS$3.Type_EV3_COLOR_RGBRAW ? 6 : 2;

        // Do not change the order of these items. They are listed such that the
        // index corresponds to the color code produced by the EV3 color sensor.
        // The range is very limited.
        state.colors = [
          [],
          [0, 0, 0],
          [0, 0, 255],
          [0, 128, 0],
          [255, 255, 0],
          [255, 0, 0],
          [255, 255, 255],
          [139, 69, 19],
        ];

        state.shield = EVS$3.shieldPort(options.pin);
        state.ev3 = new EVS$3(Object.assign(options, {
          io: this.io
        }));

        state.ev3.setup(state.shield, EVS$3.Type_EV3);
        state.ev3.write(state.shield, 0x81 + state.shield.offset, state.mode);
        state.ev3.read(state.shield, EVS$3.ColorMeasure, state.bytes, data => {
          let value = "";
          if (state.bytes === 2) {
            value += String((data[0] | (data[1] << 8)) || 1);
          } else {
            for (let i = 0; i < 3; i++) {
              value += data[i * 2].toString(16).padStart(2, "0");
            }
          }
          callback(value);
        });
      }
    },
    toRGB: {
      value(raw) {
        const state = priv$j.get(this);

        if (state.mode === EVS$3.Type_EV3_COLOR) {
          return raw > 0 && raw < 8 ? state.colors[raw] : state.colors[0];
        } else {
          raw = String(raw);
          return [0, 0, 0].map((zero, index) => parseInt(raw.slice(index * 2, index * 2 + 2), 16));
        }
      }
    }
  },
  EVS_NXT: {
    initialize: {
      value(options, callback) {
        const state = priv$j.get(this);

        if (options.mode) {
          options.mode = options.mode.toUpperCase();
        }

        state.mode = options.mode === "RAW" ? EVS$3.Type_NXT_COLOR_RGBRAW : EVS$3.Type_NXT_COLOR;
        state.bytes = state.mode === EVS$3.Type_NXT_COLOR_RGBRAW ? 10 : 1;

        if (state.mode === EVS$3.Type_NXT_COLOR_RGBRAW) {
          throw new Error("Raw RGB is not currently supported for the NXT.");
        }

        // Do not change the order of these items. They are listed such that the
        // index corresponds to the color code produced by the EV3 color sensor.
        // The range is very limited.
        state.colors = [
          [],
          [0, 0, 0],
          [0, 0, 255],
          [0, 128, 0],
          [255, 255, 0],
          [255, 0, 0],
          [255, 255, 255],
        ];

        state.shield = EVS$3.shieldPort(options.pin);
        state.ev3 = new EVS$3(Object.assign(options, {
          io: this.io
        }));
        state.ev3.setup(state.shield, EVS$3.Type_NXT_COLOR);
        state.ev3.read(state.shield, 0x70 + state.shield.offset, state.bytes, data => {
          let value = "";

          if (state.bytes === 1) {
            value += String(data[0]);
          }

          // if (data[4] !== 0) {
          callback(value);
          // }
        });
      }
    },
    toRGB: {
      value(raw) {
        const state = priv$j.get(this);

        if (state.mode === EVS$3.Type_NXT_COLOR) {
          return raw > 0 && raw < 7 ? state.colors[raw] : state.colors[0];
        } else {
          raw = String(raw);
          return [0, 0, 0].map((zero, index) => parseInt(raw.slice(index * 2, index * 2 + 2), 16));
        }
      }
    }
  },
  ISL29125: {
    ADDRESSES: {
      value: [0x44]
    },
    REGISTER: {
      value: {
        RESET: 0x00,
        // mode/lux range
        CONFIG1: 0x01,
        // ir adjust/filtering
        CONFIG2: 0x02,
        // interrupt control
        CONFIG3: 0x03,
        // Same as "GREEN DATA - LOW BYTE"
        READ: 0x09
      }
    },
    initialize: {
      value(options, callback) {
        const { Drivers } = requireSip();
        const address = Drivers.addressResolver(this, options);
        this.io.i2cConfig(options);

        // Reset chip
        this.io.i2cWriteReg(address, this.REGISTER.RESET, 0x46);

        // RGB | 10K Lux | 12bits
        this.io.i2cWriteReg(address, this.REGISTER.CONFIG1, 0x05 | 0x08 | 0x00);

        // High adjust
        this.io.i2cWriteReg(address, this.REGISTER.CONFIG2, 0x3F);

        // No Interrupts
        this.io.i2cWriteReg(address, this.REGISTER.CONFIG3, 0x00);

        this.io.i2cRead(address, this.REGISTER.READ, 6, data => {
          let value = "";

          // Register order: GLSB, GMSB, RLSB, RMSB, BLSB, BMSB
          const g = (data[1] << 8) | data[0];
          const r = (data[3] << 8) | data[2];
          const b = (data[5] << 8) | data[4];

          const rgb = [r >> 2, g >> 2, b >> 2].map(value => Fn$8.constrain(value, 0, 255));

          for (let i = 0; i < 3; i++) {
            value += rgb[i].toString(16).padStart(2, "0");
          }

          callback(value);
        });
      }
    },
    toRGB: {
      value(raw) {
        raw = String(raw);
        return [0, 0, 0].map((zero, index) => parseInt(raw.slice(index * 2, index * 2 + 2), 16));
      }
    }
  },
};


const colorNames$1 = ["red", "green", "blue"];


/**
 * Color
 * @constructor
 *
 */

class Color extends Emitter$8 {
  constructor(options) {
    super();

    Board$k.Component.call(
      this, options = Board$k.Options(options)
    );

    Board$k.Controller.call(this, Controllers$f, options);

    const state = {};
    const freq = options.freq || 25;
    let raw = 0;
    let last = null;

    priv$j.set(this, state);


    if (!this.toRGB) {
      this.toRGB = options.toRGB || (x => x);
    }

    Object.defineProperties(this, {
      value: {
        get() {
          return raw;
        }
      },
      rgb: {
        get() {
          return this.toRGB(raw).reduce((accum, value, index) => {
            accum[colorNames$1[index]] = value;
            return accum;
          }, {});
        }
      }
    });

    if (typeof this.initialize === "function") {
      this.initialize(options, data => {
        raw = data;
      });
    }

    setInterval(() => {
      if (raw === undefined) {
        return;
      }

      const data = {
        rgb: this.rgb,
      };

      this.emit("data", data);

      if (raw !== last) {
        last = raw;
        this.emit("change", data);
      }
    }, freq);
  }

  static hexCode(rgb) {
    if (rgb.red === undefined || rgb.green === undefined || rgb.blue === undefined) {
      return null;
    }
    return rgb.length === 0 ? "unknown" : colorNames$1.reduce((accum, name) => accum += rgb[name].toString(16).padStart(2, "0"), "");
  }
}


/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  Color.Controllers = Controllers$f;
  Color.purge = () => {
    priv$j.clear();
  };
}



var color = Color;

const Board$j = requireBoard();
const Expander$5 = requireExpander();
const Pins$4 = Board$j.Pins;
const Collection$a = collection;
const {scale: scale$3, fscale: fscale$1, constrain: constrain$3} = fn;

const priv$i = new Map();


const Controllers$e = {
  PCA9685: {
    initialize: {
      value: function(options) {
        const state = priv$i.get(this);

        this.address = options.address || 0x40;
        this.pwmRange = options.pwmRange || [1000, 2000];
        this.frequency = options.frequency || 50;

        state.expander = Expander$5.get({
          address: this.address,
          controller: this.controller,
          bus: this.bus,
          pwmRange: this.pwmRange,
          frequency: this.frequency,
        });

        this.pin = state.expander.normalize(options.pin);
      }
    },
    update: {
      writable: true,
      value: function(us) {
        const state = priv$i.get(this);
        state.expander.servoWrite(this.pin, us);
      }
    }
  },
  DEFAULT: {
    initialize: {
      value: function(options) {

        // When in debug mode, if pin is not a PWM pin, emit an error
        if (options.debug && !this.board.pins.isServo(this.pin)) {
          Board$j.Pins.Error({
            pin: this.pin,
            type: "PWM",
            via: "Servo",
          });
        }

        this.io.servoConfig(this.pin, this.pwmRange[0], this.pwmRange[1]);
      }
    },
    update: {
      writable: true,
      value: function(us) {
        this.io.servoWrite(this.pin, us);
      }
    }
  }
};

const FORWARD = "FORWARD";
const FORWARD_REVERSE = "FORWARD_REVERSE";
const FORWARD_BRAKE_REVERSE = "FORWARD_BRAKE_REVERSE";

const Devices$1 = {
  [FORWARD]: {
    device: {
      value: FORWARD
    },
  },
  [FORWARD_REVERSE]: {
    device: {
      value: FORWARD_REVERSE
    },
  },
  [FORWARD_BRAKE_REVERSE]: {
    device: {
      value: FORWARD_BRAKE_REVERSE
    },
  }
};

/**
 * ESC
 * @constructor
 *
 * @param {Object} options Options: pin, range
 * @param {Number} pin  Pin number
 */

class ESC {
  constructor(options) {
    if (!(this instanceof ESC)) {
      return new ESC(options);
    }

    Board$j.Component.call(
      this, options = Board$j.Options(options)
    );

    // StandardFirmata on Arduino allows controlling
    // servos from analog pins.
    // If we're currently operating with an Arduino
    // and the user has provided an analog pin name
    // (eg. "A0", "A5" etc.), parse out the numeric
    // value and capture the fully qualified analog
    // pin number.
    let pinValue;

    if (typeof options.controller === "undefined" && Pins$4.isFirmata(this)) {
      if (typeof pinValue === "string" && (pinValue.length > 1 && pinValue[0] === "A")) {
        pinValue = this.io.analogPins[+pinValue.slice(1)];
      }

      pinValue = +pinValue;

      // If the board's default pin normalization
      // came up with something different, use the
      // the local value.
      if (!Number.isNaN(pinValue) && this.pin !== pinValue) {
        this.pin = pinValue;
      }
    }

    Board$j.Controller.call(this, Controllers$e, options);

    Object.defineProperties(this, (options.device && Devices$1[options.device]) || Devices$1.FORWARD);

    this.pwmRange = options.pwmRange || [1000, 2000];
    this.neutral = options.neutral;

    priv$i.set(this, {});

    this.initialize(options);

    const [ low, high ] = this.pwmRange;

    if (typeof this.neutral !== "undefined" && this.neutral <= 100) {
      this.neutral = scale$3(this.neutral, 0, 100, low, high);
    }

    if (typeof this.neutral === "undefined") {
      this.neutral = (low + high) / 2;
    }

    // Enforce pwm range on neutral point
    this.neutral = constrain$3(this.neutral, low, high);

    if (this.device === FORWARD_REVERSE &&
        this.neutral === low) {
      throw new Error("Bidirectional (FORWARD_REVERSE) speed controllers require a non-zero neutral point");
    }

    if (this.device === FORWARD) {
      this.neutral = low;
    }

    this.throttle(this.neutral);
  }
  /**
   * throttle(percent)
   *
   * Throttle the ESC's speed by setting the 0%.
   *
   * @param  {Percent} throttle
   * @return {ESC} instance
   *
   *
   * throttle(usec)
   *
   * Throttle the ESC's speed by setting the usec pulse.
   *
   * @param  {Integer} throttle usec in range.
   * @return {ESC} instance
   */
  throttle(value) {

    // It's a %, so convert to usec
    if (value > 0 && value <= 100) {
      if (this.device !== "FORWARD") {
        throw new Error("Bidirectional (FORWARD_REVERSE, FORWARD_*_REVERSE) speed controllers require a pulse in usec");
      }
      value = fscale$1(value, 0, 100, this.pwmRange[0], this.pwmRange[1]);
    }

    this.update(constrain$3(value, this.pwmRange[0], this.pwmRange[1]));
    return this;
  }

  /**
   * brake Stop the ESC by hitting the brakes ;)
   * @return {Object} instance
   */
  brake() {
    this.update(this.neutral);
    return this;
  }
}

/**
 * new ESC.Collection()
 *
 * Constructs an ESC Collection instance containing ESC instances
 */
class ESCs extends Collection$a {
  constructor(numsOrObjects) {
    super(numsOrObjects);
  }
  get type() {
    return ESC;
  }
}

Collection$a.installMethodForwarding(
  ESCs.prototype, ESC.prototype
);

// Assign ESCs Collection class as static "method" of ESC.
ESC.Collection = ESCs;

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  ESC.Controllers = Controllers$e;
  ESC.purge = function() {
    priv$i.clear();
  };
}

var esc = ESC;

const Board$i = requireBoard();
const Emitter$7 = emitter;
const Pin$1 = pin;
const {toFixed: toFixed$3} = fn;
const priv$h = new Map();

const Breakouts = {

  /*
   * https://www.adafruit.com/products/746
   */
  ADAFRUIT_ULTIMATE_GPS: {
    receiver: {
      value: "FGPMMOPA6H"
    }
  }

};

// GPS Antenna Modules
const Receivers = {

  /*
   * http://www.gtop-tech.com/en/product/LadyBird-1-PA6H/MT3339_GPS_Module_04.html
   */
  FGPMMOPA6H: {
    // Later, when we add logging that code will go here
    chip: {
      value: "MT3339"
    }
  }

};

// GPS chips
const Chips = {

  DEFAULT: {
    baud: {
      value: 9600,
      writable: true
    },
    configure: {
      value(callback) {
        process.nextTick(callback);
      }
    }
  },

  /*
   * http://www.mediatek.com/en/products/connectivity/gps/mt3339/
   */
  MT3339: {
    baud: {
      value: 9600,
      writable: true
    },
    configure: {
      value(callback) {
        process.nextTick(callback);
      }
    },
    frequency: {
      get() {
        const state = priv$h.get(this);
        return state.frequency;
      },
      set(frequency) {
        const state = priv$h.get(this);

        // Enforce maximum frequency of 10hz
        if (frequency < 10) {
          frequency = 10;
        }

        state.frequency = frequency;
        this.sendCommand(`$PMTK220,${String(1000 / state.frequency)}`);
      }
    },
    restart: {
      // Reboot the receiver
      value(coldRestart) {

        if (coldRestart === true) {
          this.sendCommand("$PMTK103");
        } else {
          this.sendCommand("$PMTK101");
          setTimeout(() => {
            this.sendCommand("");
          }, 1000);
        }

      }
    }
  }
};


/**
 *
 * @constructor
 *
 * @param {Object} options Options:
 *                         pin(s), chip, receiver,
 *                         breakout, fixed, serialport, frequency
 *
 * Sample initialization
 *
 *    new five.GPS({ pins: {rx: 10, tx: 11});
 *
 */

class GPS extends Emitter$7 {
  constructor(options) {
    super();

    // Allow users to pass in a 2 element array for rx and tx pins
    if (Array.isArray(options)) {
      options = {
        pins: {
          rx: options[0],
          tx: options[1],
          onOff: options[2]
        }
      };
    }

    if (typeof options.pins === "undefined") {
      options.pins = {};
    }

    Board$i.Component.call(
      this, options = Board$i.Options(options)
    );

    // Get user values for breakout, receiver and chip
    let breakout = options.breakout || {};
    let receiver = options.receiver;
    let chip = options.chip;

    // If a breakout is defined check for receiver and chip
    if (Breakouts[breakout]) {
      if (!receiver && Breakouts[breakout].receiver) {
        receiver = Breakouts[breakout].receiver.value;
      }

      if (!chip && Breakouts[breakout].chip) {
        chip = Breakouts[breakout].chip.value;
      }
    }

    // If a receiver was defined or derived but chip was not
    if (!chip) {
      if (receiver && Receivers[receiver].chip) {
        chip = Receivers[receiver].chip.value;
      } else {
        chip = "DEFAULT";
      }
    }

    // Allow users to pass in custom breakouts types
    breakout = typeof breakout === "string" ?
      Chips[breakout] : options.breakout;

    // Allow users to pass in custom chip types
    chip = typeof chip === "string" ?
      Chips[chip] : options.chip;

    // Allow users to pass in custom receiver types
    receiver = typeof receiver === "string" ?
      Receivers[receiver] : options.receiver;

    // Chip decorates the instance
    if (chip) {
      Object.defineProperties(this, chip);
    }

    // Receiver decorates this instance
    if (receiver) {
      Object.defineProperties(this, receiver);
    }

    // Breakout decorates this instance
    if (breakout) {
      Object.defineProperties(this, breakout);
    }

    // If necessary set default property values
    this.fixed = options.fixed || 6;
    this.baud = options.baud || this.baud;

    // Create a "state" entry for privately
    // storing the state of the instance
    let state = {
      sat: {},
      latitude: 0.0,
      longitude: 0.0,
      altitude: 0.0,
      speed: 0.0,
      course: 0.0,
      frequency: 1,
      lowPowerMode: false
    };

    priv$h.set(this, state);

    // Getters for private state values
    Object.defineProperties(this, {
      latitude: {
        get() {
          return state.latitude;
        }
      },
      longitude: {
        get() {
          return state.longitude;
        }
      },
      altitude: {
        get() {
          return state.altitude;
        }
      },
      sat: {
        get() {
          return state.sat;
        }
      },
      speed: {
        get() {
          return state.speed;
        }
      },
      course: {
        get() {
          return state.course;
        }
      },
      time: {
        get() {
          return state.time;
        }
      }
    });

    if (this.initialize) {
      this.initialize(options);
    }
  }

  /*
   * Default intialization for serial GPS
   */
  initialize(options) {

    const state = priv$h.get(this);
    state.portId = options.serialPort ||
                    options.portId ||
                    options.port ||
                    options.bus;

    // firmata.js has a SERIAL_PORT_IDs.DEFAULT that is not
    // necessary in other IO plugins so it won't always exist.
    if (typeof state.portId === "undefined" && this.io.SERIAL_PORT_IDs) {
      state.portId = this.io.SERIAL_PORT_IDs.DEFAULT;
    }

    // Set the pin modes
    ["tx", "rx"].forEach(pin => {
      if (this.pins[pin]) {
        this.io.pinMode(this.pins[pin], this.io.MODES.SERIAL);
      }
    });

    if (this.pins.onOff) {
      this.io.pinMode(this.pins.onOff, this.io.MODES.OUTPUT);
      this.onOff = new Pin$1(this.pins.onOff);
    }

    this.io.serialConfig({
      portId: state.portId,
      baud: this.baud,
      rxPin: this.pins.rx,
      txPin: this.pins.tx
    });

    if (this.configure) {
      this.configure(() => {
        this.listen();
        if (options.frequency) {
          this.frequency = options.frequency;
        }
      });
    }

  }

  sendCommand(string) {

    const state = priv$h.get(this);
    const cc = [];

    // Convert the string to a charCode array
    for (let i = 0; i < string.length; ++i) {
      cc[i] = string.charCodeAt(i);
    }

    // Append *, checksum and cr/lf
    const hexsum = getNmeaChecksum(string.substring(1));
    cc.push(42, hexsum.charCodeAt(0), hexsum.charCodeAt(1), 13, 10);

    this.io.serialWrite(state.portId, cc);
  }

  listen() {

    const state = priv$h.get(this);
    let input = "";

    // Start the read loop
    this.io.serialRead(state.portId, data => {

      input += new Buffer(data).toString("ascii");
      const sentences = input.split("\r\n");

      if (sentences.length > 1) {
        for (let i = 0; i < sentences.length - 1; i++) {
          this.parseNmeaSentence(sentences[i]);
        }
        input = sentences[sentences.length - 1];
      }
    });
  }

  /*
   * NMEA Sentence Information
   * http://aprs.gids.nl/nmea
   */
  parseNmeaSentence(sentence) {

    const state = priv$h.get(this);
    const cksum = sentence.split("*");

    // Check for valid sentence
    if (cksum[1] !== getNmeaChecksum(cksum[0].substring(1))) {
      return;
    }

    this.emit("sentence", sentence);

    const segments = cksum[0].split(",");
    const last = {
      latitude: state.latitude,
      longitude: state.longitude,
      altitude: state.altitude,
      speed: state.speed,
      course: state.course
    };

    switch (segments[0]) {
      case "$GPGGA":
        // Time, position and fix related data
        state.time = segments[1];
        state.latitude = degToDec(segments[2], 2, segments[3], this.fixed);
        state.longitude = degToDec(segments[4], 3, segments[5], this.fixed);
        state.altitude = Number(segments[9]);
        break;

      case "$GPGSA":
        // Operating details
        state.sat.satellites = segments.slice(3, 15);
        state.sat.pdop = Number(segments[15]);
        state.sat.hdop = Number(segments[16]);
        state.sat.vdop = Number(segments[17]);
        this.emit("operations", sentence);
        break;

      case "$GPRMC":
        // GPS & Transit data
        state.time = segments[1];
        state.latitude = degToDec(segments[3], 2, segments[4], this.fixed);
        state.longitude = degToDec(segments[5], 3, segments[6], this.fixed);
        state.course = Number(segments[8]);
        state.speed = toFixed$3(segments[7] * 0.514444, this.fixed);
        break;

      case "$GPVTG":
        // Track Made Good and Ground Speed
        state.course = Number(segments[1]);
        state.speed = toFixed$3(segments[5] * 0.514444, this.fixed);
        break;

      case "$GPGSV":
        // Satellites in view
        break;

      case "$PGACK":
        // Acknowledge command
        this.emit("acknowledge", sentence);
        break;

      default:
        this.emit("unknown", sentence);
        break;
    }

    this.emit("data", {
      latitude: state.latitude,
      longitude: state.longitude,
      altitude: state.altitude,
      speed: state.speed,
      course: state.course,
      sat: state.sat,
      time: state.time
    });

    if (last.latitude !== state.latitude ||
      last.longitude !== state.longitude ||
      last.altitude !== state.altitude) {

      this.emit("change", {
        latitude: state.latitude,
        longitude: state.longitude,
        altitude: state.altitude
      });
    }

    if (last.speed !== state.speed ||
      last.course !== state.course) {

      this.emit("navigation", {
        speed: state.speed,
        course: state.course
      });
    }

  }
}

// Convert Lat or Lng to decimal degrees
function degToDec(degrees, intDigitsLength, cardinal, fixed) {
  if (degrees) {
    let decimal = Number(degrees.substring(0, intDigitsLength)) +
                    Number(degrees.substring(intDigitsLength)) / 60;

    if (cardinal === "S" || cardinal === "W") {
      decimal *= -1;
    }
    return Number(decimal.toFixed(fixed));
  } else {
    return 0;
  }
}

function getNmeaChecksum(string) {
  let cksum = 0x00;
  for (let i = 0; i < string.length; ++i) {
    cksum ^= string.charCodeAt(i);
  }
  cksum = cksum.toString(16).toUpperCase();

  if (cksum.length < 2) {
    cksum = (`00${cksum}`).slice(-2);
  }

  return cksum;
}

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  GPS.Breakouts = Breakouts;
  GPS.Chips = Chips;
  GPS.Receivers = Receivers;
  GPS.purge = () => {
    priv$h.clear();
  };
}
var gps = GPS;

// MPR121* Register Defines
var mpr121 = {
  MAPS: {
    MPR121QR2_SHIELD: {
      KEYS: {
        0: 1,
        1: 2,
        2: 3,
        3: 4,
        4: 5,
        5: 6,
        6: 7,
        7: 8,
        8: 9,
      },
      TARGETS: {
        256: 0,
        32: 1,
        4: 2,
        128: 3,
        16: 4,
        2: 5,
        64: 6,
        8: 7,
        1: 8,
      }
    },
    MPR121: {
      KEYS: {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        10: 10,
        11: 11,
      },
      TARGETS: {
        1: 0,
        2: 1,
        4: 2,
        8: 3,
        16: 4,
        32: 5,
        64: 6,
        128: 7,
        256: 8,
        512: 9,
        1024: 10,
        2048: 11,
      }
    },
    MPR121_KEYPAD: {
      KEYS: {
        0: 1,
        1: 2,
        2: 3,
        3: 4,
        4: 5,
        5: 6,
        6: 7,
        7: 8,
        8: 9,
        9: 10,
        10: 11,
        11: 12,
      },
      TARGETS: {
        8: 0,
        128: 1,
        2048: 2,
        4: 3,
        64: 4,
        1024: 5,
        2: 6,
        32: 7,
        512: 8,
        1: 9,
        16: 10,
        256: 11,
      },
    },
    MPR121_SHIELD: {
      KEYS: {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        10: 10,
        11: 11,
      },
      TARGETS: {
        1: 0,
        2: 1,
        4: 2,
        8: 3,
        16: 4,
        32: 5,
        64: 6,
        128: 7,
        256: 8,
        512: 9,
        1024: 10,
        2048: 11,
      },
    },
  },
  MPR121_DEFAULT_ADDRESS: 0x5A,
  MPR121_SOFTRESET: 0x80,

  // MPR121 Registers (from data sheet)
  ELE0_ELE7_TOUCH_STATUS: 0x00,
  ELE8_ELE11_ELEPROX_TOUCH_STATUS: 0x01,

  ELE0_7_OOR_STATUS: 0x02,
  ELE8_11_ELEPROX_OOR_STATUS: 0x03,

  ELE0_FILTERED_DATA_LSB: 0x04,
  ELE0_FILTERED_DATA_MSB: 0x05,
  ELE1_FILTERED_DATA_LSB: 0x06,
  ELE1_FILTERED_DATA_MSB: 0x07,
  ELE2_FILTERED_DATA_LSB: 0x08,
  ELE2_FILTERED_DATA_MSB: 0x09,
  ELE3_FILTERED_DATA_LSB: 0x0A,
  ELE3_FILTERED_DATA_MSB: 0x0B,
  ELE4_FILTERED_DATA_LSB: 0x0C,
  ELE4_FILTERED_DATA_MSB: 0x0D,
  ELE5_FILTERED_DATA_LSB: 0x0E,
  ELE5_FILTERED_DATA_MSB: 0x0F,
  ELE6_FILTERED_DATA_LSB: 0x10,
  ELE6_FILTERED_DATA_MSB: 0x11,
  ELE7_FILTERED_DATA_LSB: 0x12,
  ELE7_FILTERED_DATA_MSB: 0x13,
  ELE8_FILTERED_DATA_LSB: 0x14,
  ELE8_FILTERED_DATA_MSB: 0x15,
  ELE9_FILTERED_DATA_LSB: 0x16,
  ELE9_FILTERED_DATA_MSB: 0x17,
  ELE10_FILTERED_DATA_LSB: 0x18,
  ELE10_FILTERED_DATA_MSB: 0x19,
  ELE11_FILTERED_DATA_LSB: 0x1A,
  ELE11_FILTERED_DATA_MSB: 0x1B,
  ELEPROX_FILTERED_DATA_LSB: 0x1C,
  ELEPROX_FILTERED_DATA_MSB: 0x1D,

  ELE0_BASELINE_VALUE: 0x1E,
  ELE1_BASELINE_VALUE: 0x1F,
  ELE2_BASELINE_VALUE: 0x20,
  ELE3_BASELINE_VALUE: 0x21,
  ELE4_BASELINE_VALUE: 0x22,
  ELE5_BASELINE_VALUE: 0x23,
  ELE6_BASELINE_VALUE: 0x24,
  ELE7_BASELINE_VALUE: 0x25,
  ELE8_BASELINE_VALUE: 0x26,
  ELE9_BASELINE_VALUE: 0x27,
  ELE10_BASELINE_VALUE: 0x28,
  ELE11_BASELINE_VALUE: 0x29,
  ELEPROX_BASELINE_VALUE: 0x2A,

  MHD_RISING: 0x2B,
  NHD_AMOUNT_RISING: 0x2C,
  NCL_RISING: 0x2D,
  FDL_RISING: 0x2E,
  MHD_FALLING: 0x2F,
  NHD_AMOUNT_FALLING: 0x30,
  NCL_FALLING: 0x31,
  FDL_FALLING: 0x32,
  NHD_AMOUNT_TOUCHED: 0x33,
  NCL_TOUCHED: 0x34,
  FDL_TOUCHED: 0x35,
  ELEPROX_MHD_RISING: 0x36,
  ELEPROX_NHD_AMOUNT_RISING: 0x37,
  ELEPROX_NCL_RISING: 0x38,
  ELEPROX_FDL_RISING: 0x39,
  ELEPROX_MHD_FALLING: 0x3A,
  ELEPROX_NHD_AMOUNT_FALLING: 0x3B,
  ELEPROX_FDL_FALLING: 0x3C,
  ELEPROX_NHD_AMOUNT_TOUCHED: 0x3E,
  ELEPROX_NCL_TOUCHED: 0x3F,
  ELEPROX_FDL_TOUCHED: 0x40,

  ELE0_TOUCH_THRESHOLD: 0x41,
  ELE0_RELEASE_THRESHOLD: 0x42,
  ELE1_TOUCH_THRESHOLD: 0x43,
  ELE1_RELEASE_THRESHOLD: 0x44,
  ELE2_TOUCH_THRESHOLD: 0x45,
  ELE2_RELEASE_THRESHOLD: 0x46,
  ELE3_TOUCH_THRESHOLD: 0x47,
  ELE3_RELEASE_THRESHOLD: 0x48,
  ELE4_TOUCH_THRESHOLD: 0x49,
  ELE4_RELEASE_THRESHOLD: 0x4A,
  ELE5_TOUCH_THRESHOLD: 0x4B,
  ELE5_RELEASE_THRESHOLD: 0x4C,
  ELE6_TOUCH_THRESHOLD: 0x4D,
  ELE6_RELEASE_THRESHOLD: 0x4E,
  ELE7_TOUCH_THRESHOLD: 0x4F,
  ELE7_RELEASE_THRESHOLD: 0x50,
  ELE8_TOUCH_THRESHOLD: 0x51,
  ELE8_RELEASE_THRESHOLD: 0x52,
  ELE9_TOUCH_THRESHOLD: 0x53,
  ELE9_RELEASE_THRESHOLD: 0x54,
  ELE10_TOUCH_THRESHOLD: 0x55,
  ELE10_RELEASE_THRESHOLD: 0x56,
  ELE11_TOUCH_THRESHOLD: 0x57,
  ELE11_RELEASE_THRESHOLD: 0x58,
  ELEPROX_TOUCH_THRESHOLD: 0x59,
  ELEPROX_RELEASE_THRESHOLD: 0x5A,
  DEBOUNCE_TOUCH_AND_RELEASE: 0x5B,
  AFE_CONFIGURATION: 0x5C,

  FILTER_CONFIG: 0x5D,
  ELECTRODE_CONFIG: 0x5E,
  ELE0_CURRENT: 0x5F,
  ELE1_CURRENT: 0x60,
  ELE2_CURRENT: 0x61,
  ELE3_CURRENT: 0x62,
  ELE4_CURRENT: 0x63,
  ELE5_CURRENT: 0x64,
  ELE6_CURRENT: 0x65,
  ELE7_CURRENT: 0x66,
  ELE8_CURRENT: 0x67,
  ELE9_CURRENT: 0x68,
  ELE10_CURRENT: 0x69,
  ELE11_CURRENT: 0x6A,
  ELEPROX_CURRENT: 0x6B,

  ELE0_ELE1_CHARGE_TIME: 0x6C,
  ELE2_ELE3_CHARGE_TIME: 0x6D,
  ELE4_ELE5_CHARGE_TIME: 0x6E,
  ELE6_ELE7_CHARGE_TIME: 0x6F,
  ELE8_ELE9_CHARGE_TIME: 0x70,
  ELE10_ELE11_CHARGE_TIME: 0x71,
  ELEPROX_CHARGE_TIME: 0x72,

  GPIO_CONTROL_0: 0x73,
  GPIO_CONTROL_1: 0x74,
  GPIO_DATA: 0x75,
  GPIO_DIRECTION: 0x76,
  GPIO_ENABLE: 0x77,
  GPIO_SET: 0x78,
  GPIO_CLEAR: 0x79,
  GPIO_TOGGLE: 0x7A,
  AUTO_CONFIG_CONTROL_0: 0x7B,
  AUTO_CONFIG_CONTROL_1: 0x7C,
  AUTO_CONFIG_USL: 0x7D,
  AUTO_CONFIG_LSL: 0x7E,
  AUTO_CONFIG_TARGET_LEVEL: 0x7F,

  // Other Constants
  // these are suggested values from app note 3944
  TOUCH_THRESHOLD: 0x0F,
  RELEASE_THRESHOLD: 0x0A,
  NUM_CHANNELS: 12
};

const Board$h = requireBoard();
const Emitter$6 = emitter;
const Fn$7 = fn;
const { scale: scale$2, toFixed: toFixed$2, uint16: uint16$1 } = Fn$7;
const priv$g = new Map();

const aliases = {
  down: ["down", "press", "tap", "impact", "hit", "touch"],
  up: ["up", "release"],
  hold: ["hold"]
};

function flatten(array) {
  return array.flat ?
    array.flat() :
    array.reduce((accum, val) => accum.concat(val), []);
}

function flatKeys(options) {
  let keys = [];

  if (options.keys && Array.isArray(options.keys)) {
    keys = options.keys.slice();

    if (keys.every(Array.isArray)) {
      keys = flatten(keys);
    }
  }

  return keys;
}

const Controllers$d = {
  MPR121: {
    ADDRESSES: {
      value: [0x5A, 0x5B, 0x5C, 0x5D]
    },
    REGISTER: {
      value: mpr121
    },
    initialize: {
      value(options, callback) {
        const { Drivers } = requireSip();
        const address = Drivers.addressResolver(this, options);
        const state = priv$g.get(this);
        const keyMap = this.REGISTER.MAPS[options.controller].KEYS;
        const targets = this.REGISTER.MAPS[options.controller].TARGETS;
        const mapping = Object.keys(keyMap).reduce((accum, index) => {
          accum[index] = keyMap[index];
          return accum;
        }, []);
        let keys = flatKeys(options);

        const length = mapping.length;

        this.io.i2cConfig(options);

        this.io.i2cWrite(address, this.REGISTER.MPR121_SOFTRESET, 0x63);

        this.io.i2cWrite(address, this.REGISTER.MHD_RISING, 0x01);
        this.io.i2cWrite(address, this.REGISTER.NHD_AMOUNT_RISING, 0x01);
        this.io.i2cWrite(address, this.REGISTER.NCL_RISING, 0x00);
        this.io.i2cWrite(address, this.REGISTER.FDL_RISING, 0x00);

        this.io.i2cWrite(address, this.REGISTER.MHD_FALLING, 0x01);
        this.io.i2cWrite(address, this.REGISTER.NHD_AMOUNT_FALLING, 0x01);
        this.io.i2cWrite(address, this.REGISTER.NCL_FALLING, 0xFF);
        this.io.i2cWrite(address, this.REGISTER.FDL_FALLING, 0x02);

        // Page 12
        // 6. Touch and Release Threshold (0x41~0x5A)
        // The threshold is defined as a deviation value from the baseline value,
        // so it remains constant even baseline value changes. Typically the touch
        // threshold is a little bigger than the release threshold to touch debounce
        // and hysteresis. The range of the value is 0~255. For typical touch
        // application, the value can be in range 0x05~0x30 for example. The setting
        // of the threshold is depended on the actual application. For the operation
        // details and how to set the threshold refer to application note AN3892 and
        // MPR121 design guidelines.

        this.sensitivity = {
          // Inverted map approximately to 8 bit values:
          //
          // press: 12
          // release: 6
          //
          press: Array(12).fill(0.95),
          release: Array(12).fill(0.975),
          // These defaults as based on the defaults shown
          // in examples published by Adafruit
          // https://github.com/adafruit/Adafruit_MPR121/blob/master/Adafruit_MPR121.cpp#L43
        };

        // If keys were specified for a MPR121_SHIELD (adafruit shield),
        // then reverse the keys to align with the output of the.
        if (options.keys && options.controller === "MPR121_SHIELD") {
          keys = keys.reverse();
        }

        if (options.sensitivity) {
          if (Array.isArray(options.sensitivity)) {
            // Initialized as:
            //
            // new five.Keypad({
            //   controller: "MPR121",
            //   sensitivity: [
            //     { press: 0-1, release: 0-1, },
            //     { press: 0-1, release: 0-1, },
            //     { press: 0-1, release: 0-1, },
            //     ...
            //   ],
            // });
            //
            options.sensitivity.forEach(function({press, release}, index) {
              if (typeof press !== "undefined") {
                this.sensitivity.press[index] = press;
              }

              if (typeof release !== "undefined") {
                this.sensitivity.release[index] = release;
              }
            }, this);
          } else {
            // Initialized as:
            //
            // new five.Keypad({
            //   controller: "MPR121",
            //   sensitivity: {
            //     press: 0-1,
            //     release: 0-1,
            //   },
            // });
            //
            if (typeof options.sensitivity.press !== "undefined") {
              this.sensitivity.press.fill(options.sensitivity.press);
            }

            if (typeof options.sensitivity.release !== "undefined") {
              this.sensitivity.release.fill(options.sensitivity.release);
            }
          }
        }

        // The chip expects a LOWER value for a HIGHER sensitivity.
        // Most people don't think this way, so Johnny-Five aligns with
        // user/developer intuition, which we assume for this case is:
        //
        //  "Higher sensitivity value means greater touch sensitivity"
        //
        // This means that the value we received needs to be inverted
        // before it's written to the chip threshold configuration.
        //
        for (let i = 0; i < 12; i++) {
          this.io.i2cWrite(
            address,
            this.REGISTER.ELE0_TOUCH_THRESHOLD + (i << 1),
            scale$2(toFixed$2(1 - this.sensitivity.press[i], 3), 0, 1, 0, 255)
          );
          this.io.i2cWrite(
            address,
            this.REGISTER.ELE0_RELEASE_THRESHOLD + (i << 1),
            scale$2(toFixed$2(1 - this.sensitivity.release[i], 3), 0, 1, 0, 255)
          );
        }

        this.io.i2cWrite(address, this.REGISTER.FILTER_CONFIG, 0x13);
        this.io.i2cWrite(address, this.REGISTER.AFE_CONFIGURATION, 0x80);

        this.io.i2cWrite(address, this.REGISTER.AUTO_CONFIG_CONTROL_0, 0x8F);
        this.io.i2cWrite(address, this.REGISTER.AUTO_CONFIG_USL, 0xE4);
        this.io.i2cWrite(address, this.REGISTER.AUTO_CONFIG_LSL, 0x94);
        this.io.i2cWrite(address, this.REGISTER.AUTO_CONFIG_TARGET_LEVEL, 0xCD);

        this.io.i2cWrite(address, this.REGISTER.ELECTRODE_CONFIG, 0xCC);

        if (!keys.length) {
          keys = Array.from(Object.assign({}, keyMap, {
            length
          }));
        }

        state.length = length;
        state.touches = touches(length);
        state.keys = keys;
        state.mapping = mapping;
        state.targets = targets;
        state.isMultitouch = true;

        this.io.i2cRead(address, 0x00, 2, bytes => callback(uint16$1(bytes[1], bytes[0])));
      }
    },
    toAlias: {
      value(index) {
        const state = priv$g.get(this);
        return state.keys[index];
      }
    },
    toIndices: {
      value(raw) {
        const state = priv$g.get(this);
        const indices = [];
        for (let i = 0; i < 12; i++) {
          if (raw & (1 << i)) {
            indices.push(state.targets[raw & (1 << i)]);
          }
        }
        return indices;
      }
    },
  },

  // https://learn.sparkfun.com/tutorials/vkey-voltage-keypad-hookup-guide
  VKEY: {
    initialize: {
      value(options, callback) {
        const state = priv$g.get(this);
        const aref = options.aref || this.io.aref || 5;
        const use5V = Fn$7.inRange(aref, 4.5, 5.5);
        const mapping = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
        let keys = flatKeys(options);
        let length = 0;

        if (!keys.length) {
          keys = mapping;
        }

        state.scale = [
          use5V ? 17 : 26,
          use5V ? 40 : 58,
          use5V ? 496 : 721,
        ];

        length = mapping.length;
        state.length = length;
        state.touches = touches(length);
        state.mapping = mapping;
        state.keys = keys;
        state.isMultitouch = false;

        this.io.pinMode(this.pin, this.io.MODES.ANALOG);
        this.io.analogRead(this.pin, adc => callback(adc));
      },
    },
    toAlias: {
      value(index) {
        const state = priv$g.get(this);
        return state.keys[index];
      }
    },
    toIndices: {
      value(raw) {
        const state = priv$g.get(this);
        const length = state.length;
        const low = state.scale[0];
        const step = state.scale[1];
        const high = state.scale[2];

        if (raw < low || raw > high) {
          return [];
        }

        return [(length - ((raw - low) / step)) | 0];
      }
    }
  },

  // WaveShare AD
  //  - http://www.amazon.com/WaveShare-Accessory-buttons-controlled-keyboard/dp/B00KM6UXVS
  //  - http://www.wvshare.com/product/A_D-Keypad.htm
  //
  //  TODO: Create docs to show how to create a DIY keypad
  //        that works with this class.
  //
  ANALOG: {
    initialize: {
      value(options, callback) {

        let keys = flatKeys(options);
        let mapping = [];
        let length = 0;

        if (options.length && !keys.length) {
          keys = Array.from({
            length: options.length
          }, (_, key) => key);
        }

        if (!keys.length) {
          throw new Error(
            "Missing `keys`. Analog Keypad requires either a numeric `length` or a `keys` array."
          );
        }

        mapping = keys;
        length = mapping.length;

        const state = priv$g.get(this);
        // keys + Idle state == length + 1
        const total = length + 1;
        const vrange = Math.round(1023 / total);
        const ranges = Array.from({
          length: total
        }, (_, index) => {
          const start = vrange * index;
          return Array.from({
            length: vrange - 1
          }, (_, index) => start + index);
        });

        state.length = length;
        state.ranges = ranges;
        state.touches = touches(length);
        state.mapping = mapping;
        state.keys = keys;
        state.isMultitouch = true;

        this.io.pinMode(this.pin, this.io.MODES.ANALOG);
        this.io.analogRead(this.pin, adc => callback(adc));
      }
    },
    toAlias: {
      value(index) {
        const state = priv$g.get(this);
        return state.keys[index];
      }
    },
    toIndices: {
      value(raw) {
        const state = priv$g.get(this);
        const ranges = state.ranges;
        let index = ranges.findIndex(range => range.includes(raw));

        if (index === state.length) {
          index--;
        }

        if (index < 0) {
          return [];
        }

        return [index];
      }
    }
  },
  AT42QT1070: {
    ADDRESSES: {
      value: [0x1B]
    },
    REGISTER: {
      value: {
        READ: 0x03
      }
    },
    initialize: {
      value(options, callback) {
        const { Drivers } = requireSip();
        const address = Drivers.addressResolver(this, options);
        const state = priv$g.get(this);
        const mapping = [0, 1, 2, 3, 4, 5, 6];
        let keys = flatKeys(options);
        let length = 0;

        if (!keys.length) {
          keys = mapping;
        }

        length = mapping.length;

        state.length = length;
        state.touches = touches(length);
        state.mapping = mapping;
        state.keys = keys;
        state.isMultitouch = true;

        this.io.i2cConfig(options);
        this.io.i2cRead(address, this.REGISTER.READ, 1, data => callback(data[0]));
      }
    },
    toAlias: {
      value(index) {
        const state = priv$g.get(this);
        return state.keys[index];
      }
    },
    toIndices: {
      value(raw) {
        const indices = [];
        for (let i = 0; i < 7; i++) {
          if (raw & (1 << i)) {
            indices.push(i);
          }
        }
        return indices;
      }
    }
  },

  "3X4_I2C_NANO_BACKPACK": {
    ADDRESSES: {
      value: [0x0A, 0x0B, 0x0C, 0x0D]
    },
    initialize: {
      value(options, callback) {
        const { Drivers } = requireSip();
        const address = Drivers.addressResolver(this, options);
        const state = priv$g.get(this);
        const mapping = [1, 2, 3, 4, 5, 6, 7, 8, 9, "*", 0, "#"];
        let keys = flatKeys(options);
        let length = 0;

        if (!keys.length) {
          keys = mapping;
        }

        length = mapping.length;

        state.length = length;
        state.touches = touches(length);
        state.mapping = mapping;
        state.keys = keys;
        state.isMultitouch = true;


        this.io.i2cConfig(options);
        this.io.i2cRead(address, 2, bytes => callback(uint16$1(bytes[0], bytes[1])));
      }
    },
    toAlias: {
      value(index) {
        const state = priv$g.get(this);
        return state.keys[index];
      }
    },
    toIndices: {
      value(raw) {
        const state = priv$g.get(this);
        const indices = [];
        for (let i = 0; i < state.length; i++) {
          if (raw & (1 << i)) {
            indices.push(i);
          }
        }
        return indices;
      }
    }
  },
  "4X4_I2C_NANO_BACKPACK": {
    ADDRESSES: {
      value: [0x0A, 0x0B, 0x0C, 0x0D]
    },
    initialize: {
      value(options, callback) {
        const { Drivers } = requireSip();
        const address = Drivers.addressResolver(this, options);
        const state = priv$g.get(this);
        let keys = flatKeys(options);
        const mapping = [1, 2, 3, "A", 4, 5, 6, "B", 7, 8, 9, "C", "*", 0, "#", "D"];
        let length = 0;

        if (!keys.length) {
          keys = mapping;
        }

        length = mapping.length;

        state.length = length;
        state.touches = touches(length);
        state.mapping = mapping;
        state.keys = keys;
        state.isMultitouch = true;


        this.io.i2cConfig(options);
        this.io.i2cRead(address, 2, bytes => callback(uint16$1(bytes[0], bytes[1])));
      }
    },
    toAlias: {
      value(index) {
        return priv$g.get(this).keys[index];
      }
    },
    toIndices: {
      value(raw) {
        const state = priv$g.get(this);
        const indices = [];
        for (let i = 0; i < state.length; i++) {
          if (raw & (1 << i)) {
            indices.push(i);
          }
        }
        return indices;
      }
    }
  },
  SX1509: {
    ADDRESSES: {
      value: [0x0A, 0x0B, 0x0C, 0x0D]
    },
    REGISTER: {
      value: {
        PULLUP: 0x03,
        OPEN_DRAIN: 0x05,
        DIR: 0x07,
        DIR_B: 0x0E,
        DIR_A: 0x0F,
        // OPEN_DRAIN_B: 0x0E,
        // OPEN_DRAIN_A: 0x0F,
      },
    },
    initialize: {
      value(options, callback) {
        const { Drivers } = requireSip();
        const address = Drivers.addressResolver(this, options);
        const state = priv$g.get(this);
        let keys = flatKeys(options);
        const mapping = [1, 2, 3, 4, 5, 6, 7, 8, 9, "*", 0, "#"];
        let length = 0;

        if (!keys.length) {
          keys = mapping;
        }

        length = mapping.length;

        state.length = length;
        state.touches = touches(length);
        state.mapping = mapping;
        state.keys = keys;
        state.isMultitouch = true;


        this.io.i2cConfig(options);

        this.io.i2cWriteReg(address, this.REGISTER.DIR, 0xF0);
        this.io.i2cWriteReg(address, this.REGISTER.OPEN_DRAIN, 0x0F);
        this.io.i2cWriteReg(address, this.REGISTER.PULLUP, 0xF0);

        this.io.i2cRead(address, 2, bytes => callback(uint16$1(bytes[0], bytes[1])));
      }
    },
    toAlias: {
      value(index) {
        const state = priv$g.get(this);
        return state.keys[index];
      }
    },
    toIndices: {
      value(raw) {
        const state = priv$g.get(this);
        const indices = [];
        for (let i = 0; i < state.length; i++) {
          if (raw & (1 << i)) {
            indices.push(i);
          }
        }
        return indices;
      }
    }
  },
};

// Otherwise known as...
Controllers$d.MPR121QR2 = Controllers$d.MPR121;
Controllers$d.MPR121QR2_SHIELD = Controllers$d.MPR121;
Controllers$d.MPR121_KEYPAD = Controllers$d.MPR121;
Controllers$d.MPR121_SHIELD = Controllers$d.MPR121;
Controllers$d.QTOUCH = Controllers$d.AT42QT1070;
Controllers$d.DEFAULT = Controllers$d.ANALOG;


function touches(length) {
  return Array.from({ length }, () => ({
    timeout: null,
    value: 0
  }));
}

class Keypad extends Emitter$6 {
  constructor(options) {
    super();

    // Initialize a Device instance on a Board
    Board$h.Component.call(
      this, options = Board$h.Options(options)
    );

    let raw = null;
    const state = {
      touches: null,
      timeout: null,
      length: null,
      keys: null,
      mapping: null,
      holdtime: null,
    };

    const trigger = Fn$7.debounce(function(type, value) {
      const event = {
        type,
        which: value,
        timestamp: Date.now()
      };
      aliases[type].forEach(function(type) {
        this.emit(type, event);
      }, this);

      this.emit("change", Object.assign({}, event));
    }, 5);


    Board$h.Controller.call(this, Controllers$d, options);

    state.holdtime = options.holdtime ? options.holdtime : 500;

    priv$g.set(this, state);

    if (typeof this.initialize === "function") {
      this.initialize(options, data => {

        raw = data;

        const now = Date.now();
        const indices = this.toIndices(data);
        const kLength = state.length;

        const lists = {
          down: [],
          hold: [],
          up: [],
        };
        let alias = null;

        for (let k = 0; k < kLength; k++) {
          alias = this.toAlias(k);

          if (indices.includes(k)) {
            if (state.touches[k].value === 0) {

              state.touches[k].timeout = now + state.holdtime;
              lists.down.push(alias);

            } else if (state.touches[k].value === 1) {
              if (state.touches[k].timeout !== null && now > state.touches[k].timeout) {
                state.touches[k].timeout = now + state.holdtime;
                lists.hold.push(alias);
              }
            }

            state.touches[k].value = 1;
          } else {
            if (state.touches[k].value === 1) {
              state.touches[k].timeout = null;
              lists.up.push(alias);
            }
            state.touches[k].value = 0;
          }
          alias = null;
        }

        Object.keys(lists).forEach(function(key) {
          const list = lists[key];

          if (list.length) {
            trigger.call(this, key, list);
          }
        }, this);
      });
    }

    Object.defineProperties(this, {
      isMultitouch: {
        get() {
          return state.isMultitouch;
        }
      },
      value: {
        get() {
          return raw;
        }
      },
    });
  }
}

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  Keypad.Controllers = Controllers$d;
  Keypad.purge = () => {
    priv$g.clear();
  };
}

var keypad = Keypad;

var lcdChars = {
  DEFAULT: {
    0:                [ 0x0e, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x0e, 0x00 ],
    1:                [ 0x02, 0x06, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x00 ],
    2:                [ 0x0e, 0x1b, 0x03, 0x06, 0x0c, 0x18, 0x1f, 0x00 ],
    3:                [ 0x0e, 0x1b, 0x03, 0x0e, 0x03, 0x1b, 0x0e, 0x00 ],
    4:                [ 0x03, 0x07, 0x0f, 0x1b, 0x1f, 0x03, 0x03, 0x00 ],
    5:                [ 0x1f, 0x18, 0x1e, 0x03, 0x03, 0x1b, 0x0e, 0x00 ],
    6:                [ 0x0e, 0x1b, 0x18, 0x1e, 0x1b, 0x1b, 0x0e, 0x00 ],
    7:                [ 0x1f, 0x03, 0x06, 0x0c, 0x0c, 0x0c, 0x0c, 0x00 ],
    8:                [ 0x0e, 0x1b, 0x1b, 0x0e, 0x1b, 0x1b, 0x0e, 0x00 ],
    9:                [ 0x0e, 0x1b, 0x1b, 0x0f, 0x03, 0x1b, 0x0e, 0x00 ],
    10:               [ 0x17, 0x15, 0x15, 0x15, 0x17, 0x00, 0x1f, 0x00 ],
    11:               [ 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x00, 0x1f, 0x00 ],
    12:               [ 0x17, 0x11, 0x17, 0x14, 0x17, 0x00, 0x1f, 0x00 ],
    13:               [ 0x17, 0x11, 0x13, 0x11, 0x17, 0x00, 0x1f, 0x00 ],
    14:               [ 0x15, 0x15, 0x17, 0x11, 0x11, 0x00, 0x1f, 0x00 ],
    15:               [ 0x17, 0x14, 0x17, 0x11, 0x17, 0x00, 0x1f, 0x00 ],
    16:               [ 0x17, 0x14, 0x17, 0x15, 0x17, 0x00, 0x1f, 0x00 ],
    17:               [ 0x17, 0x11, 0x12, 0x12, 0x12, 0x00, 0x1f, 0x00 ],
    18:               [ 0x17, 0x15, 0x17, 0x15, 0x17, 0x00, 0x1f, 0x00 ],
    19:               [ 0x17, 0x15, 0x17, 0x11, 0x17, 0x00, 0x1f, 0x00 ],
    circle:           [ 0x00, 0x0e, 0x11, 0x11, 0x11, 0x0e, 0x00, 0x00 ],
    cdot:             [ 0x00, 0x0e, 0x11, 0x15, 0x11, 0x0e, 0x00, 0x00 ],
    donut:            [ 0x00, 0x0e, 0x1f, 0x1b, 0x1f, 0x0e, 0x00, 0x00 ],
    ball:             [ 0x00, 0x0e, 0x1f, 0x1f, 0x1f, 0x0e, 0x00, 0x00 ],
    square:           [ 0x00, 0x1f, 0x11, 0x11, 0x11, 0x1f, 0x00, 0x00 ],
    sdot:             [ 0x00, 0x1f, 0x11, 0x15, 0x11, 0x1f, 0x00, 0x00 ],
    fbox:             [ 0x00, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x00, 0x00 ],
    sbox:             [ 0x00, 0x00, 0x0e, 0x0a, 0x0e, 0x00, 0x00, 0x00 ],
    sfbox:            [ 0x00, 0x00, 0x0e, 0x0e, 0x0e, 0x00, 0x00, 0x00 ],
    bigpointerright:  [ 0x08, 0x0c, 0x0a, 0x09, 0x0a, 0x0c, 0x08, 0x00 ],
    bigpointerleft:   [ 0x02, 0x06, 0x0a, 0x12, 0x0a, 0x06, 0x02, 0x00 ],
    arrowright:       [ 0x08, 0x0c, 0x0a, 0x09, 0x0a, 0x0c, 0x08, 0x00 ],
    arrowleft:        [ 0x02, 0x06, 0x0a, 0x12, 0x0a, 0x06, 0x02, 0x00 ],
    ascprogress1:     [ 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 ],
    ascprogress2:     [ 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18 ],
    ascprogress3:     [ 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c ],
    ascprogress4:     [ 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e ],
    fullprogress:     [ 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f ],
    descprogress1:    [ 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 ],
    descprogress2:    [ 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03 ],
    descprogress3:    [ 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07 ],
    descprogress4:    [ 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f ],
    ascchart1:        [ 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
    ascchart2:        [ 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
    ascchart3:        [ 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00 ],
    ascchart4:        [ 0x1f, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00 ],
    ascchart5:        [ 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00 ],
    ascchart6:        [ 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x00, 0x00 ],
    ascchart7:        [ 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x00 ],
    descchart1:       [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f ],
    descchart2:       [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f ],
    descchart3:       [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1f ],
    descchart4:       [ 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x1f ],
    descchart5:       [ 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f ],
    descchart6:       [ 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f ],
    descchart7:       [ 0x00, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f ],
    borderleft1:      [ 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 ],
    borderleft2:      [ 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03 ],
    borderleft3:      [ 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x07 ],
    borderleft4:      [ 0x0f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0f ],
    borderleft5:      [ 0x1f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f ],
    bordertopbottom5: [ 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f ],
    borderright1:     [ 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 ],
    borderright2:     [ 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x18 ],
    borderright3:     [ 0x1c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1c ],
    borderright4:     [ 0x1e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x1e ],
    borderright5:     [ 0x1f, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1f ],
    box1:             [ 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 ],
    box2:             [ 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 ],
    box3:             [ 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00 ],
    box4:             [ 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x00 ],
    box5:             [ 0x03, 0x03, 0x03, 0x00, 0x03, 0x03, 0x03, 0x00 ],
    box6:             [ 0x18, 0x18, 0x18, 0x00, 0x03, 0x03, 0x03, 0x00 ],
    box7:             [ 0x1b, 0x1b, 0x1b, 0x00, 0x03, 0x03, 0x03, 0x00 ],
    box8:             [ 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00 ],
    box9:             [ 0x03, 0x03, 0x03, 0x00, 0x18, 0x18, 0x18, 0x00 ],
    box10:            [ 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00 ],
    box11:            [ 0x1b, 0x1b, 0x1b, 0x00, 0x18, 0x18, 0x18, 0x00 ],
    box12:            [ 0x00, 0x00, 0x00, 0x00, 0x1b, 0x1b, 0x1b, 0x00 ],
    box13:            [ 0x03, 0x03, 0x03, 0x00, 0x1b, 0x1b, 0x1b, 0x00 ],
    box14:            [ 0x18, 0x18, 0x18, 0x00, 0x1b, 0x1b, 0x1b, 0x00 ],
    box15:            [ 0x1b, 0x1b, 0x1b, 0x00, 0x1b, 0x1b, 0x1b, 0x00 ],
    euro:             [ 0x03, 0x04, 0x1e, 0x08, 0x1e, 0x08, 0x07, 0x00 ],
    cent:             [ 0x00, 0x00, 0x0e, 0x11, 0x10, 0x15, 0x0e, 0x08 ],
    speaker:          [ 0x01, 0x03, 0x0f, 0x0f, 0x0f, 0x03, 0x01, 0x00 ],
    sound:            [ 0x08, 0x10, 0x00, 0x18, 0x00, 0x10, 0x08, 0x00 ],
    x:                [ 0x00, 0x1b, 0x0e, 0x04, 0x0e, 0x1b, 0x00, 0x00 ],
    target:           [ 0x00, 0x0a, 0x11, 0x15, 0x11, 0x0a, 0x00, 0x00 ],
    pointerright:     [ 0x00, 0x08, 0x0c, 0x0e, 0x0c, 0x08, 0x00, 0x00 ],
    pointerup:        [ 0x00, 0x00, 0x04, 0x0e, 0x1f, 0x00, 0x00, 0x00 ],
    pointerleft:      [ 0x00, 0x02, 0x06, 0x0e, 0x06, 0x02, 0x00, 0x00 ],
    pointerdown:      [ 0x00, 0x00, 0x1f, 0x0e, 0x04, 0x00, 0x00, 0x00 ],
    arrowne:          [ 0x00, 0x0f, 0x03, 0x05, 0x09, 0x10, 0x00, 0x00 ],
    arrownw:          [ 0x00, 0x1e, 0x18, 0x14, 0x12, 0x01, 0x00, 0x00 ],
    arrowsw:          [ 0x00, 0x01, 0x12, 0x14, 0x18, 0x1e, 0x00, 0x00 ],
    arrowse:          [ 0x00, 0x10, 0x09, 0x05, 0x03, 0x0f, 0x00, 0x00 ],
    dice1:            [ 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00 ],
    dice2:            [ 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 ],
    dice3:            [ 0x00, 0x10, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00 ],
    dice4:            [ 0x00, 0x11, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00 ],
    dice5:            [ 0x00, 0x11, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00 ],
    dice6:            [ 0x00, 0x11, 0x00, 0x11, 0x00, 0x11, 0x00, 0x00 ],
    bell:             [ 0x04, 0x0e, 0x0e, 0x0e, 0x1f, 0x00, 0x04, 0x00 ],
    smile:            [ 0x00, 0x0a, 0x00, 0x11, 0x0e, 0x00, 0x00, 0x00 ],
    note:             [ 0x02, 0x03, 0x02, 0x0e, 0x1e, 0x0c, 0x00, 0x00 ],
    clock:            [ 0x00, 0x0e, 0x15, 0x17, 0x11, 0x0e, 0x00, 0x00 ],
    heart:            [ 0x00, 0x0a, 0x1f, 0x1f, 0x1f, 0x0e, 0x04, 0x00 ],
    duck:             [ 0x00, 0x0c, 0x1d, 0x0f, 0x0f, 0x06, 0x00, 0x00 ],
    check:            [ 0x00, 0x01, 0x03, 0x16, 0x1c, 0x08, 0x00, 0x00 ],
    retarrow:         [ 0x01, 0x01, 0x05, 0x09, 0x1f, 0x08, 0x04, 0x00 ],
    runninga:         [ 0x06, 0x06, 0x05, 0x0e, 0x14, 0x04, 0x0a, 0x11 ],
    runningb:         [ 0x06, 0x06, 0x04, 0x0e, 0x0e, 0x04, 0x0a, 0x0a ],
  }
};

var conversions$2 = {exports: {}};

var cssKeywords$1 = {
	aliceblue: [240, 248, 255],
	antiquewhite: [250, 235, 215],
	aqua: [0, 255, 255],
	aquamarine: [127, 255, 212],
	azure: [240, 255, 255],
	beige: [245, 245, 220],
	bisque: [255, 228, 196],
	black: [0, 0, 0],
	blanchedalmond: [255, 235, 205],
	blue: [0, 0, 255],
	blueviolet: [138, 43, 226],
	brown: [165, 42, 42],
	burlywood: [222, 184, 135],
	cadetblue: [95, 158, 160],
	chartreuse: [127, 255, 0],
	chocolate: [210, 105, 30],
	coral: [255, 127, 80],
	cornflowerblue: [100, 149, 237],
	cornsilk: [255, 248, 220],
	crimson: [220, 20, 60],
	cyan: [0, 255, 255],
	darkblue: [0, 0, 139],
	darkcyan: [0, 139, 139],
	darkgoldenrod: [184, 134, 11],
	darkgray: [169, 169, 169],
	darkgreen: [0, 100, 0],
	darkgrey: [169, 169, 169],
	darkkhaki: [189, 183, 107],
	darkmagenta: [139, 0, 139],
	darkolivegreen: [85, 107, 47],
	darkorange: [255, 140, 0],
	darkorchid: [153, 50, 204],
	darkred: [139, 0, 0],
	darksalmon: [233, 150, 122],
	darkseagreen: [143, 188, 143],
	darkslateblue: [72, 61, 139],
	darkslategray: [47, 79, 79],
	darkslategrey: [47, 79, 79],
	darkturquoise: [0, 206, 209],
	darkviolet: [148, 0, 211],
	deeppink: [255, 20, 147],
	deepskyblue: [0, 191, 255],
	dimgray: [105, 105, 105],
	dimgrey: [105, 105, 105],
	dodgerblue: [30, 144, 255],
	firebrick: [178, 34, 34],
	floralwhite: [255, 250, 240],
	forestgreen: [34, 139, 34],
	fuchsia: [255, 0, 255],
	gainsboro: [220, 220, 220],
	ghostwhite: [248, 248, 255],
	gold: [255, 215, 0],
	goldenrod: [218, 165, 32],
	gray: [128, 128, 128],
	green: [0, 128, 0],
	greenyellow: [173, 255, 47],
	grey: [128, 128, 128],
	honeydew: [240, 255, 240],
	hotpink: [255, 105, 180],
	indianred: [205, 92, 92],
	indigo: [75, 0, 130],
	ivory: [255, 255, 240],
	khaki: [240, 230, 140],
	lavender: [230, 230, 250],
	lavenderblush: [255, 240, 245],
	lawngreen: [124, 252, 0],
	lemonchiffon: [255, 250, 205],
	lightblue: [173, 216, 230],
	lightcoral: [240, 128, 128],
	lightcyan: [224, 255, 255],
	lightgoldenrodyellow: [250, 250, 210],
	lightgray: [211, 211, 211],
	lightgreen: [144, 238, 144],
	lightgrey: [211, 211, 211],
	lightpink: [255, 182, 193],
	lightsalmon: [255, 160, 122],
	lightseagreen: [32, 178, 170],
	lightskyblue: [135, 206, 250],
	lightslategray: [119, 136, 153],
	lightslategrey: [119, 136, 153],
	lightsteelblue: [176, 196, 222],
	lightyellow: [255, 255, 224],
	lime: [0, 255, 0],
	limegreen: [50, 205, 50],
	linen: [250, 240, 230],
	magenta: [255, 0, 255],
	maroon: [128, 0, 0],
	mediumaquamarine: [102, 205, 170],
	mediumblue: [0, 0, 205],
	mediumorchid: [186, 85, 211],
	mediumpurple: [147, 112, 219],
	mediumseagreen: [60, 179, 113],
	mediumslateblue: [123, 104, 238],
	mediumspringgreen: [0, 250, 154],
	mediumturquoise: [72, 209, 204],
	mediumvioletred: [199, 21, 133],
	midnightblue: [25, 25, 112],
	mintcream: [245, 255, 250],
	mistyrose: [255, 228, 225],
	moccasin: [255, 228, 181],
	navajowhite: [255, 222, 173],
	navy: [0, 0, 128],
	oldlace: [253, 245, 230],
	olive: [128, 128, 0],
	olivedrab: [107, 142, 35],
	orange: [255, 165, 0],
	orangered: [255, 69, 0],
	orchid: [218, 112, 214],
	palegoldenrod: [238, 232, 170],
	palegreen: [152, 251, 152],
	paleturquoise: [175, 238, 238],
	palevioletred: [219, 112, 147],
	papayawhip: [255, 239, 213],
	peachpuff: [255, 218, 185],
	peru: [205, 133, 63],
	pink: [255, 192, 203],
	plum: [221, 160, 221],
	powderblue: [176, 224, 230],
	purple: [128, 0, 128],
	rebeccapurple: [102, 51, 153],
	red: [255, 0, 0],
	rosybrown: [188, 143, 143],
	royalblue: [65, 105, 225],
	saddlebrown: [139, 69, 19],
	salmon: [250, 128, 114],
	sandybrown: [244, 164, 96],
	seagreen: [46, 139, 87],
	seashell: [255, 245, 238],
	sienna: [160, 82, 45],
	silver: [192, 192, 192],
	skyblue: [135, 206, 235],
	slateblue: [106, 90, 205],
	slategray: [112, 128, 144],
	slategrey: [112, 128, 144],
	snow: [255, 250, 250],
	springgreen: [0, 255, 127],
	steelblue: [70, 130, 180],
	tan: [210, 180, 140],
	teal: [0, 128, 128],
	thistle: [216, 191, 216],
	tomato: [255, 99, 71],
	turquoise: [64, 224, 208],
	violet: [238, 130, 238],
	wheat: [245, 222, 179],
	white: [255, 255, 255],
	whitesmoke: [245, 245, 245],
	yellow: [255, 255, 0],
	yellowgreen: [154, 205, 50]
};

/* MIT license */

var cssKeywords = cssKeywords$1;

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

var reverseKeywords = {};
for (var key in cssKeywords) {
	if (cssKeywords.hasOwnProperty(key)) {
		reverseKeywords[cssKeywords[key].join()] = key;
	}
}

var convert$1 = conversions$2.exports = {
	rgb: {channels: 3},
	hsl: {channels: 3},
	hsv: {channels: 3},
	hwb: {channels: 3},
	cmyk: {channels: 4},
	xyz: {channels: 3},
	lab: {channels: 3},
	lch: {channels: 3},
	hex: {channels: 1},
	keyword: {channels: 1},
	ansi16: {channels: 1},
	ansi256: {channels: 1},
	hcg: {channels: 3}
};

// hide .channels property
for (var model in convert$1) {
	if (convert$1.hasOwnProperty(model)) {
		if (!('channels' in convert$1[model])) {
			throw new Error('missing channels property: ' + model);
		}

		var channels = convert$1[model].channels;
		delete convert$1[model].channels;
		Object.defineProperty(convert$1[model], 'channels', {value: channels});
	}
}

convert$1.rgb.hsl = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var l;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert$1.rgb.hsv = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var v;

	if (max === 0) {
		s = 0;
	} else {
		s = (delta / max * 1000) / 10;
	}

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	v = ((max / 255) * 1000) / 10;

	return [h, s, v];
};

convert$1.rgb.hwb = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var h = convert$1.rgb.hsl(rgb)[0];
	var w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert$1.rgb.cmyk = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var c;
	var m;
	var y;
	var k;

	k = Math.min(1 - r, 1 - g, 1 - b);
	c = (1 - r - k) / (1 - k) || 0;
	m = (1 - g - k) / (1 - k) || 0;
	y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

convert$1.rgb.keyword = function (rgb) {
	return reverseKeywords[rgb.join()];
};

convert$1.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert$1.rgb.xyz = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;

	// assume sRGB
	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert$1.rgb.lab = function (rgb) {
	var xyz = convert$1.rgb.xyz(rgb);
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert$1.hsl.rgb = function (hsl) {
	var h = hsl[0] / 360;
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var t1;
	var t2;
	var t3;
	var rgb;
	var val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	t1 = 2 * l - t2;

	rgb = [0, 0, 0];
	for (var i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}
		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert$1.hsl.hsv = function (hsl) {
	var h = hsl[0];
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var sv;
	var v;

	if (l === 0) {
		// no need to do calc on black
		// also avoids divide by 0 error
		return [0, 0, 0];
	}

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	v = (l + s) / 2;
	sv = (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert$1.hsv.rgb = function (hsv) {
	var h = hsv[0] / 60;
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var hi = Math.floor(h) % 6;

	var f = h - Math.floor(h);
	var p = 255 * v * (1 - s);
	var q = 255 * v * (1 - (s * f));
	var t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert$1.hsv.hsl = function (hsv) {
	var h = hsv[0];
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var sl;
	var l;

	l = (2 - s) * v;
	sl = s * v;
	sl /= (l <= 1) ? l : 2 - l;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert$1.hwb.rgb = function (hwb) {
	var h = hwb[0] / 360;
	var wh = hwb[1] / 100;
	var bl = hwb[2] / 100;
	var ratio = wh + bl;
	var i;
	var v;
	var f;
	var n;

	// wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	i = Math.floor(6 * h);
	v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	n = wh + f * (v - wh); // linear interpolation

	var r;
	var g;
	var b;
	switch (i) {
		default:
		case 6:
		case 0: r = v; g = n; b = wh; break;
		case 1: r = n; g = v; b = wh; break;
		case 2: r = wh; g = v; b = n; break;
		case 3: r = wh; g = n; b = v; break;
		case 4: r = n; g = wh; b = v; break;
		case 5: r = v; g = wh; b = n; break;
	}

	return [r * 255, g * 255, b * 255];
};

convert$1.cmyk.rgb = function (cmyk) {
	var c = cmyk[0] / 100;
	var m = cmyk[1] / 100;
	var y = cmyk[2] / 100;
	var k = cmyk[3] / 100;
	var r;
	var g;
	var b;

	r = 1 - Math.min(1, c * (1 - k) + k);
	g = 1 - Math.min(1, m * (1 - k) + k);
	b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert$1.xyz.rgb = function (xyz) {
	var x = xyz[0] / 100;
	var y = xyz[1] / 100;
	var z = xyz[2] / 100;
	var r;
	var g;
	var b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// assume sRGB
	r = r > 0.0031308
		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
		: r *= 12.92;

	g = g > 0.0031308
		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
		: g *= 12.92;

	b = b > 0.0031308
		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
		: b *= 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert$1.xyz.lab = function (xyz) {
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert$1.lab.xyz = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var x;
	var y;
	var z;
	var y2;

	if (l <= 8) {
		y = (l * 100) / 903.3;
		y2 = (7.787 * (y / 100)) + (16 / 116);
	} else {
		y = 100 * Math.pow((l + 16) / 116, 3);
		y2 = Math.pow(y / 100, 1 / 3);
	}

	x = x / 95.047 <= 0.008856
		? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787
		: 95.047 * Math.pow((a / 500) + y2, 3);
	z = z / 108.883 <= 0.008859
		? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787
		: 108.883 * Math.pow(y2 - (b / 200), 3);

	return [x, y, z];
};

convert$1.lab.lch = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var hr;
	var h;
	var c;

	hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert$1.lch.lab = function (lch) {
	var l = lch[0];
	var c = lch[1];
	var h = lch[2];
	var a;
	var b;
	var hr;

	hr = h / 360 * 2 * Math.PI;
	a = c * Math.cos(hr);
	b = c * Math.sin(hr);

	return [l, a, b];
};

convert$1.rgb.ansi16 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];
	var value = 1 in arguments ? arguments[1] : convert$1.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	var ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert$1.hsv.ansi16 = function (args) {
	// optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert$1.rgb.ansi16(convert$1.hsv.rgb(args), args[2]);
};

convert$1.rgb.ansi256 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];

	// we use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	var ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert$1.ansi16.rgb = function (args) {
	var color = args % 10;

	// handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	var mult = (~~(args > 50) + 1) * 0.5;
	var r = ((color & 1) * mult) * 255;
	var g = (((color >> 1) & 1) * mult) * 255;
	var b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert$1.ansi256.rgb = function (args) {
	// handle greyscale
	if (args >= 232) {
		var c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	var rem;
	var r = Math.floor(args / 36) / 5 * 255;
	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	var b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert$1.rgb.hex = function (args) {
	var integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert$1.hex.rgb = function (args) {
	var match = args.toString(16).match(/[a-f0-9]{6}/i);
	if (!match) {
		return [0, 0, 0];
	}

	var integer = parseInt(match[0], 16);
	var r = (integer >> 16) & 0xFF;
	var g = (integer >> 8) & 0xFF;
	var b = integer & 0xFF;

	return [r, g, b];
};

convert$1.rgb.hcg = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var max = Math.max(Math.max(r, g), b);
	var min = Math.min(Math.min(r, g), b);
	var chroma = (max - min);
	var grayscale;
	var hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma + 4;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert$1.hsl.hcg = function (hsl) {
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var c = 1;
	var f = 0;

	if (l < 0.5) {
		c = 2.0 * s * l;
	} else {
		c = 2.0 * s * (1.0 - l);
	}

	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert$1.hsv.hcg = function (hsv) {
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;

	var c = s * v;
	var f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert$1.hcg.rgb = function (hcg) {
	var h = hcg[0] / 360;
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	var pure = [0, 0, 0];
	var hi = (h % 1) * 6;
	var v = hi % 1;
	var w = 1 - v;
	var mg = 0;

	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert$1.hcg.hsv = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var v = c + g * (1.0 - c);
	var f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert$1.hcg.hsl = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var l = g * (1.0 - c) + 0.5 * c;
	var s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

var conversionsExports = conversions$2.exports;

var conversions$1 = conversionsExports;

/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

// https://jsperf.com/object-keys-vs-for-in-with-closure/3
var models$1 = Object.keys(conversions$1);

function buildGraph() {
	var graph = {};

	for (var len = models$1.length, i = 0; i < len; i++) {
		graph[models$1[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	var graph = buildGraph();
	var queue = [fromModel]; // unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		var current = queue.pop();
		var adjacents = Object.keys(conversions$1[current]);

		for (var len = adjacents.length, i = 0; i < len; i++) {
			var adjacent = adjacents[i];
			var node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	var path = [graph[toModel].parent, toModel];
	var fn = conversions$1[graph[toModel].parent][toModel];

	var cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions$1[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

var route$1 = function (fromModel) {
	var graph = deriveBFS(fromModel);
	var conversion = {};

	var models = Object.keys(graph);
	for (var len = models.length, i = 0; i < len; i++) {
		var toModel = models[i];
		var node = graph[toModel];

		if (node.parent === null) {
			// no possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};

var conversions = conversionsExports;
var route = route$1;

var convert = {};

var models = Object.keys(conversions);

function wrapRaw(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		return fn(args);
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		var result = fn(args);

		// we're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (var len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(function (fromModel) {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});

	var routes = route(fromModel);
	var routeModels = Object.keys(routes);

	routeModels.forEach(function (toModel) {
		var fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

var colorConvert = convert;

const Board$g = requireBoard();
const Animation$4 = animation;
const Expander$4 = requireExpander();
const converter = colorConvert;
const { constrain: constrain$2, map: map$1 } = fn;
const priv$f = new Map();

const Controllers$c = {
  DEFAULT: {
    initialize: {
      value({pins, debug}) {
        RGB$2.colors.forEach((color, index) => {
          const pin = pins[index];

          if (debug && !this.board.pins.isPwm(pin)) {
            Board$g.Pins.Error({
              pin,
              type: "PWM",
              via: "Led.RGB"
            });
          }

          this.io.pinMode(pin, this.io.MODES.PWM);
          this.pins[index] = pin;
        });
      }
    },
    write: {
      writable: true,
      value(colors) {
        const state = priv$f.get(this);

        RGB$2.colors.forEach((color, index) => {
          const pin = this.pins[index];
          let value = colors[color];

          if (state.isAnode) {
            value = 255 - constrain$2(value, 0, 255);
          }
          value = map$1(value, 0, 255, 0, this.board.RESOLUTION.PWM);

          this.io.analogWrite(pin, value);
        });
      }
    }
  },
  PCA9685: {
    initialize: {
      value({address, pwmRange, frequency, pins}) {

        const state = priv$f.get(this);

        this.address = address || 0x40;
        this.pwmRange = pwmRange || [0, 4095];
        this.frequency = frequency || 200;

        state.expander = Expander$4.get({
          address: this.address,
          controller: this.controller,
          bus: this.bus,
          pwmRange: this.pwmRange,
          frequency: this.frequency,
        });

        RGB$2.colors.forEach((color, index) => {
          this.pins[index] = state.expander.normalize(pins[index]);
          state.expander.analogWrite(this.pins[index], 0);
        });
      }
    },
    write: {
      writable: true,
      value(colors) {
        const state = priv$f.get(this);

        RGB$2.colors.forEach((color, index) => {
          const pin = this.pins[index];
          let value = colors[color];

          if (state.isAnode) {
            value = 255 - constrain$2(value, 0, 255);
          }

          state.expander.analogWrite(pin, value);

        });
      }
    }
  },
  BLINKM: {
    REGISTER: {
      value: {
        GO_TO_RGB_COLOR_NOW: 0x6e,
        STOP_SCRIPT: 0x6f
      }
    },
    initialize: {
      value(options) {
        this.address = options.address || 0x09;

        // Ensure that this is passed on to i2cConfig
        options.address = this.address;

        /* istanbul ignore else */
        if (!this.board.Drivers[this.address]) {
          this.io.i2cConfig(options);
          this.board.Drivers[this.address] = {
            initialized: false
          };

          // Stop the current script
          this.io.i2cWrite(this.address, [this.REGISTER.STOP_SCRIPT]);

          this.board.Drivers[this.address].initialized = true;
        }
      }
    },
    write: {
      writable: true,
      value({red, green, blue}) {
        this.io.i2cWrite(this.address, [this.REGISTER.GO_TO_RGB_COLOR_NOW, red, green, blue]);
      }
    }
  }
};

Controllers$c.ESPLORA = {
  initialize: {
    value(options) {
      options.pins = [5, 10, 9];
      this.pins = [];
      Controllers$c.DEFAULT.initialize.value.call(this, options);
    }
  },
  write: Controllers$c.DEFAULT.write
};

/**
 * RGB
 * @constructor
 *
 * @param {Object} options [description]
 * @alias Led.RGB
 */
let RGB$2 = class RGB {
  constructor(options) {

    if (Array.isArray(options)) {
      // RGB([Byte, Byte, Byte]) shorthand
      // Convert to options.pins array definition
      options = {
        pins: options
      };
      // If options.pins is an object, convert to array
    } else if (typeof options.pins === "object" && !Array.isArray(options.pins)) {
      options.pins = [options.pins.red, options.pins.green, options.pins.blue];
    }

    Board$g.Component.call(
      this, options = Board$g.Options(options)
    );

    Board$g.Controller.call(
      this, Controllers$c, options
    );

    // The default color is #ffffff, but the light will be off
    const state = {
      red: 255,
      green: 255,
      blue: 255,
      intensity: 100,
      isAnode: options.isAnode || false,
      interval: null,
      // red, green, and blue store the raw color set via .color()
      // values takes state into account, such as on/off and intensity
      values: {
        red: 255,
        green: 255,
        blue: 255,
      }
    };

    priv$f.set(this, state);

    Object.defineProperties(this, {
      isOn: {
        get() {
          return RGB.colors.some(color => state[color] > 0);
        }
      },
      isRunning: {
        get() {
          return !!state.interval;
        }
      },
      isAnode: {
        get() {
          return state.isAnode;
        }
      },
      values: {
        get() {
          return Object.assign({}, state.values);
        }
      },
      update: {
        value(colors) {
          const state = priv$f.get(this);

          colors = colors || this.color();

          state.values = RGB.ToScaledRGB(state.intensity, colors);

          this.write(state.values);

          Object.assign(state, colors);
        }
      }
    });

    this.initialize(options);
    this.off();
  }

  /**
   * color
   *
   * @param  {String} color Hexadecimal color string or CSS color name
   * @param  {Array} color Array of color values
   * @param  {Object} color object {red, green, blue}
   *
   * @return {RGB}
   */
  color(red, green, blue) {
    const state = priv$f.get(this);
    let colors;

    if (arguments.length === 0) {
      // Return a copy of the state values,
      // not a reference to the state object itself.
      colors = this.isOn ? state : state.prev;
      return RGB.colors.reduce((current, color) => (current[color] = Math.round(colors[color]), current), {});
    }

    const update = RGB.ToRGB(red, green, blue);

    // Validate all color values before writing any values
    RGB.colors.forEach(color => {
      let value = update[color];

      if (value == null) {
        throw new Error(`Led.RGB.color: invalid color ([${[update.red, update.green, update.blue].join(",")}])`);
      }

      value = constrain$2(value, 0, 255);
      update[color] = value;
    });

    this.update(update);

    return this;
  }

  on() {
    const state = priv$f.get(this);
    let colors;

    // If it's not already on, we set them to the previous color
    if (!this.isOn) {
      /* istanbul ignore next */
      colors = state.prev || {
        red: 255,
        green: 255,
        blue: 255
      };

      state.prev = null;

      this.update(colors);
    }

    return this;
  }

  off() {
    const state = priv$f.get(this);

    // If it's already off, do nothing so the pervious state stays intact
    /* istanbul ignore else */
    if (this.isOn) {
      state.prev = RGB.colors.reduce((current, color) => (current[color] = state[color], current), {});

      this.update({
        red: 0,
        green: 0,
        blue: 0
      });
    }

    return this;
  }

  /**
   * blink
   * @param  {Number} duration Time in ms on, time in ms off
   * @return {RGB}
   */
  blink(duration, callback) {
    const state = priv$f.get(this);

    // Avoid traffic jams
    this.stop();

    if (typeof duration === "function") {
      callback = duration;
      duration = null;
    }

    state.interval = setInterval(() => {
      this.toggle();
      if (typeof callback === "function") {
        callback();
      }
    }, duration || 100);

    return this;
  }

  toggle() {
    return this[this.isOn ? "off" : "on"]();
  }

  stop() {
    const state = priv$f.get(this);

    if (state.interval) {
      clearInterval(state.interval);
    }

    /* istanbul ignore if */
    if (state.animation) {
      state.animation.stop();
    }

    state.interval = null;

    return this;
  }

  intensity(intensity) {
    const state = priv$f.get(this);

    if (arguments.length === 0) {
      return state.intensity;
    }

    state.intensity = constrain$2(intensity, 0, 100);

    this.update();

    return this;
  }

  /**
   * Animation.normalize
   *
   * @param [number || object] keyFrames An array of step values or a keyFrame objects
   */

  [Animation$4.normalize](keyFrames) {
    const state = priv$f.get(this);

    // If user passes null as the first element in keyFrames use current value
    if (keyFrames[0] === null) {
      keyFrames[0] = state.values;
    }

    return keyFrames.reduce((accum, frame) => {
      const value = frame;
      let normalized = {};
      let color = null;
      let intensity = state.intensity;

      if (frame !== null) {
        // Frames that are just numbers are not allowed
        // because it is ambiguous.
        if (typeof value === "number") {
          throw new Error("RGB LEDs expect a complete keyFrame object or hexadecimal string value");
        }

        if (typeof value === "string") {
          color = value;
        }

        if (Array.isArray(value)) {
          color = value;
        } else {
          if (typeof value === "object") {
            if (typeof value.color !== "undefined") {
              color = value.color;
            } else {
              color = value;
            }
          }
        }

        if (typeof frame.intensity === "number") {
          intensity = frame.intensity;
          delete frame.intensity;
        }

        normalized.easing = frame.easing || "linear";
        normalized.value = RGB.ToScaledRGB(intensity, RGB.ToRGB(color));
      } else {
        normalized = frame;
      }

      accum.push(normalized);

      return accum;
    }, []);
  }

  /**
   * Animation.render
   *
   * @color [object] color object
   */

  [Animation$4.render](frames) {
    return this.color(frames[0]);
  }


};
/**
 * For multi-property animation, must define
 * the keys to use for tween calculation.
 */
RGB$2.prototype[Animation$4.keys] = RGB$2.colors;

RGB$2.colors = ["red", "green", "blue"];

RGB$2.ToScaledRGB = (intensity, colors) => {
  const scale = intensity / 100;

  return RGB$2.colors.reduce((current, color) => (current[color] = Math.round(colors[color] * scale), current), {});
};

RGB$2.ToRGB = (red, green, blue) => {
  let update = {};
  let flags = 0;
  let input;

  if (typeof red !== "undefined") {
    // 0b100
    flags |= 1 << 2;
  }

  if (typeof green !== "undefined") {
    // 0b010
    flags |= 1 << 1;
  }

  if (typeof blue !== "undefined") {
    // 0b001
    flags |= 1 << 0;
  }

  if ((flags | 0x04) === 0x04) {
    input = red;

    if (input == null) {
      throw new Error(`Invalid color (${input})`);
    }

    /* istanbul ignore else */
    if (Array.isArray(input)) {
      // color([Byte, Byte, Byte])
      update = {
        red: input[0],
        green: input[1],
        blue: input[2]
      };
    } else if (typeof input === "object") {
      // color({
      //   red: Byte,
      //   green: Byte,
      //   blue: Byte
      // });
      update = {
        red: input.red,
        green: input.green,
        blue: input.blue
      };
    } else if (typeof input === "string") {

      // color("#ffffff") or color("ffffff")
      if (/^#?[0-9A-Fa-f]{6}$/.test(input)) {

        // remove the leading # if there is one
        if (input.length === 7 && input[0] === "#") {
          input = input.slice(1);
        }

        update = {
          red: parseInt(input.slice(0, 2), 16),
          green: parseInt(input.slice(2, 4), 16),
          blue: parseInt(input.slice(4, 6), 16)
        };
      } else {
        // color("rgba(r, g, b, a)") or color("rgb(r, g, b)")
        // color("rgba(r g b a)") or color("rgb(r g b)")
        if (/^rgb/.test(input)) {
          const args = input.match(/^rgba?\(([^)]+)\)$/)[1].split(/[\s,]+/);

          // If the values were %...
          if (isPercentString(args[0])) {
            args.forEach((value, index) => {
              // Only convert the first 3 values
              if (index <= 2) {
                args[index] = Math.round((parseInt(value, 10) / 100) * 255);
              }
            });
          }

          update = {
            red: parseInt(args[0], 10),
            green: parseInt(args[1], 10),
            blue: parseInt(args[2], 10)
          };

          // If rgba(...)
          if (args.length > 3) {
            if (isPercentString(args[3])) {
              args[3] = parseInt(args[3], 10) / 100;
            }
            update = RGB$2.ToScaledRGB(100 * parseFloat(args[3]), update);
          }
        } else {
          // color name
          return RGB$2.ToRGB(converter.keyword.rgb(input.toLowerCase()));
        }
      }
    }
  } else {
    // color(red, green, blue)
    update = {
      red,
      green,
      blue
    };
  }

  return update;
};

function isPercentString(input) {
  return typeof input === "string" && input.endsWith("%");
}

RGB$2.prototype.strobe = RGB$2.prototype.blink;



/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  RGB$2.Controllers = Controllers$c;
  RGB$2.purge = () => {
    priv$f.clear();
  };
}

var rgb = RGB$2;

var Board$f = requireBoard();
var Pin = pin;
var lcdCharacters = lcdChars;
var RGB$1 = rgb;

const priv$e = new Map();

/**
 * This atrocity is unfortunately necessary.
 * If any other approach can be found, patches
 * will gratefully be accepted.
 */
function sleepus(usDelay) {
  const startTime = process.hrtime();
  let deltaTime;
  let usWaited = 0;

  while (usDelay > usWaited) {
    deltaTime = process.hrtime(startTime);
    usWaited = (deltaTime[0] * 1E9 + deltaTime[1]) / 1000;
  }
}

/**
 * This atrocity is unfortunately necessary.
 * If any other approach can be found, patches
 * will gratefully be accepted.
 */
function sleep(ms) {
  sleepus(ms * 1000);
}


// TODO:  Migrate this to the new codified Expander class.
//
// - add portMode to PCF8574 controller
// - add portWrite to PCF8574 controller
//
//
// TODO:  Investigate adding the above methods to
//        all expander controllers.
//
let Expander$3 = class Expander {
  constructor(address, io) {
    this.address = address;
    this.mask = 0xFF;
    this.memory = 0x00;
    this.io = io;
  }

  pinMode(pin, dir) {
    if (dir === 0x01) {
      this.mask &= ~(1 << pin);
    } else {
      this.mask |= 1 << pin;
    }
  }

  portMode(dir) {
    this.mask = dir === 0x00 ? 0xFF : 0x00;
  }

  portWrite(value) {
    this.memory = value & ~(this.mask);
    this.io.i2cWrite(this.address, this.memory);
  }
};




// const-caps throughout serve to indicate the
// "const-ness" of the binding to the reader
// and nothing more.

const REGISTER = {
  DEFAULT: {
    SHIFT_LEFT: 0x04,

    CLEAR: 0x01,
    HOME: 0x02,
    ENTRY: 0x04,
    DISPLAY: 0x08,
    DIMENSIONS: 0x20,
    CURSORSHIFT: 0x10,

    SETCGRAMADDR: 0x40,
    SETDDRAMADDR: 0x80,

    // Command And Control

    DATA: 0x40,
    COMMAND: 0x80,

    // flags for display entry mode
    ENTRYRIGHT: 0x00,
    ENTRYLEFT: 0x02,
    ENTRYSHIFTINCREMENT: 0x01,
    ENTRYSHIFTDECREMENT: 0x00,

    // flags for display on/off control
    DISPLAYON: 0x04,
    DISPLAYOFF: 0x00,
    CURSORON: 0x02,
    CURSOROFF: 0x00,
    BLINKON: 0x01,
    BLINKOFF: 0x00,

    // flags for display/cursor shift
    DISPLAYMOVE: 0x08,
    CURSORMOVE: 0x00,
    MOVERIGHT: 0x04,
    MOVELEFT: 0x00,

    // flags for function set
    BITMODE: {
      4: 0x00,
      8: 0x10,
    },

    LINE: {
      1: 0x00,
      2: 0x08
    },

    DOTS: {
      "5x10": 0x04,
      "5x8": 0x00
    },

    // flags for backlight control
    BACKLIGHT_ON: 0x08,
    BACKLIGHT_OFF: 0x00,

    MEMORYLIMIT: 0x08,

    // Control
    // Enable
    EN: 0x04,
    // Read/Write
    RW: 0x02,
    // Register Select
    RS: 0x01,

    // DATA
    D4: 0x04,
    D5: 0x05,
    D6: 0x06,
    D7: 0x07,
  }
};

const Controllers$b = {
  JHD1313M1: {
    REGISTER: {
      value: REGISTER.DEFAULT,
    },
    CHARS: {
      value: lcdCharacters.DEFAULT,
    },
    initialize: {
      value(options) {

        // LCD: 0x3E
        // RGB: 0x62
        this.address = {
          lcd: options.address || 0x3E,
          rgb: 0x62
        };

        options.address = this.address;

        this.io.i2cConfig(options);

        this.lines = options.lines || 2;
        this.rows = options.rows || 2;
        this.cols = options.cols || 16;
        this.dots = options.dots || "5x8";


        const display = this.REGISTER.DISPLAY | this.REGISTER.DISPLAYON | this.REGISTER.CURSOROFF | this.REGISTER.BLINKOFF;

        const state = {
          display,
          characters: {},
          index: this.REGISTER.MEMORYLIMIT - 1,
          backlight: {
            polarity: 1,
            pin: null,
            value: null
          }
        };

        priv$e.set(this, state);

        // Operations within the following labelled block are init-only,
        // but _do_ block the process negligible number of milliseconds.
        {
          const lines = this.REGISTER.DIMENSIONS | this.REGISTER.LINE[2];
          // Copied from Grove Studio lib.
          // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
          // according to datasheet, we need at least 40ms after
          // power rises above 2.7V before sending commands.
          // Arduino can turn on way before 4.5V so we'll wait 50



          sleep(50);
          this.command(lines);
          sleep(5);
          this.command(lines);
          this.command(lines);
          this.command(lines);
          sleep(5);

          this.command(
            this.REGISTER.ENTRY |
            this.REGISTER.ENTRYLEFT |
            this.REGISTER.ENTRYSHIFTDECREMENT
          );

          this.on();
          this.clear();
          this.home();
        }

        // Backlight initialization



        this.bgOn();

        if (options.color) {
          this.bgColor(options.color);
        } else {
          this.bgColor("black");
        }
      },
    },
    clear: {
      value() {
        return this.command(this.REGISTER.CLEAR);
      }
    },
    setCursor: {
      value(col, row) {
        return this.command(row === 0 ? col | 0x80 : col | 0xc0);
      }
    },
    autoscroll: {
      value() {
        const state = priv$e.get(this);

        state.display = this.REGISTER.ENTRYLEFT | this.REGISTER.ENTRYSHIFTINCREMENT;
        this.command(this.REGISTER.ENTRY | state.display);

        return this;
      }
    },
    bgColor: {
      value(red, green, blue) {
        const rgb = RGB$1.ToRGB(red, green, blue);
        const address = this.address.rgb;

        this.io.i2cWrite(address, [0x00, 0]);
        this.io.i2cWrite(address, [0x01, 0]);

        // TRY THIS IN ONE CALL!
        this.io.i2cWrite(address, [0x04, rgb.red]);
        this.io.i2cWrite(address, [0x03, rgb.green]);
        this.io.i2cWrite(address, [0x02, rgb.blue]);

        return this;
      }
    },
    bgOn: {
      value() {
        this.io.i2cWrite(this.address.rgb, [this.REGISTER.BACKLIGHT_ON, 0xAA]);
        return this;
      }
    },
    bgOff: {
      value() {
        this.io.i2cWrite(this.address.rgb, [this.REGISTER.BACKLIGHT_ON, 0x00]);
        return this;
      }
    },
    command: {
      value(mode, value) {
        if (arguments.length === 1) {
          value = mode;
          mode = this.REGISTER.COMMAND;
        }

        if (mode === this.REGISTER.DATA) {
          return this.send(value);
        }

        return this.writeBits(this.REGISTER.COMMAND, value);
      }
    },
    send: {
      value(value) {
        return this.writeBits(this.REGISTER.DATA, value);
      }
    },
    writeBits: {
      value(mode, value) {
        this.io.i2cWrite(this.address.lcd, [mode, value]);
        return this;
      }
    },
    hilo: {
      value(callback) {
        callback.call(this);
      }
    },
  },


  PCF8574: {

    REGISTER: {
      value: Object.assign({}, REGISTER.DEFAULT, {
        COMMAND: 0x00,
        DATA: 0x01,
        BACKLIGHT_ON: 0xFF,
        BACKLIGHT_OFF: 0X00
      }),
    },
    CHARS: {
      value: lcdCharacters.DEFAULT,
    },
    initialize: {
      value(options) {

        this.bitMode = options.bitMode || 4;
        this.lines = options.lines || 2;
        this.rows = options.rows || 2;
        this.cols = options.cols || 16;
        this.dots = options.dots || "5x8";

        if (!options.address) {
          options.address = ["PCF8574A", "PCF8574AT"].includes(options.controller) ?
            0x3F : 0x27;

          /*
            | A2 | A1 | A0 | PCF8574(T) | PCF8574A(T) |
            |----|----|----|---------|----------|
            | L  | L  | L  | 0x20    | 0x38     |
            | L  | L  | H  | 0x21    | 0x39     |
            | L  | H  | L  | 0x22    | 0x3A     |
            | L  | H  | H  | 0x23    | 0x3B     |
            | H  | L  | L  | 0x24    | 0x3C     |
            | H  | L  | H  | 0x25    | 0x3D     |
            | H  | H  | L  | 0x26    | 0x3E     |
            | H  | H  | H  | 0x27    | 0x3F     |

            TODO: move to API docs
           */
        }

        this.io.i2cConfig(options);

        this.address = {
          lcd: options.address
        };

        // Ported from https://bitbucket.org/fmalpartida/new-liquidcrystal
        this.expander = new Expander$3(this.address.lcd, this.io);
        this.expander.portMode(this.io.MODES.OUTPUT);
        this.expander.portWrite(0);

        const backlight = options.backlight || {
          polarity: 0,
          pin: 3
        };

        backlight.pin = typeof backlight.pin === "undefined" ? 3 : backlight.pin;
        backlight.polarity = typeof backlight.polarity === "undefined" ? 0 : backlight.polarity;

        const dimensions = this.REGISTER.BITMODE[this.bitMode] |
          this.REGISTER.LINE[this.lines] |
          this.REGISTER.DOTS[this.dots];

        const display = this.REGISTER.DISPLAY |
          this.REGISTER.DISPLAYON |
          this.REGISTER.CURSOROFF |
          this.REGISTER.BLINKOFF;

        const entry = this.REGISTER.ENTRYLEFT |
          this.REGISTER.ENTRYSHIFTDECREMENT;


        const state = {
          display,
          characters: {},
          index: this.REGISTER.MEMORYLIMIT - 1,
          backlight: {
            polarity: backlight.polarity,
            pinMask: 1 << backlight.pin,
            statusMask: 0x00
          },
          data: [
            1 << this.REGISTER.D4,
            1 << this.REGISTER.D5,
            1 << this.REGISTER.D6,
            1 << this.REGISTER.D7
          ]
        };

        priv$e.set(this, state);

        let toggle = 0x03 << this.REGISTER.SHIFT_LEFT;

        // Operations within the following labelled block are init-only,
        // but _do_ block the process for negligible number of milliseconds.
        {
          //
          // Toggle write/pulse to reset the LCD component.
          //
          this.expander.portWrite(toggle);
          this.pulse(toggle);
          sleep(4);

          this.expander.portWrite(toggle);
          this.pulse(toggle);
          sleep(4);

          this.expander.portWrite(toggle);
          this.pulse(toggle);

          toggle = 0x02 << this.REGISTER.SHIFT_LEFT;

          this.expander.portWrite(toggle);
          this.pulse(toggle);

          // Initialize the reset component
          this.command(this.REGISTER.DIMENSIONS | dimensions);

          // Set display details
          this.command(state.display);

          // Now that the initial display is set,
          // overwrite with the "entry" bits
          state.display = entry;

          this.command(this.REGISTER.ENTRY | state.display);

          this.on();
          this.clear();
          this.backlight();
        }
      },
    },
    clear: {
      value() {
        this.command(this.REGISTER.CLEAR);
        sleep(2);
        return this;

      }
    },
    backlight: {
      value(value) {
        const state = priv$e.get(this);
        let mask;

        value = typeof value === "undefined" ? 255 : value;

        if (state.backlight.pinMask !== 0x00) {
          if ((state.backlight.polarity === 0 && value > 0) ||
            (state.backlight.polarity === 1 && value === 0)) {

            mask = 0xFF;
          } else {
            mask = 0x00;
          }

          state.backlight.statusMask = state.backlight.pinMask & mask;

          this.expander.portWrite(state.backlight.statusMask);
        }

        return this;
      }
    },

    createChar: {
      value(name, charMap) {
        const state = priv$e.get(this);
        let address;

        if (typeof name === "number") {
          address = name & 0x07;
        } else {
          address = state.index;
          state.index--;
          if (state.index === -1) {
            state.index = this.REGISTER.MEMORYLIMIT - 1;
          }
        }

        this.command(this.REGISTER.SETCGRAMADDR | (address << 3));

        {
          sleep(1);

          for (let i = 0; i < 8; i++) {
            this.command(this.REGISTER.DATA, charMap[i]);
            sleep(1);
          }
        }

        state.characters[name] = address;

        return address;
      }
    },
    noBacklight: {
      value() {
        this.backlight(0);
      }
    },
    on: {
      value() {
        const state = priv$e.get(this);

        state.display |= this.REGISTER.DISPLAYON;
        this.command(this.REGISTER.DISPLAY | state.display);

        return this;
      }
    },
    off: {
      value() {
        const state = priv$e.get(this);

        state.display &= ~this.REGISTER.DISPLAYON;
        this.command(this.REGISTER.DISPLAY | state.display);

        return this;
      }
    },
    hilo: {
      value(callback) {
        callback.call(this);
      }
    },
    command: {
      value(mode, value) {

        if (arguments.length === 1) {
          value = mode;
          mode = this.REGISTER.COMMAND;
        }

        this.send(mode, value);

        return this;
      }
    },
    send: {
      writable: true,
      value(mode, value) {

        this.writeBits(mode, value >> 4);
        this.writeBits(mode, value & 0x0F);

        return this;
      }
    },
    writeBits: {
      writable: true,
      value(mode, value) {
        const state = priv$e.get(this);
        let pinMapValue = 0;

        for (let i = 0; i < 4; i++) {
          if ((value & 0x01) === 1) {
            pinMapValue |= state.data[i];
          }
          value = (value >> 1);
        }

        if (mode === this.REGISTER.DATA) {
          mode = this.REGISTER.RS;
        }

        pinMapValue |= mode | state.backlight.statusMask;

        this.pulse(pinMapValue);
        return this;
      }
    },
    pulse: {
      writable: true,
      value(data) {
        this.expander.portWrite(data | this.REGISTER.EN); // En HIGH
        this.expander.portWrite(data & ~this.REGISTER.EN); // En LOW
      }
    }
  },


  PARALLEL: {
    REGISTER: {
      value: REGISTER.DEFAULT,
    },
    CHARS: {
      value: lcdCharacters.DEFAULT,
    },
    initialize: {
      value(options) {

        this.bitMode = options.bitMode || 4;
        this.lines = options.lines || 2;
        this.rows = options.rows || 2;
        this.cols = options.cols || 16;
        this.dots = options.dots || "5x8";

        if (Array.isArray(options.pins)) {
          this.pins = {
            rs: options.pins[0],
            en: options.pins[1],
            // TODO: Move to device map profile
            data: [
              options.pins[5],
              options.pins[4],
              options.pins[3],
              options.pins[2]
            ]
          };
        } else {
          this.pins = options.pins;
        }

        const display = this.REGISTER.DISPLAY | this.REGISTER.DISPLAYON;
        const state = {
          display,
          characters: {},
          index: this.REGISTER.MEMORYLIMIT - 1,
          backlight: {
            polarity: 1,
            pin: null,
            value: null
          }
        };

        priv$e.set(this, state);

        options.pins.forEach(function(pin) {
          this.io.pinMode(pin, 1);
        }, this);

        this.io.digitalWrite(this.pins.rs, this.io.LOW);
        this.io.digitalWrite(this.pins.en, this.io.LOW);

        if (options.backlight) {
          if (typeof options.backlight === "number") {
            const temp = options.backlight;
            options.backlight = {
              pin: temp
            };
          }

          if (options.backlight.pin) {
            state.backlight.pin = new Pin({
              pin: options.backlight.pin,
              board: this.board
            });

            state.backlight.pin.high();
          }
        }

        // Operations within the following labelled block are init-only,
        // but _do_ block the process negligible number of milliseconds.
        {
          // Send 0b00000011 thrice to make sure LCD
          // is initialized properly
          this.command(0x03);
          sleep(4);
          this.command(0x03);
          sleep(4);
          this.command(0x03);

          // Switch to 4-bit mode
          if (this.bitMode === 4) {
            // this.REGISTER.DIMENSIONS |
            this.command(0x02);
          }

          // Set number of lines and dots
          // TODO: Move to device map profile
          this.command(
            this.REGISTER.LINE[this.lines] |
            this.REGISTER.DOTS[this.dots]
          );

          // Clear display and turn it on
          this.command(display);
          this.clear();
          this.home();
        }
      }
    }
  }
};

// Alias controllers
Controllers$b.LCM1602 = Controllers$b.LCD1602 = Controllers$b.LCM1602IIC = Controllers$b.LCD2004 = Controllers$b.PCF8574A = Controllers$b.PCF8574AT = Controllers$b.PCF8574T = Controllers$b.PCF8574;

Controllers$b.MJKDZ = Object.assign({}, Controllers$b.PCF8574, {
  REGISTER: {
    value: Object.assign({}, REGISTER.DEFAULT, {
      SHIFT_LEFT: 0x00,

      COMMAND: 0x00,
      DATA: 0x06,

      // Control
      // Enable
      EN: 0x10,
      // Read/Write
      RW: 0x05,
      // Register Select
      RS: 0x06,

      D4: 0x00,
      D5: 0x01,
      D6: 0x02,
      D7: 0x03
    })
  },
  writeBits: {
    writable: true,
    value(mode, value) {
      const state = priv$e.get(this);
      let pinMapValue = 0;

      for (let i = 0; i < 4; i++) {
        if ((value & 0x01) === 1) {
          pinMapValue |= state.data[i];
        }
        value = (value >> 1);
      }

      if (mode === this.REGISTER.DATA) {
        mode = (1 << this.REGISTER.RS);
      }

      pinMapValue |= mode | state.backlight.statusMask;

      this.pulse(pinMapValue);
      return this;
    }
  },
});


Controllers$b.DEFAULT = Controllers$b.PARALLEL;

/**
 * LCD
 * @param {[type]} options [description]
 */

class LCD {
  constructor(options) {

    Board$f.Component.call(
      this, options = Board$f.Options(options)
    );

    Board$f.Controller.call(this, Controllers$b, options);

    this.ctype = options.controller;

    if (this.initialize) {
      this.initialize(options);
    }

    Object.defineProperties(this, {
      characters: {
        get() {
          return Object.assign({}, priv$e.get(this).characters);
        },
      },
    });
  }

  command(mode, value) {
    if (typeof value === "undefined") {
      value = mode;
      mode = 0x80;
    }

    if (this.bitMode === 4) {
      this.send(value >> 4);
    }

    this.send(value);

    return this;
  }

  send(value) {
    let pin = 0;
    let mask = {
      4: 8,
      8: 128
    }[this.bitMode];

    for (; mask > 0; mask = mask >> 1) {
      this.io.digitalWrite(
        this.pins.data[pin],
        this.io[value & mask ? "HIGH" : "LOW"]
      );
      pin++;
    }

    // At VCC = 3.3V, the minimum enable pulse width is specified as 450
    // nanoseconds on page 49 of the HD44780 datasheet.
    // We therefore wait for 1 microsecond here to ensure that fast IO plugins
    // like Pi-IO generate an enable pulse that's wide enough.
    this.io.digitalWrite(this.pins.en, this.io.LOW);
    this.io.digitalWrite(this.pins.en, this.io.HIGH);
    sleepus(1);
    this.io.digitalWrite(this.pins.en, this.io.LOW);

    // The execution time for the vast majority of instructions is at least
    // 37 microseconds. See datasheet pages 24 and 25.
    // It's important to wait 37 microseconds here to prevent fast IO plugins
    // like Pi-IO from executing the next instruction before the current
    // instruction has completed.
    sleepus(37);

    return this;
  }

  hilo(callback) {
    // RS High for write mode
    this.io.digitalWrite(this.pins.rs, this.io.HIGH);

    callback.call(this);

    // RS Low for command mode
    this.io.digitalWrite(this.pins.rs, this.io.LOW);
  }

  print(message, options) {
    let state;
    let dontProcessSpecials;
    let hasCharacters;
    let processed;

    message = `${message}`;
    options = options || {};

    state = priv$e.get(this);
    dontProcessSpecials = options.dontProcessSpecials || false;
    hasCharacters = !dontProcessSpecials && RE_SPECIALS.test(message);

    if (message.length === 1) {
      this.hilo(function() {
        this.command(this.REGISTER.DATA, message.charCodeAt(0));
      });
    } else {

      if (hasCharacters) {
        processed = message.replace(RE_SPECIALS, (match, name) => {
          const address = state.characters[name];

          return typeof address === "number" ? String.fromCharCode(address) : match;
        });

        this.print(processed, {
          dontProcessSpecials: true
        });
      } else {
        this.hilo(function() {
          Array.from(message).forEach(function(character) {
            this.command(this.REGISTER.DATA, character.charCodeAt(0));
          }, this);
        });
      }
    }

    return this;
  }

  write(charCode) {
    this.hilo.call(this, function() {
      this.command(this.REGISTER.DATA, charCode);
    });

    return this;
  }

  clear() {
    this.command(this.REGISTER.CLEAR);
    sleep(2);
    return this;
  }

  home() {
    this.command(this.REGISTER.HOME);
    sleep(2);
    return this;
  }

  setCursor(col, row) {
    const rowOffsets = [0x00, 0x40, 0x14, 0x54];
    this.command(this.REGISTER.SETDDRAMADDR | (col + rowOffsets[row]));
    return this;
  }

  backlight(highOrLow) {
    const state = priv$e.get(this);

    highOrLow = typeof highOrLow === "undefined" ? true : false;

    if (state.backlight.pin instanceof Pin) {
      if (highOrLow) {
        state.backlight.pin.high();
      } else {
        state.backlight.pin.low();
      }
    }

    if (highOrLow) {
      state.display |= this.REGISTER.DISPLAYON;
    } else {
      state.display &= ~this.REGISTER.DISPLAYON;
    }

    this.command(state.display);

    return this;
  }

  noBacklight() {
    const state = priv$e.get(this);

    if (state.backlight.pin instanceof Pin) {
      state.backlight.pin.high();
    }

    // if (highOrLow) {
    //   state.display |= this.REGISTER.DISPLAYON;
    // } else {
    //   state.display &= ~this.REGISTER.DISPLAYON;
    // }

    // this.command(state.display);

    return this.backlight(false);
  }

  on() {
    const state = priv$e.get(this);

    state.display |= this.REGISTER.DISPLAYON;
    this.command(state.display);

    return this;
  }

  off() {
    const state = priv$e.get(this);

    state.display &= ~this.REGISTER.DISPLAYON;
    this.command(state.display);

    return this;
  }

  cursor(row, col) {
    // When provided with col & row, cursor will behave like setCursor,
    // except that it has row and col in the order that most people
    // intuitively expect it to be in.
    if (typeof col !== "undefined" && typeof row !== "undefined") {
      return this.setCursor(col, row);
    }
    const state = priv$e.get(this);

    state.display |= this.REGISTER.CURSORON;
    this.command(state.display);

    return this;
  }

  noCursor() {
    const state = priv$e.get(this);

    state.display &= ~this.REGISTER.CURSORON;
    this.command(state.display);

    return this;
  }

  blink() {
    const state = priv$e.get(this);

    state.display |= this.REGISTER.BLINKON;
    this.command(state.display);

    return this;
  }

  noBlink() {
    const state = priv$e.get(this);

    state.display &= ~this.REGISTER.BLINKON;
    this.command(state.display);

    return this;
  }

  autoscroll() {
    const state = priv$e.get(this);

    state.display |= this.REGISTER.ENTRYSHIFTINCREMENT;
    this.command(this.REGISTER.ENTRY | state.display);

    return this;
  }

  noAutoscroll() {
    const state = priv$e.get(this);

    state.display &= ~this.REGISTER.ENTRYSHIFTINCREMENT;
    this.command(this.REGISTER.ENTRY | state.display);

    return this;
  }

  createChar(name, charMap) {
    // Ensure location is never above 7
    const state = priv$e.get(this);
    let address;

    if (typeof name === "number") {
      address = name & 0x07;
    } else {
      address = state.index;
      state.index--;
      if (state.index === -1) {
        state.index = this.REGISTER.MEMORYLIMIT - 1;
      }
    }

    this.command(this.REGISTER.SETCGRAMADDR | (address << 3));

    this.hilo(function() {
      for (let i = 0; i < 8; i++) {
        this.command(this.REGISTER.DATA, charMap[i]);
      }
    });

    // Fill in address
    state.characters[name] = address;

    return address;
  }

  useChar(name) {
    const state = priv$e.get(this);

    if (typeof state.characters[name] === "undefined") {
      // Create the character in LCD memory and
      const newCharIndex = this.createChar(name, this.CHARS[name]);

      // If character's index already used, remove this character in current LCD character map
      // because it's not in LCD memory anymore.
      for (const oldName in state.characters) {
        if (name !== oldName && state.characters[oldName] === newCharIndex) {
          delete state.characters[oldName];
          break;
        }
      }

      // Add character to current LCD character map
      state.characters[name] = newCharIndex;
    }

    return this;
  }
}



const RE_SPECIALS = /:(\w+):/g;


/**
 *

TODO:


burst()

scrollDisplayLeft()
scrollDisplayRight()

leftToRight()
rightToLeft()


*/

LCD.POSITIVE = 0;
LCD.NEGATIVE = 1;

LCD.Characters = lcdCharacters;

var lcd = LCD;

const Board$e = requireBoard();
const Animation$3 = animation;
const Expander$2 = requireExpander();
const { constrain: constrain$1, map, scale: scale$1 } = fn;
const Pins$3 = Board$e.Pins;
const priv$d = new Map();

const Controllers$a = {
  PCA9685: {
    initialize: {
      value({address, pwmRange, frequency, pin}) {

        const state = priv$d.get(this);

        this.address = address || 0x40;
        this.pwmRange = pwmRange || [0, 4095];
        this.frequency = frequency || 200;

        state.expander = Expander$2.get({
          address: this.address,
          controller: this.controller,
          bus: this.bus,
          pwmRange: this.pwmRange,
          frequency: this.frequency,
        });

        this.pin = state.expander.normalize(pin);

        state.mode = this.io.MODES.PWM;
      }
    },
    update: {
      writable: true,
      value(input) {
        const state = priv$d.get(this);
        const output = typeof input !== "undefined" ? input : state.value;
        const value = state.isAnode ? 255 - Board$e.constrain(output, 0, 255) : output;
        this.write(value);
      }
    },
    write: {
      writable: true,
      value(value) {
        const state = priv$d.get(this);
        state.expander.analogWrite(this.pin, value);
      }
    }
  },
  DEFAULT: {
    initialize: {
      value({pin}, pinValue) {

        const state = priv$d.get(this);
        const isFirmata = Pins$3.isFirmata(this);
        let defaultLed;

        if (isFirmata && typeof pinValue === "string" &&
            (pinValue.length > 1 && pinValue[0] === "A")) {
          pinValue = this.io.analogPins[+pinValue.slice(1)];
        }

        defaultLed = this.io.defaultLed || 13;
        pinValue = +pinValue;

        if (isFirmata && this.io.analogPins.includes(pinValue)) {
          this.pin = pinValue;
          state.mode = this.io.MODES.OUTPUT;
        } else {
          this.pin = typeof pin === "undefined" ? defaultLed : pin;
          state.mode = this.io.MODES[
            (this.board.pins.isPwm(this.pin) ? "PWM" : "OUTPUT")
          ];
        }

        this.io.pinMode(this.pin, state.mode);
      }
    },
    update: {
      writable: true,
      value(input) {
        const state = priv$d.get(this);
        const output = typeof input !== "undefined" ? input : state.value;
        let value = state.isAnode ? 255 - Board$e.constrain(output, 0, 255) : output;
        value = map(value, 0, 255, 0, this.board.RESOLUTION.PWM);

        // If pin is not a PWM pin and brightness is not HIGH or LOW, emit an error
        if (value !== this.io.LOW && value !== this.io.HIGH && this.mode !== this.io.MODES.PWM) {
          Board$e.Pins.Error({
            pin: this.pin,
            type: "PWM",
            via: "Led"
          });
        }

        if (state.mode === this.io.MODES.OUTPUT) {
          value = output;
        }

        this.write(value);
      }
    },
    write: {
      writable: true,
      value(value) {
        const state = priv$d.get(this);

        if (state.mode === this.io.MODES.OUTPUT) {
          this.io.digitalWrite(this.pin, value);
        }

        if (state.mode === this.io.MODES.PWM) {
          this.io.analogWrite(this.pin, value);
        }
      }
    }
  }
};

/**
 * Led
 * @constructor
 *
 * five.Led(pin);
 *
 * five.Led({
 *   pin: number
 *  });
 *
 *
 * @param {Object} opts [description]
 *
 */

let Led$3 = class Led {
  constructor(options) {
    const pinValue = typeof options === "object" ? options.pin : options;

    Board$e.Component.call(
      this, options = Board$e.Options(options)
    );

    Board$e.Controller.call(
      this, Controllers$a, options
    );

    const state = {
      isAnode: options.isAnode,
      isOn: false,
      isRunning: false,
      value: null,
      direction: 1,
      mode: null,
      intensity: 0,
      interval: null
    };

    priv$d.set(this, state);

    Object.defineProperties(this, {
      value: {
        get() {
          return state.value;
        }
      },
      mode: {
        get() {
          return state.mode;
        }
      },
      isOn: {
        get() {
          return !!state.value;
        }
      },
      isRunning: {
        get() {
          return state.isRunning;
        }
      },
      animation: {
        get() {
          return state.animation;
        }
      }
    });

    /* istanbul ignore else */
    if (typeof this.initialize === "function") {
      this.initialize(options, pinValue);
    }
  }

  /**
   * on Turn the led on
   * @return {Led}
   */

  on() {
    const state = priv$d.get(this);

    if (state.mode === this.io.MODES.OUTPUT) {
      state.value = this.io.HIGH;
    }

    if (state.mode === this.io.MODES.PWM) {
      // Assume we need to simply turn this all the way on, when:

      // ...state.value is null
      if (state.value === null) {
        state.value = 255;
      }

      // ...there is no active interval
      if (!state.interval) {
        state.value = 255;
      }

      // ...the last value was 0
      if (state.value === 0) {
        state.value = 255;
      }
    }

    this.update();

    return this;
  }

  /**
   * off  Turn the led off
   * @return {Led}
   */
  off() {
    const state = priv$d.get(this);

    state.value = 0;

    this.update();

    return this;
  }

  /**
   * toggle Toggle the on/off state of an led
   * @return {Led}
   */
  toggle() {
    return this[this.isOn ? "off" : "on"]();
  }

  /**
   * brightness
   * @param  {Number} value analog brightness value 0-255
   * @return {Led}
   */
  brightness(brightness) {
    const state = priv$d.get(this);
    state.value = brightness;

    this.update();

    return this;
  }

  /**
   * intensity
   * @param  {Number} value Light intensity 0-100
   * @return {Led}
   */
  intensity(intensity) {
    const state = priv$d.get(this);

    if (arguments.length === 0) {
      return state.intensity;
    }

    state.intensity = constrain$1(intensity, 0, 100);

    return this.brightness(scale$1(state.intensity, 0, 100, 0, 255));
  }

  /**
   * Animation.normalize
   *
   * @param [number || object] keyFrames An array of step values or a keyFrame objects
   */

  [Animation$3.normalize](keyFrames) {
    const state = priv$d.get(this);

    // If user passes null as the first element in keyFrames use current value
    /* istanbul ignore else */
    if (keyFrames[0] === null) {
      keyFrames[0] = {
        value: state.value || 0
      };
    }

    return keyFrames.map(frame => {
      const value = frame;
      /* istanbul ignore else */
      if (frame !== null) {
        // frames that are just numbers represent values
        if (typeof frame === "number") {
          frame = {
            value,
          };
        } else {
          if (typeof frame.brightness === "number") {
            frame.value = frame.brightness;
            delete frame.brightness;
          }
          if (typeof frame.intensity === "number") {
            frame.value = scale$1(frame.intensity, 0, 100, 0, 255);
            delete frame.intensity;
          }
        }

        /* istanbul ignore else */
        if (!frame.easing) {
          frame.easing = "linear";
        }
      }
      return frame;
    });
  }

  /**
   * Animation.render
   *
   * @position [number] value to set the led to
   */

  [Animation$3.render](position) {
    const state = priv$d.get(this);
    state.value = position[0];
    return this.update();
  }

  /**
   * pulse Fade the Led in and out in a loop with specified time
   * @param  {number} duration Time in ms that a fade in/out will elapse
   * @return {Led}
   *
   * - or -
   *
   * @param  {Object} val An Animation() segment config object
   */

  pulse(duration, callback) {
    const state = priv$d.get(this);

    this.stop();

    const options = {
      duration: typeof duration === "number" ? duration : 1000,
      keyFrames: [0, 0xff],
      metronomic: true,
      loop: true,
      easing: "inOutSine",
      onloop() {
        /* istanbul ignore else */
        if (typeof callback === "function") {
          callback();
        }
      }
    };

    if (typeof duration === "object") {
      Object.assign(options, duration);
    }

    if (typeof duration === "function") {
      callback = duration;
    }

    state.isRunning = true;

    state.animation = state.animation || new Animation$3(this);
    state.animation.enqueue(options);
    return this;
  }

  /**
   * fade Fade an led in and out
   * @param  {Number} val  Analog brightness value 0-255
   * @param  {Number} duration Time in ms that a fade in/out will elapse
   * @return {Led}
   *
   * - or -
   *
   * @param  {Object} val An Animation() segment config object
   */

  fade(val, duration, callback) {

    const state = priv$d.get(this);

    this.stop();

    const options = {
      duration: typeof duration === "number" ? duration : 1000,
      keyFrames: [null, typeof val === "number" ? val : 0xff],
      easing: "outSine",
      oncomplete() {
        state.isRunning = false;
        /* istanbul ignore else */
        if (typeof callback === "function") {
          callback();
        }
      }
    };

    if (typeof val === "object") {
      Object.assign(options, val);
    }

    if (typeof val === "function") {
      callback = val;
    }

    if (typeof duration === "object") {
      Object.assign(options, duration);
    }

    if (typeof duration === "function") {
      callback = duration;
    }

    state.isRunning = true;

    state.animation = state.animation || new Animation$3(this);
    state.animation.enqueue(options);

    return this;
  }

  fadeIn(duration, callback) {
    return this.fade(255, duration || 1000, callback);
  }

  fadeOut(duration, callback) {
    return this.fade(0, duration || 1000, callback);
  }

  /**
   * blink
   * @param  {Number} duration Time in ms on, time in ms off
   * @return {Led}
   */
  blink(duration, callback) {
    const state = priv$d.get(this);

    // Avoid traffic jams
    this.stop();

    if (typeof duration === "function") {
      callback = duration;
      duration = null;
    }

    state.isRunning = true;

    state.interval = setInterval(() => {
      this.toggle();
      if (typeof callback === "function") {
        callback();
      }
    }, duration || 100);

    return this;
  }


  /**
   * stop Stop the led from strobing, pulsing or fading
   * @return {Led}
   */
  stop() {
    const state = priv$d.get(this);

    if (state.interval) {
      clearInterval(state.interval);
    }

    if (state.animation) {
      state.animation.stop();
    }

    state.interval = null;
    state.isRunning = false;

    return this;
  }
};

Led$3.prototype.strobe = Led$3.prototype.blink;

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  Led$3.Controllers = Controllers$a;
  Led$3.purge = function() {
    priv$d.clear();
  };
}


var led$1 = Led$3;

const Animation$2 = animation;
const Led$2 = led$1;
const Collection$9 = collection;

/**
 * new Leds()
 *
 * Create an Array-like object instance of Leds
 * @alias Led.Collection
 * @constructor
 * @return {Leds}
 */

class Leds extends Collection$9 {
  constructor(numsOrObjects) {
    super(numsOrObjects);
  }
  get type() {
    return Led$2;
  }

  /**
   * Animation.normalize
   *
   * @param [number || object] keyFrames An array of step values or a keyFrame objects
   */
  [Animation$2.normalize](keyFrameSet) {
    return keyFrameSet.map((keyFrames, index) => {
      if (keyFrames !== null) {
        return this[index][Animation$2.normalize](keyFrames);
      }
      return keyFrames;
    });
  }

  /**
   * Animation.render
   *
   * @position [number] array of values to set the leds to
   */
  [Animation$2.render](frames) {
    return this.each((led, i) => led[Animation$2.render]([frames[i]]));
  }
}

Collection$9.installMethodForwarding(
  Leds.prototype, Led$2.prototype,
  {
    skip: [Animation$2.normalize, Animation$2.render]
  }
);

Collection$9.installCallbackReconciliation(
  Leds.prototype,
  ["pulse", "fade", "fadeIn", "fadeOut", "blink"]
);

// Assign Leds Collection class as static "method" of Led.
Led$2.Collection = Leds;

var leds = Leds;

const Animation$1 = animation;
const Collection$8 = collection;
const RGB = rgb;


/**
 * RGBs()
 * new RGBs()
 *
 * Create an Array-like object instance of RGBs
 * @alias RGB.Collection
 * @constructor
 * @return {RGBs}
 */
class RGBs extends Collection$8 {
  constructor(numsOrObjects) {
    super(numsOrObjects);
  }
  get type() {
    return RGB;
  }

  /**
   * Animation.normalize
   *
   * @param [number || object] keyFrames An array of step values or
   *                                     a keyFrame objects
   */
  [Animation$1.normalize](keyFrameSet) {
    return keyFrameSet.map((keyFrames, index) => {
      if (keyFrames !== null) {
        return this[index][Animation$1.normalize](keyFrames);
      }
      return keyFrames;
    });
  }

  /**
   * Animation.render
   *
   * @position [number] array of values to set the leds to
   */
  [Animation$1.render](frames) {
    return this.each((led, i) => led[Animation$1.render]([frames[i]]));
  }
}

Collection$8.installMethodForwarding(
  RGBs.prototype, RGB.prototype,
  {
    skip: [Animation$1.normalize, Animation$1.render]
  }
);

Collection$8.installCallbackReconciliation(
  RGBs.prototype,
  ["blink"]
);


/**
 * For multi-property animation, must define
 * the keys to use for tween calculation.
 */
RGBs.prototype[Animation$1.keys] = RGB.colors;


var rgbs = RGBs;

var ledChars = {
  // https://codepen.io/rwaldron/full/eYOXrJX
  MATRIX_CHARS: {
    //symbols & punctuation
    " ": [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    "!": [0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00],
    "\"": [0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00],
    "#": [0x0A, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x0A, 0x00],
    "$": [0x04, 0x0F, 0x14, 0x0E, 0x05, 0x1E, 0x04, 0x00],
    "%": [0x18, 0x19, 0x02, 0x04, 0x08, 0x13, 0x03, 0x00],
    "&": [0x0C, 0x12, 0x14, 0x08, 0x15, 0x12, 0x0D, 0x00],
    "'": [0x0C, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00],
    "(": [0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00],
    ")": [0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00],
    "*": [0x00, 0x04, 0x15, 0x0E, 0x15, 0x04, 0x00, 0x00],
    "+": [0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00, 0x00],
    ",": [0x00, 0x00, 0x00, 0x00, 0x0C, 0x04, 0x08, 0x00],
    "-": [0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00],
    ".": [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00],
    "/": [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00],
    "[": [0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E, 0x00],
    "\\": [0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00],
    "]": [0x0E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0E, 0x00],
    "^": [0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00],
    "_": [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00],
    "`": [0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00],
    ":": [0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x00, 0x00],
    ";": [0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x04, 0x08, 0x00],
    "<": [0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00],
    "=": [0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00, 0x00],
    ">": [0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x00],
    "?": [0x0E, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04, 0x00],
    "@": [0x0E, 0x11, 0x01, 0x0D, 0x15, 0x15, 0x0E, 0x00],
    "{": [0x02, 0x04, 0x04, 0x08, 0x04, 0x04, 0x02, 0x00],
    "|": [0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00],
    "}": [0x08, 0x04, 0x04, 0x02, 0x04, 0x04, 0x08, 0x00],
    "~": [0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00],

    //standard numbers
    "0": [0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E, 0x00],
    "1": [0x04, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00],
    "2": [0x0E, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1F, 0x00],
    "3": [0x1F, 0x02, 0x04, 0x02, 0x01, 0x11, 0x0E, 0x00],
    "4": [0x02, 0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02, 0x00],
    "5": [0x1F, 0x10, 0x1E, 0x01, 0x01, 0x11, 0x0E, 0x00],
    "6": [0x06, 0x08, 0x10, 0x1E, 0x11, 0x11, 0x0E, 0x00],
    "7": [0x1F, 0x01, 0x02, 0x04, 0x04, 0x04, 0x04, 0x00],
    "8": [0x1E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E, 0x00],
    "9": [0x0E, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x0C, 0x00],

    //capital letters
    "A": [0x08, 0x14, 0x22, 0x3E, 0x22, 0x22, 0x22, 0x22],
    "B": [0x3C, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x3C, 0x00],
    "C": [0x3C, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3C, 0x00],
    "D": [0x7C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7C, 0x00],
    "E": [0x7C, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x7C],
    "F": [0x7C, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x40],
    "G": [0x3C, 0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x3C],
    "H": [0x44, 0x44, 0x44, 0x7C, 0x44, 0x44, 0x44, 0x44],
    "I": [0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7C],
    "J": [0x3C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x48, 0x30],
    "K": [0x00, 0x24, 0x28, 0x30, 0x20, 0x30, 0x28, 0x24],
    "L": [0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7C],
    "M": [0x81, 0xC3, 0xA5, 0x99, 0x81, 0x81, 0x81, 0x81],
    "N": [0x00, 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x00],
    "O": [0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C],
    "P": [0x3C, 0x22, 0x22, 0x22, 0x3C, 0x20, 0x20, 0x20],
    "Q": [0x1C, 0x22, 0x22, 0x22, 0x22, 0x26, 0x22, 0x1D],
    "R": [0x3C, 0x22, 0x22, 0x22, 0x3C, 0x24, 0x22, 0x21],
    "S": [0x00, 0x1E, 0x20, 0x20, 0x3E, 0x02, 0x02, 0x3C],
    "T": [0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08],
    "U": [0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x22, 0x1C],
    "V": [0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18],
    "W": [0x00, 0x49, 0x49, 0x49, 0x49, 0x2A, 0x1C, 0x00],
    "X": [0x00, 0x41, 0x22, 0x14, 0x08, 0x14, 0x22, 0x41],
    "Y": [0x41, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x08],
    "Z": [0x00, 0x7F, 0x02, 0x04, 0x08, 0x10, 0x20, 0x7F],

    //question: do these need to stay or what?
    // "A": [0x0E, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x00],
    // "B": [0x1E, 0x09, 0x09, 0x0E, 0x09, 0x09, 0x1E, 0x00],
    // "C": [0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E, 0x00],
    // "D": [0x1E, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1E, 0x00],
    // "E": [0x1F, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x1F, 0x00],
    // "F": [0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x10, 0x00],
    // "G": [0x0E, 0x11, 0x10, 0x13, 0x11, 0x11, 0x0F, 0x00],
    // "H": [0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00],
    // "I": [0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00],
    // "J": [0x07, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0C, 0x00],
    // "K": [0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11, 0x00],
    // "L": [0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x00],
    // "M": [0x11, 0x1B, 0x15, 0x15, 0x11, 0x11, 0x11, 0x00],
    // "N": [0x11, 0x19, 0x19, 0x15, 0x13, 0x13, 0x11, 0x00],
    // "O": [0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00],
    // "P": [0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10, 0x00],
    // "Q": [0x0E, 0x11, 0x11, 0x11, 0x15, 0x12, 0x1D, 0x00],
    // "R": [0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11, 0x00],
    // "S": [0x0E, 0x11, 0x10, 0x0E, 0x01, 0x11, 0x0E, 0x00],
    // "T": [0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00],
    // "U": [0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00],
    // "V": [0x11, 0x11, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00],
    // "W": [0x11, 0x11, 0x11, 0x15, 0x15, 0x1B, 0x11, 0x00],
    // "X": [0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11, 0x00],
    // "Y": [0x11, 0x11, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x00],
    // "Z": [0x1F, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1F, 0x00],

    //lowercase letters
    "a": [0x00, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00],
    "b": [0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x1E, 0x00],
    "c": [0x00, 0x00, 0x0E, 0x11, 0x10, 0x11, 0x0E, 0x00],
    "d": [0x01, 0x01, 0x0D, 0x13, 0x11, 0x11, 0x0F, 0x00],
    "e": [0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0E, 0x00],
    "f": [0x02, 0x05, 0x04, 0x0E, 0x04, 0x04, 0x04, 0x00],
    "g": [0x00, 0x0D, 0x13, 0x13, 0x0D, 0x01, 0x0E, 0x00],
    "h": [0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00],
    "i": [0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x0E, 0x00],
    "j": [0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0C, 0x00],
    "k": [0x08, 0x08, 0x09, 0x0A, 0x0C, 0x0A, 0x09, 0x00],
    "l": [0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00],
    "m": [0x00, 0x00, 0x1A, 0x15, 0x15, 0x15, 0x15, 0x00],
    "n": [0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00],
    "o": [0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x00],
    "p": [0x00, 0x16, 0x19, 0x19, 0x16, 0x10, 0x10, 0x00],
    "q": [0x00, 0x0D, 0x13, 0x13, 0x0D, 0x01, 0x01, 0x00],
    "r": [0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10, 0x00],
    "s": [0x00, 0x00, 0x0F, 0x10, 0x1E, 0x01, 0x1F, 0x00],
    "t": [0x08, 0x08, 0x1C, 0x08, 0x08, 0x09, 0x06, 0x00],
    "u": [0x00, 0x00, 0x12, 0x12, 0x12, 0x12, 0x0D, 0x00],
    "v": [0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00],
    "w": [0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0A, 0x00],
    "x": [0x00, 0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x00],
    "y": [0x00, 0x00, 0x11, 0x11, 0x13, 0x0D, 0x01, 0x0E],
    "z": [0x00, 0x00, 0x1F, 0x02, 0x04, 0x08, 0x1F, 0x00],

    //misc.
    euro: [0x0e, 0x10, 0x7c, 0x20, 0x7c, 0x20, 0x10, 0x0e],
    cent: [0x00, 0x3c, 0x42, 0x40, 0x40, 0x52, 0x3c, 0x20],

    //emojis + objects
    angryface: [0x00, 0x66, 0x66, 0x00, 0x18, 0x24, 0x42, 0x81],
    circle: [0x3c, 0x42, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3c],
    cdot: [0x3c, 0x42, 0x81, 0x99, 0x99, 0x81, 0x42, 0x3c],
    donut: [0x3c, 0x7e, 0xff, 0xe7, 0xe7, 0xff, 0x7e, 0x3c],
    equality: [0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00],
    ball: [0x3c, 0x7e, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c],
    thinsquare: [0xff, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xff],
    thicksquare: [0xff, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xff],
    centeredsquare1: [0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00],
    centeredsquare2: [0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00],
    arrowright: [0x00, 0x04, 0x06, 0xff, 0xff, 0x06, 0x04, 0x00],
    arrowleft: [0x00, 0x20, 0x60, 0xff, 0xff, 0x60, 0x20, 0x00],
    note: [0x04, 0x06, 0x07, 0x04, 0x3c, 0x7c, 0x7c, 0x38],
    clock: [0x3c, 0x52, 0x91, 0x91, 0x8f, 0x81, 0x42, 0x3c],
    heartoutline: [0x66, 0x99, 0x81, 0x81, 0x42, 0x24, 0x18, 0x00],
    heartfull: [0x66, 0xff, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00],
    thincheck: [0x00, 0x00, 0x01, 0x02, 0x04, 0x88, 0x50, 0x20],
    thickcheck: [0x00, 0x01, 0x03, 0x06, 0x8c, 0xd8, 0x70, 0x20],
    speaker: [0x03, 0x07, 0x3f, 0x3f, 0x3f, 0x3f, 0x07, 0x03],
    sound: [0x00, 0x40, 0x80, 0x00, 0xc0, 0x00, 0x80, 0x40],
    xbig: [0xc3, 0xe7, 0x7e, 0x3c, 0x3c, 0x7e, 0xe7, 0xc3],
    target: [0x3c, 0x7e, 0xc3, 0xdb, 0xdb, 0xc3, 0x7e, 0x3c],
    bell: [0x18, 0x3c, 0x3c, 0x3c, 0x3c, 0x7e, 0x00, 0x18],
    smile: [0x00, 0x66, 0x66, 0x00, 0x00, 0x81, 0x42, 0x3c],
    frown: [0x00, 0x66, 0x66, 0x00, 0x00, 0x3c, 0x42, 0x81],
    winkright: [0x00, 0x60, 0x66, 0x00, 0x00, 0x81, 0x42, 0x3c],
    winkleft: [0x00, 0x06, 0x66, 0x00, 0x00, 0x81, 0x42, 0x3c],
    blink: [0x00, 0x00, 0x66, 0x00, 0x00, 0x81, 0x42, 0x3c],
    laughing: [0x00, 0x66, 0x66, 0x00, 0xff, 0x81, 0x42, 0x3c],
    tongueout: [0x00, 0x66, 0x66, 0x00, 0x00, 0x7e, 0x0a, 0x04],
    expressionless: [0x00, 0x66, 0x66, 0x00, 0x00, 0xff, 0x00, 0x00],

    //patterns
    ascprogress1: [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80],
    ascprogress2: [0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0],
    ascprogress3: [0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0],
    ascprogress4: [0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0],
    ascprogress5: [0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8],
    ascprogress6: [0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc],
    ascprogress7: [0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe],
    fullprogress: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
    descprogress1: [0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f],
    descprogress2: [0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f],
    descprogress3: [0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f],
    descprogress4: [0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f],
    descprogress5: [0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07],
    descprogress6: [0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03],
    descprogress7: [0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01],
    ascchart1: [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    ascchart2: [0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    ascchart3: [0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00],
    ascchart4: [0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00],
    ascchart5: [0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00],
    ascchart6: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
    ascchart7: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00],
    ascchart8: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
    descchart1: [0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
    descchart2: [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
    descchart3: [0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff],
    descchart4: [0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff],
    descchart5: [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff],
    descchart6: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff],
    descchart7: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],
    descchart8: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    borderleft1: [0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01],
    borderleft2: [0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03],
    borderleft3: [0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x07],
    borderleft4: [0x0f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0f],
    borderleft5: [0x1f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f],
    borderleft6: [0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f],
    borderleft7: [0x7f, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7f],
    borderleft8: [0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff],
    bordertopbottom5: [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],
    borderright1: [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80],
    borderright2: [0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0],
    borderright3: [0xe0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe0],
    borderright4: [0xf0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xf0],
    borderright5: [0xf8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xf8],
    borderright6: [0xfc, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0xfc],
    borderright7: [0xfe, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xfe],
    borderright8: [0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xff],
    box1: [0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00],
    box2: [0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00],
    box3: [0xe7, 0xe7, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00],
    box4: [0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07],
    box5: [0x07, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x07],
    box6: [0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x07, 0x07, 0x07],
    box7: [0xe7, 0xe7, 0xe7, 0x00, 0x00, 0x07, 0x07, 0x07],
    box8: [0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0],
    box9: [0x07, 0x07, 0x07, 0x00, 0x00, 0xe0, 0xe0, 0xe0],
    box10: [0xe0, 0xe0, 0xe0, 0x00, 0x00, 0xe0, 0xe0, 0xe0],
    box11: [0xe7, 0xe7, 0xe7, 0x00, 0x00, 0xe0, 0xe0, 0xe0],
    box12: [0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0xe7, 0xe7],
    box13: [0x07, 0x07, 0x07, 0x00, 0x00, 0xe7, 0xe7, 0xe7],
    box14: [0xe0, 0xe0, 0xe0, 0x00, 0x00, 0xe7, 0xe7, 0xe7],
    box15: [0xe7, 0xe7, 0xe7, 0x00, 0x00, 0xe7, 0xe7, 0xe7],
    checkerboard1: [0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55],
    checkerboard2: [0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa],
    checkerboard3: [0x5d, 0xea, 0x57, 0xba, 0x55, 0xee, 0x55, 0xbb],
    checkerboard4: [0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0xcc],
    checkerboard5: [0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33],
    checkerboard6: [0x33, 0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33],
    checkerboard7: [0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc],
    pointerright: [0x20, 0x30, 0x38, 0x3c, 0x3c, 0x38, 0x30, 0x20],
    pointerup: [0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0x00, 0x00],
    pointerleft: [0x04, 0x0c, 0x1c, 0x3c, 0x3c, 0x1c, 0x0c, 0x04],
    pointerdown: [0x00, 0x00, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00],
    arrowne: [0x00, 0x3e, 0x06, 0x0a, 0x12, 0x22, 0x40, 0x80],
    arrownw: [0x00, 0x7c, 0x60, 0x50, 0x48, 0x44, 0x02, 0x01],
    arrowsw: [0x01, 0x02, 0x44, 0x48, 0x50, 0x60, 0x7c, 0x00],
    arrowse: [0x80, 0x40, 0x22, 0x12, 0x0a, 0x06, 0x3e, 0x00],
    dice1: [0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00],
    dice2: [0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03],
    dice3: [0xc0, 0xc0, 0x00, 0x18, 0x18, 0x00, 0x03, 0x03],
    dice4: [0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3],
    dice5: [0xc3, 0xc3, 0x00, 0x18, 0x18, 0x00, 0xc3, 0xc3],
    dice6: [0xc3, 0xc3, 0x00, 0xc3, 0xc3, 0x00, 0xc3, 0xc3],
    outlinedplus1: [0x3c, 0x24, 0xe7, 0x81, 0x81, 0xe7, 0x24, 0x3c],
    outlinedplus2: [0xff, 0xe7, 0xe7, 0x81, 0x81, 0xe7, 0xe7, 0xff],
    twoboxes1: [0xf0, 0x90, 0x90, 0xf0, 0x0f, 0x09, 0x09, 0x0f],
    twoboxes2: [0xf0, 0x90, 0x90, 0xfe, 0x12, 0x12, 0x1e, 0x00],
    twoboxes3: [0xf0, 0x90, 0xbc, 0xf4, 0x24, 0x3c, 0x00, 0x00],
    twoboxes4: [0xf0, 0xf8, 0xd8, 0xf8, 0x78, 0x00, 0x00, 0x00],
    twoboxes5: [0x0f, 0x09, 0x09, 0x0f, 0xf0, 0x90, 0x90, 0xf0],
    fourboxes: [0xff, 0x99, 0x99, 0xff, 0xff, 0x99, 0x99, 0xff],
    chain1: [0xf0, 0xf8, 0xd8, 0xf8, 0x78, 0x00, 0x00, 0x00],
    chain2: [0xf0, 0x90, 0xbc, 0xf4, 0x2f, 0x3d, 0x09, 0x0f],
  },

  SPECIAL_CHARS: {
    //thicker numbers
    "0": [0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c],
    "1": [0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18],
    "2": [0x3c, 0x66, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x7e],
    "3": [0x3c, 0x66, 0x06, 0x1c, 0x06, 0x06, 0x66, 0x3c],
    "4": [0x0e, 0x1e, 0x36, 0x66, 0x66, 0x7e, 0x06, 0x06],
    "5": [0x7e, 0x60, 0x60, 0x7c, 0x06, 0x06, 0x66, 0x3c],
    "6": [0x3c, 0x66, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x3c],
    "7": [0x7e, 0x7e, 0x06, 0x0c, 0x18, 0x18, 0x18, 0x18],
    "8": [0x3c, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x66, 0x3c],
    "9": [0x3c, 0x66, 0x66, 0x3e, 0x06, 0x06, 0x66, 0x3c],

    //Jory's double digits
    "10": [0x5e, 0x52, 0x52, 0x52, 0x52, 0x5e, 0x00, 0xff],
    "11": [0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0xff],
    "12": [0x5e, 0x42, 0x44, 0x48, 0x50, 0x5e, 0x00, 0xff],
    "13": [0x5e, 0x42, 0x4e, 0x42, 0x42, 0x5e, 0x00, 0xff],
    "14": [0x52, 0x52, 0x5e, 0x42, 0x42, 0x42, 0x00, 0xff],
    "15": [0x5e, 0x50, 0x5e, 0x42, 0x42, 0x5e, 0x00, 0xff],
    "16": [0x5e, 0x50, 0x5e, 0x52, 0x52, 0x5e, 0x00, 0xff],
    "17": [0x5e, 0x42, 0x44, 0x48, 0x48, 0x48, 0x00, 0xff],
    "18": [0x5e, 0x52, 0x5e, 0x52, 0x52, 0x5e, 0x00, 0xff],
    "19": [0x5e, 0x52, 0x5e, 0x42, 0x42, 0x5e, 0x00, 0xff],
  },

  // https://codepen.io/rwaldron/full/KKPERKe
  DIGIT_CHARS: {
    "0": 0x7E,
    "1": 0x30,
    "2": 0x6D,
    "3": 0x79,
    "4": 0x33,
    "5": 0x5B,
    "6": 0x5F,
    "7": 0x70,
    "8": 0x7F,
    "9": 0x7B,
    " ": 0x00,
    ".": 0x80,
    ":": 0xFF,
    "!": 0xB0,
    "A": 0x77,
    "a": 0x7D,
    "B": 0x7F,
    "b": 0x1F,
    "C": 0x4E,
    "c": 0x0D,
    "D": 0x7E,
    "d": 0x3D,
    "E": 0x4F,
    "e": 0x6f,
    "F": 0x47,
    "f": 0x47,
    "G": 0x5E,
    "g": 0x7B,
    "H": 0x37,
    "h": 0x17,
    "I": 0x30,
    "i": 0x10,
    "J": 0x3C,
    "j": 0x38,
    "K": 0x37,
    "k": 0x17,
    "L": 0x0E,
    "l": 0x06,
    "M": 0x55,
    "m": 0x55,
    "N": 0x15,
    "n": 0x15,
    "O": 0x7E,
    "o": 0x1D,
    "P": 0x67,
    "p": 0x67,
    "Q": 0x73,
    "q": 0x73,
    "R": 0x77,
    "r": 0x05,
    "S": 0x5B,
    "s": 0x5B,
    "T": 0x46,
    "t": 0x0F,
    "U": 0x3E,
    "u": 0x1C,
    "V": 0x27,
    "v": 0x23,
    "W": 0x3F,
    "w": 0x2B,
    "X": 0x25,
    "x": 0x25,
    "Y": 0x3B,
    "y": 0x33,
    "Z": 0x6D,
    "z": 0x6D,
  }
};

/*
  About the original version of ledcontrol.js:

  This was originally a port by Rebecca Murphey of the LedControl library
  and also includes a port of the AdaFruit LEDBackpack library
  (MIT License, Copyright (c) 2012 Adafruit Industries)

  The license of the original LedControl library is as follows:

  LedControl.cpp - A library for controling Leds with a MAX7219/MAX7221
  Copyright (c) 2007 Eberhard Fahle

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation
  files (the "Software"), to deal in the Software without
  restriction, including without limitation the rights to use,
  copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following
  conditions:

  This permission notice shall be included in all copies or
  substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.

 */

const Board$d = requireBoard();
const ledCharacters = ledChars;

// Led instance private data
const priv$c = new Map();


/**
 * Create an LED control.
 * @mixes Board.Component
 * @param {Object}  options              An options hash.
 * @param {String}  [options.controller] The controller to use. Either default ("MAX 7219") or "HT16K33".
 * @param {Boolean} [options.colon]      Whether the device has a built in colon.
 * @param {Number}  [options.devices]    The number of connected LED devices.
 * @param {Array}   [options.addresses]  I2C addresses.
 * @param {*}       options.pins         The digital pin numbers that connect to
 *                                    data, clock, and cs connections on the controller device.
 *                                    Only for use with the default controller.
 *                                    Accepts either an object ({data, clock, cs})
 *                                    or an array ([data, clock, cs]).
 * @param {*}       [options.dims]       Dimensions of the LED screen.
 *                                    Only for use with the HT16K33 controller.
 * @param {Boolean} [options.isBicolor]  Whether the LED screen is bicolor.
 *                                    Only for use with the HT16K33 controller.
 */
let LedControl$2 = class LedControl {
  constructor(options) {

    Board$d.Component.call(
      this, options = Board$d.Options(options)
    );

    Board$d.Controller.call(
      this, Controllers$9, options
    );

    // digit indexes may be ordered left to right (1) or reversed (-1)
    this.digitOrder = 1;

    // Does the device have a built-in colon?
    /* istanbul ignore else */
    if (!this.isMatrix) {
      this.colon = options.colon || false;
    }

    // extra functions for HT16K33 devices only
    // if (controller.writeDisplay) {
    //   this.writeDisplay = controller.writeDisplay;
    // }
    // if (controller.blink) {
    //   this.blink = controller.blink;
    // }
    /*
      devices variable indicates number of connected LED devices
      Here's an example of multiple devices:
      http://tronixstuff.com/2013/10/11/tutorial-arduino-max7219-led-display-driver-ic/
     */
    const devices = options.devices || (options.addresses ? options.addresses.length : 1);

    this.memory = Array(64).fill(0);

    options.dims = options.dims || LedControl.MATRIX_DIMENSIONS["8x8"];
    if (typeof options.dims === "string") {
      options.dims = LedControl.MATRIX_DIMENSIONS[options.dims];
    }
    if (Array.isArray(options.dims)) {
      options.dims = {
        rows: options.dims[0],
        columns: options.dims[1],
      };
    }
    const state = {
      devices,
      digits: options.digits || 8,
      isMatrix: !!options.isMatrix,
      isBicolor: !!options.isBicolor,
      rows: options.dims.rows,
      columns: options.dims.columns
    };

    if (!(state.columns === 8 || state.columns === 16) || !(state.rows === 8 || state.rows === 16) || (state.columns + state.rows === 32)) {
      throw new Error("Invalid matrix dimensions specified: must be 8x8, 16x8 or 8x16");
    }

    Object.defineProperties(this, {
      devices: {
        get() {
          return state.devices;
        }
      },
      digits: {
        get() {
          return state.digits;
        }
      },
      isMatrix: {
        get() {
          return state.isMatrix;
        }
      },
      isBicolor: {
        get() {
          return state.isBicolor;
        }
      },
      rows: {
        get() {
          return state.rows;
        }
      },
      columns: {
        get() {
          return state.columns;
        }
      }
    });

    priv$c.set(this, state);
    this.initialize(options);
  }

  /**
   * Iterate over the index of each connected device and invoke a callback function
   * for each.
   * @param {Function} callbackfn The function to callback for each device index.
   */
  each(callbackfn) {
    for (let i = 0; i < this.devices; i++) {
      callbackfn.call(this, i);
    }
  }

  /**
   * Turn the LED device(s) on.
   * @param  {Number} addr The index of the device to turn on.
   *                       If undefined, all devices are turned on.
   * @return {LEDControl}  Returns this to allow for chaining.
   */
  on(addr) {
    if (typeof addr === "undefined") {
      this.each(function(device) {
        this.on(device);
      });
    } else {
      this.send(addr, this.OP.SHUTDOWN || LedControl.OP.SHUTDOWN, 1);
    }
    return this;
  }

  /**
   * Turn the LED device(s) off.
   * @param  {Number} addr The index of the device to turn off.
   *                       If undefined, all devices are turned off.
   * @return {LEDControl}  Returns this to allow for chaining.
   */
  off(addr) {
    if (typeof addr === "undefined") {
      this.each(function(device) {
        this.off(device);
      });
    } else {
      this.send(addr, this.OP.SHUTDOWN || LedControl.OP.SHUTDOWN, 0);
    }
    return this;
  }

  /**
   * digit Display a digit and optional decimal point.
   * @param  {Number} addr      Device address
   * @param  {Number} position  0-7
   * @param  {String} val       0-9[.]
   * @return {LedControl}
   */
  digit(addr, position, chr) {
    let args;
    let offset;
    let index;
    let character;
    let value;
    let hasDecimal = false;

    if (arguments.length < 3) {
      args = Array.from(arguments);
      this.each(function(device) {
        this.digit.apply(this, (args.unshift(device), args));
      });
      return this;
    }

    if (this.isMatrix) {
      // Not sure this is the best path, will check when segment
      // devices are available.
      this.draw.apply(this, arguments);
      return this;
    }

    offset = addr * this.digits;

    character = String(chr);
    position = Number(position);

    // If controller's indexes are ordered right to left, flip
    // the index around.
    index = position;
    if (this.digitOrder === -1) {
      index = this.digits - index - 1;
    }

    if (character.length === 2 && character[1] === ".") {
      hasDecimal = true;
      character = character[0];
    }

    value = LedControl.DIGIT_CHARS[character];

    if (!value) {
      value = Math.abs(Number(character));
    }

    if (hasDecimal) {
      value = value | LedControl.DIGIT_CHARS["."];
    }

    this.memory[offset + index] = value;
    this.sendDigit(addr, index, value);
    return this;
  }

  /**
   * print Print series of characters to the display.
   * @param  {String} message One or more characters to be displayed.
   * @param  {Object} options    (Optional) Options specifying:
   *                          - device: {Number} Device address
   * @return {LedControl}
   */
  print(message, options) {
    const rdigchars = /([0-9A-Za-z][.]|[0-9A-Za-z:]|[\s])/g;
    let characters;

    options = options || {
      device: 0
    };

    if (this.isMatrix) {
      // figure out what to do with Matrix displays
      throw new Error("Led.Matrix does not yet support the print method");
    }

    if (typeof message !== "string") {
      message = String(message);
    }

    characters = message.match(rdigchars);

    // When a device has a built-in colon, ie. "00:00",
    // then attempt to make it less awkward to print words across
    // the display by splicing in a " " placeholder, but only
    // when necessary.
    if (this.colon) {
      if (characters.length > 2 &&
        (characters[2] !== ":" && characters[2] !== " ")) {
        characters.splice(2, 0, " ");
      }
    }

    /* istanbul ignore next */
    (characters || []).forEach(function(character, position) {
      this.digit(options.device, position, character);
    }, this);
    return this;
  }

  /*
   * brightness
   * @param {Number} addr Address of Led device
   * @param {Number} val Brightness value
   */
  brightness(addr, val) {
    if (arguments.length === 1) {
      val = addr;
      this.each(function(device) {
        this.brightness(device, val);
      });
    } else {
      this.send(addr, this.OP.BRIGHTNESS || LedControl.OP.BRIGHTNESS, Board$d.map(val, 0, 100, 0, 15));
    }
    return this;
  }

  /**
   * column Update an entire column with an 8 or 16 bit value
   * @param  {Number} addr Device address
   * @param  {Number} col  0 indexed col number 0-7
   * @param  {Number} val  8-bit 0-0xFF (for 8x8 or 16x8 matrix) or 16-bit 0-0xFFFF (for 8x16) value
   * @return {LedControl}
   */
  column(addr, col, value) {
    let state;
    if (!this.isMatrix) {
      throw new Error("The `column` method is only supported for Matrix devices");
    }
    if (arguments.length === 2) {
      value = col;
      col = addr;
      this.each(function(device) {
        this.column(device, col, value);
      });
    } else {
      for (let row = 0; row < this.rows; row++) {
        state = value >> ((this.rows - 1) - row);
        state = state & 0x01;
        this.led(addr, row, col, state);
      }
    }

    return this;
  }

  /**
   * draw Draw a character
   * @param  {Number} addr  Device address
   * @param  {Number} chr   Character to draw
   *
   * Used as pass-through to .digit
   *
   * @param  {Number} val   8-bit value 0-255
   * @param  {Number} dp    ugly
   * @return {LedControl}
   */
  draw(addr, chr) {
    // in matrix mode, this takes two arguments:
    // addr and the character to display
    let character;

    if (arguments.length === 1) {
      chr = addr;
      this.each(function(device) {
        this.draw(device, chr);
      });
    } else {

      if (this.isMatrix) {
        if (Array.isArray(chr)) {
          character = chr;
        } else {
          character = ledCharacters.MATRIX_CHARS[chr];
        }

        /* istanbul ignore else */
        if (character !== undefined) {
          if (character.length !== this.rows && character.length !== this.columns) {
            throw new Error(`Invalid character: ${character}`);
          }
          // pad character to match number of rows suppported by device
          const charLength = character.length;

          for (let i = 0; i < (this.rows - charLength); i++) {
            /* istanbul ignore next */
            character.push(0);
          }

          character.forEach(function(rowData, idx) {
            this.row(addr, idx, rowData);
          }, this);
        }
      } else {

        // in seven-segment mode, this takes four arguments, which
        // are just passed through to digit
        this.digit.apply(this, arguments);
      }
    }

    return this;
  }

  device(addr) {
    const bound = {};

    /* keys from prototype */
    Object.keys(LedControl.prototype).forEach(key => {
      bound[key] = this[key].bind(this, addr);
    });

    /* functions from interface */
    Object.getOwnPropertyNames(this).forEach(key => {
      if (this[key] && typeof this[key] === "function") {
        bound[key] = this[key].bind(this, addr);
      }
    });
    return bound;
  }
};

let addresses = new Set([0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77]);

const Controllers$9 = {
  HT16K33: {
    OP: {
      value: {
        SHUTDOWN: 0x20,
        BRIGHTNESS: 0xE0,
        BLINK: 0x80
      }
    },
    initialize: {
      writable: true,
      value(options) {
        const state = priv$c.get(this);
        const available = Array.from(addresses);

        if (available.length === 0) {
          throw new Error("There are no available HT16K33 controller addresses");
        }

        this.addresses = options.addresses || (options.address ? [options.address] : null);

        // use default range of addresses if addresses aren't specified
        if (this.addresses === null) {
          this.addresses = available.slice(0, state.devices);
        }

        this.addresses.forEach(address => {
          if (!addresses.has(address)) {
            throw new Error(`Invalid HT16K33 controller address: ${address}`);
          }
          addresses.delete(address);
        });

        this.rotation = options.rotation || 1;
        // set a default rotation that works with AdaFruit 16x8 matrix if using 16 columns
        /* istanbul ignore next */
        if (this.columns === 16 && !options.rotation) {
          this.rotation = 0;
        }
        this.buffer = Array(this.rows).fill([]);

        if (!this.isMatrix) {
          this.colon = true;
        }

        options.addresses = this.addresses;

        // Set up I2C data connection
        this.io.i2cConfig(options);
        // TODO allow setup to be configured through options
        this.each(function(device) {
          this.on(device);
          // Turn off blinking during initialization, in case it was left on.
          this.blink(device, false);
          this.brightness(device, 100);
          this.clear(device);
        });
      },
    },
    /**
     * Blink the screen.
     *
     * @param  {*} addr      Either the index of the device to blink,
     *                       or the blink value to apply to all devices.
     * @param  {String} val  The blink value. Either 'slow' (once every 2 seconds),
     *                       'normal' (once every second), 'fast' (once every 500ms),
     *                       or false to turn off blinking.
     * @return {LedControl}  Returns this to allow for chaining.
     */
    blink: {
      writable: true,
      value(addr, val) {
        if (arguments.length === 1) {
          val = addr;
          this.each(function(device) {
            this.blink(device, val);
          });
        } else {
          let _val = null;
          // Translate human-readable value to value expected by HT16K33, see datasheet.
          switch (val) {
            case false:
              _val = 0;
              break;
            case "slow":
              _val = 6;
              break;
            case "normal":
              _val = 4;
              break;
            case "fast":
              _val = 2;
              break;
          }
          /* istanbul ignore if */
          if (_val == null) {
            return;
          }
          // Add 1 to the opcode to turn blinking functionality on, see datasheet.
          this.send(addr, this.OP.BLINK | 1, _val);
        }
        return this;
      },
    },
    /*
     * clear
     * @param {Number} addr Address of Led device
     */
    clear: {
      writable: true,
      value(addr) {
        let offset;
        if (typeof addr === "undefined") {
          this.each(function(device) {
            this.clear(device);
          });
        } else {
          offset = addr * this.columns;

          for (let i = 0; i < this.rows; i++) {
            this.memory[offset + i] = 0;
            this.buffer[addr][i] = 0;
          }
          this.writeDisplay(addr);
        }
        return this;
      },
    },
    /**
     * led or setLed Set the memory of a single Led.
     *
     * @param {Number} addr Address of Led
     * @param {Number} row Row number of Led (0-7)
     * @param {Number} column Column number of Led (0-7)
     * @param {Boolean} state [ true: on, false: off ] [ 1, 0 ] or an LedControl color code
     *
     */
    led: {
      writable: true,
      value(addr, row, col, state) {

        if (arguments.length === 3) {
          state = col;
          col = row;
          row = addr;
          this.each(function(device) {
            this.led(device, row, col, state);
          });
          return this;
        } else {
          let x = col;
          let y = row;
          let tmp;
          let rows = this.rows;
          let columns = this.columns;
          if ((y < 0) || (y >= rows)) {
            return this;
          }
          if ((x < 0) || (x >= columns)) {
            return this;
          }
          switch (this.rotation) {
            case 1:
              columns = this.rows;
              rows = this.columns;
              tmp = x;
              x = y;
              y = tmp;
              x = columns - x - 1;
              break;
            case 2:
              x = columns - x - 1;
              y = rows - y - 1;
              break;
            case 3:
              columns = this.rows;
              rows = this.columns;
              tmp = x;
              x = y;
              y = tmp;
              y = rows - y - 1;
              break;
          }
          if (!this.isBicolor) {
            // x needs to be wrapped around for single color 8x8 AdaFruit matrix
            /* istanbul ignore else */
            if (columns === 8 && rows === 8) {
              x += columns - 1;
              x %= columns;
            }
            if (state) {
              this.buffer[addr][y] |= 1 << x;
            } else {
              this.buffer[addr][y] &= ~(1 << x);
            }
          } else {
            // 8x8 bi-color matrixes only
            if (state === LedControl$2.COLORS.GREEN) {
              // Turn on green LED.
              this.buffer[addr][y] |= 1 << x;
              // Turn off red LED.
              this.buffer[addr][y] &= ~(1 << (x + 8));
            } else if (state === LedControl$2.COLORS.YELLOW) {
              // Turn on green and red LED.
              this.buffer[addr][y] |= (1 << (x + 8)) | (1 << x);
            } else if (state === LedControl$2.COLORS.RED) {
              // Turn on red LED.
              this.buffer[addr][y] |= 1 << (x + 8);
              // Turn off green LED.
              this.buffer[addr][y] &= ~(1 << x);
            } else {
              // Turn off green and red LED.
              this.buffer[addr][y] &= ~(1 << x) & ~(1 << (x + 8));
            }
          }
          this.writeDisplay(addr);
        }
        return this;
      }
    },
    writeDisplay: {
      writable: true,
      value(addr) {
        const bytes = [0x00];
        // always writes 8 rows (for 8x16, the values have already been rotated)
        for (let i = 0; i < 8; i++) {
          bytes.push(this.buffer[addr][i] & 0xFF);
          bytes.push(this.buffer[addr][i] >> 8);
        }
        this.io.i2cWrite(this.addresses[addr], bytes);
      },
    },
    /**
     * row Update an entire row with an 8 bit value
     * @param  {Number} addr Device address
     * @param  {Number} row  0 indexed row number 0-7
     * @param  {Number} val  8-bit value 0-255
     * @return {LedControl}
     */
    row: {
      writable: true,
      value(addr, row, val /* 0 - 0xFFFF or string */) {
        if (!this.isMatrix) {
          throw new Error("The `row` method is only supported for Matrix devices");
        }
        if (typeof val === "number") {
          val = (`0000000000000000${parseInt(val, 10).toString(2)}`).substr(0 - (this.columns), this.columns);
        }
        if (arguments.length === 2) {
          val = row;
          row = addr;
          this.each(function(device) {
            this.row(device, row, val);
          });
        } else {

          // call the led function because the handling of rotation
          // and wrapping for monochrome matrixes is done there
          for (let i = 0; i < this.columns; i++) {
            this.led(addr, row, i, parseInt(val[i], 10));
          }
        }

        return this;
      }
    },

    scanLimit: {
      writable: true,
      value() {
        throw new Error("The `scanLimit` method is not implemented for HT16K33 devices");
      }
    },

    /*
     * Send data to the LED controller.
     * @param {Number} addr   Index of the device to address.
     * @param {Number} opcode Operation code.
     * @param {Number} data   Data.
     */
    send: {
      writable: true,
      value(addr, opcode, data) {
        if (arguments.length !== 3) {
          throw new Error("The `send` method expects three arguments: device, opcode, data");
        }
        this.io.i2cWrite(this.addresses[addr], [opcode | data]);
        return this;
      }
    },

    /**
     * sendDigit
     * @param  {Number} addr     Device address.
     * @param  {Number} index    0-7
     * @param  {Number} code     8-bit value 0-255
     * @return {LedControl}
     */
    sendDigit: {
      writable: true,
      value(addr, index, code) {
        // Given:
        //
        //   0 === 0b00000000
        // 255 === 0b11111111
        //
        // ...0 & 255 can be skipped.
        //
        if (code > 0 && code < 255) {
          // Convert from hex to binary, padded to 8 bits.
          code = (`00000000${code.toString(2)}`).slice(-8).split("");
          // Reverse bits for each display segment except the decimal,
          // to match the HT16K33 controller's segment ordering.
          code = code.shift() + code.reverse().join("");
          code = parseInt(code, 2);
        }

        // Convert to decimal and write to the display.
        this.buffer[addr][index] = code;
        this.writeDisplay(addr);
        return this;
      },
    }
  },

  DEFAULT: {
    OP: {
      value: {},
    },
    initialize: {
      writable: true,
      value({pins}) {

        this.pins = {
          data: pins.data,
          clock: pins.clock,
          cs: pins.cs || pins.latch
        };
        ["data", "clock", "cs"].forEach(function(pin) {
          this.io.pinMode(this.pins[pin], this.io.MODES.OUTPUT);
        }, this);
        // NOTE: Currently unused, these will form
        // the basis for the `setup` constructor option
        // var setup = Object.assign({}, LedControl.DEFAULTS, options.setup || {});
        // var keys = Object.keys(setup);

        // digit indexes ordered right to left.
        this.digitOrder = -1;
        this.digitOrder = -1;

        for (let device = 0; device < this.devices; device++) {
          /*
            TODO: Add support for custom initialization

            An example of initialization, added to the constructor options:

              setup: {
                // OPCODE: VALUE
                DECODING: 0,
                BRIGHTNESS: 3,
                SCANLIMIT: 7,
                SHUTDOWN: 1,
                DISPLAYTEST: 1
              },


            In context:

              var lc = new five.LedControl({
                pins: {
                  data: 2,
                  clock: 3,
                  cs: 4
                },
                setup: {
                  DECODING: 0,
                  BRIGHTNESS: 3,
                  SCANLIMIT: 7,
                  SHUTDOWN: 1,
                  DISPLAYTEST: 1
                },
                isMatrix: true
              });


            The custom initializers are invoked as:

              keys.forEach(function(key) {
                this.send(device, LedControl.OP[key], setup[key]);
              }, this);


            I might be missing something obvious, but this isn't working.
            Using the same options shown below, the above should behave exactly the
            same way that the code below does, but that's not the case. The result is
            all leds in the matrix are lit and none can be cleared.
            */
          if (this.isMatrix) {
            this.send(device, LedControl$2.OP.DECODING, 0);
          }

          this.send(device, LedControl$2.OP.BRIGHTNESS, 3);
          this.send(device, LedControl$2.OP.SCANLIMIT, 7);
          this.send(device, LedControl$2.OP.SHUTDOWN, 1);
          this.send(device, LedControl$2.OP.DISPLAYTEST, 0);

          this.clear(device);
          this.on(device);
        }
        return this;
      }
    },
    clear: {
      writable: true,
      value(addr) {
        let offset;

        if (typeof addr === "undefined") {
          this.each(function(device) {
            this.clear(device);
          });
        } else {
          offset = addr * 8;

          for (let i = 0; i < 8; i++) {
            this.memory[offset + i] = 0;
            this.send(addr, i + 1, 0);
          }
        }
        return this;
      }
    },

    /**
     * sendDigit
     * @param  {Number} addr     Device address.
     * @param  {Number} index    0-7
     * @param  {Number} code     8-bit value 0-255
     * @return {LedControl}
     */
    sendDigit: {
      writable: true,
      value(addr, index, code) {
        this.send(addr, index + 1, code);
        return this;
      }
    },

    /**
     * led or setLed Set the memory of a single Led.
     *
     * @param {Number} addr Address of Led
     * @param {Number} row Row number of Led (0-7)
     * @param {Number} column Column number of Led (0-7)
     * @param {Boolean} state [ true: on, false: off ] [ 1, 0 ]
     *
     */
    led: {
      writable: true,
      value(addr, row, col, state) {
        let offset;
        let val;

        if (arguments.length === 3) {
          state = col;
          col = row;
          row = addr;
          this.each(function(device) {
            this.led(device, row, col, state);
          });
        } else {
          offset = addr * this.columns;
          val = 0x80 >> col;

          if (state) {
            this.memory[offset + row] = this.memory[offset + row] | val;
          } else {
            val = ~val;
            this.memory[offset + row] = this.memory[offset + row] & val;
          }
          this.send(addr, row + 1, this.memory[offset + row]);
        }

        return this;
      }
    },

    /**
     * row Update an entire row with an 8 bit value
     * @param  {Number} addr Device address
     * @param  {Number} row  0 indexed row number 0-7
     * @param  {Number} val  8-bit value 0-255
     * @return {LedControl}
     */
    row: {
      writable: true,
      value(addr, row, val /* 0 - 255 or string */) {
        if (!this.isMatrix) {
          throw new Error("The `row` method is only supported for Matrix devices");
        }
        let offset;
        if (typeof val === "string") {
          val = parseInt(val, 2);
        }
        if (arguments.length === 2) {
          val = row;
          row = addr;
          this.each(function(device) {
            this.row(device, row, val);
          });
        } else {
          offset = addr * this.columns;
          this.memory[offset + row] = val;
          this.send(addr, row + 1, this.memory[offset + row]);
        }

        return this;
      }
    },
    /*
     * scanLimit (function from interface)
     * @param {Number} addr Address of Led device
     * @param {Number} limit
     */
    scanLimit: {
      writable: true,
      value(addr, limit) {
        if (arguments.length === 1) {
          limit = addr;
          this.each(function(device) {
            this.scanLimit(device, limit);
          });
        } else {
          this.send(addr, LedControl$2.OP.SCANLIMIT, limit);
        }
        return this;
      }
    },
    send: {
      writable: true,
      value(addr, opcode, data) {
        if (arguments.length !== 3) {
          throw new Error("`send` expects three arguments: device, opcode, data");
        }
        const offset = addr * 2;
        const maxBytes = this.devices * 2;
        const spiData = [];

        if (addr < this.devices) {
          for (let i = 0; i < maxBytes; i++) {
            spiData[i] = 0;
          }

          spiData[offset + 1] = opcode;
          spiData[offset] = data;

          this.io.digitalWrite(this.pins.cs, this.io.LOW);

          for (let j = maxBytes; j > 0; j--) {
            this.board.shiftOut(this.pins.data, this.pins.clock, spiData[j - 1]);
          }

          this.io.digitalWrite(this.pins.cs, this.io.HIGH);
        }

        return this;
      }
    }
  }
};

// NOTE: Currently unused, these will form
// the basis for the `setup` constructor option
LedControl$2.DEFAULTS = {
  DECODING: 0x00,
  BRIGHTNESS: 0x03,
  SCANLIMIT: 0x07,
  SHUTDOWN: 0x01,
  DISPLAYTEST: 0x00
};

Object.freeze(LedControl$2.DEFAULTS);

LedControl$2.OP = {};

LedControl$2.OP.NOOP = 0x00;

LedControl$2.OP.DIGIT0 = 0x01;
LedControl$2.OP.DIGIT1 = 0x02;
LedControl$2.OP.DIGIT2 = 0x03;
LedControl$2.OP.DIGIT3 = 0x04;
LedControl$2.OP.DIGIT4 = 0x05;
LedControl$2.OP.DIGIT5 = 0x06;
LedControl$2.OP.DIGIT6 = 0x07;
LedControl$2.OP.DIGIT7 = 0x08;

LedControl$2.OP.DECODEMODE = 0x09;
LedControl$2.OP.INTENSITY = 0x0a;
LedControl$2.OP.SCANLIMIT = 0x0b;
LedControl$2.OP.SHUTDOWN = 0x0c;
LedControl$2.OP.DISPLAYTEST = 0x0f;

// Aliases
LedControl$2.OP.BRIGHTNESS = LedControl$2.OP.INTENSITY;
LedControl$2.OP.DECODING = LedControl$2.OP.DECODEMODE;
LedControl$2.OP.DISPLAY = LedControl$2.OP.DISPLAYTEST;
LedControl$2.OP.POWERDOWN = LedControl$2.OP.SHUTDOWN;

Object.freeze(LedControl$2.OP);

LedControl$2.COLORS = {
  RED: 1,
  YELLOW: 2,
  GREEN: 3
};

LedControl$2.DIRECTIONS = {
  UP: 1,
  RIGHT: 2,
  DOWN: 3,
  LEFT: 4,
  1: "UP",
  2: "RIGHT",
  3: "DOWN",
  4: "LEFT",
};

Object.freeze(LedControl$2.DIRECTIONS);

// Double Digit Numbers
//
// Each digit:
//
// - is drawn as far to the left as possible.
// - uses 3 bits
//
const digits$1 = [
  [0xe0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xe0, 0x00],
  [0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00],
  [0xe0, 0x20, 0x20, 0xe0, 0x80, 0x80, 0xe0, 0x00],
  [0xe0, 0x20, 0x20, 0x60, 0x20, 0x20, 0xe0, 0x00],
  [0x20, 0x60, 0xa0, 0xe0, 0x20, 0x20, 0x20, 0x00],
  [0xe0, 0x80, 0x80, 0xe0, 0x20, 0x20, 0xe0, 0x00],
  [0xe0, 0x80, 0x80, 0xe0, 0xa0, 0xa0, 0xe0, 0x00],
  [0xe0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00],
  [0xe0, 0xa0, 0xa0, 0x40, 0xa0, 0xa0, 0xe0, 0x00],
  [0xe0, 0xa0, 0xa0, 0xe0, 0x20, 0x20, 0xe0, 0x00],
];

let charName = "";

for (let i = 0; i < 10; i++) {
  for (let k = 0; k < 10; k++) {
    charName = `${i}${k}`;
    ledCharacters.MATRIX_CHARS[charName] = [];

    for (let j = 0; j < 8; j++) {
      // Left digit takes 3 bits, plus 1 to between digits = 4 bits to the right.
      ledCharacters.MATRIX_CHARS[charName][j] = digits$1[i][j] | (digits$1[k][j] >>> 4);
    }
  }
}

LedControl$2.MATRIX_DIMENSIONS = {
  "16x8": {
    rows: 16,
    columns: 8
  },
  "8x16": {
    rows: 8,
    columns: 16
  },
  "8x8": {
    rows: 8,
    columns: 8
  }
};

LedControl$2.MATRIX_CHARS = ledCharacters.MATRIX_CHARS;
LedControl$2.DIGIT_CHARS = ledCharacters.DIGIT_CHARS;

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  LedControl$2.Controllers = Controllers$9;
  LedControl$2.purge = () => {
    addresses = new Set([0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77]);
    priv$c.clear();
  };
}
var ledcontrol = LedControl$2;

const LedControl$1 = ledcontrol;

class Matrix extends LedControl$1 {
  constructor(options) {
    options.isMatrix = true;
    super(options);
  }

  static get CHARS() {
    return LedControl$1.MATRIX_CHARS;
  }
}

var matrix$2 = Matrix;

const LedControl = ledcontrol;

class Digits extends LedControl {
  constructor(options) {
    options.isMatrix = false;
    super(options);
  }

  static get CHARS() {
    return LedControl.DIGIT_CHARS;
  }
}

var digits = Digits;

const Led$1 = led$1;
Led$1.Collection = leds;
Led$1.RGB = rgb;
Led$1.RGB.Collection = rgbs;
Led$1.Matrix = matrix$2;
Led$1.Digits = digits;

var led = Led$1;

const Board$c = requireBoard();
const EVS$2 = evshield;
const Withinable$2 = withinable;
const { uint16, toFixed: toFixed$1, scale } = fn;
const priv$b = new Map();

const Controllers$8 = {
  DEFAULT: {
    initialize: {
      value(options, callback) {
        this.io.pinMode(this.pin, this.io.MODES.ANALOG);
        this.io.analogRead(this.pin, callback);
      },
    },
    toIntensityLevel: {
      value(value) {
        return toFixed$1(scale(value, 0, 1023, 0, 100) / 100, 2);
      }
    }
  },
  EVS_EV3: {
    initialize: {
      value(options, callback) {
        const state = priv$b.get(this);

        if (options.mode) {
          options.mode = options.mode.toUpperCase();
        }

        state.mode = options.mode === "REFLECTED" ?
          EVS$2.Type_EV3_LIGHT_REFLECTED :
          EVS$2.Type_EV3_LIGHT;

        state.shield = EVS$2.shieldPort(options.pin);
        state.ev3 = new EVS$2(Object.assign(options, {
          io: this.io
        }));
        state.ev3.setup(state.shield, EVS$2.Type_EV3);
        state.ev3.write(state.shield, 0x81 + state.shield.offset, state.mode);
        state.ev3.read(state.shield, EVS$2.Light, EVS$2.Light_Bytes, data => {
          const value = data[0] | (data[1] << 8);
          callback(value);
        });
      }
    },
    toIntensityLevel: {
      value(value) {
        return toFixed$1(value / 100, 2);
      }
    }
  },
  EVS_NXT: {
    initialize: {
      value(options, callback) {
        const state = priv$b.get(this);

        if (options.mode) {
          options.mode = options.mode.toUpperCase();
        }

        state.mode = options.mode === "REFLECTED" ?
          EVS$2.Type_NXT_LIGHT_REFLECTED :
          EVS$2.Type_NXT_LIGHT;

        state.shield = EVS$2.shieldPort(options.pin);
        state.ev3 = new EVS$2(Object.assign(options, {
          io: this.io
        }));
        state.ev3.setup(state.shield, state.mode);
        state.ev3.read(state.shield, state.shield.analog, EVS$2.Analog_Bytes, data => {
          callback(data[0] | (data[1] << 8));
        });
      }
    },
    toIntensityLevel: {
      value(value) {
        return toFixed$1(scale(value, 0, 1023, 100, 0) / 100, 2);
      }
    }
  },

  TSL2561: {
    ADDRESSES: {
      value: [0x29, 0x39, 0x49]
    },
    REGISTER: {
      value: {
        CONTROL: 0x00,
        TIMING: 0x01,
        READ: 0x2C,
      },
    },

    initialize: {
      value(options, callback) {
        const command = byte => byte | 0b10000000;
        const { Drivers } = requireSip();
        const address = Drivers.addressResolver(this, options);

        this.io.i2cConfig(options);

        // Page 15
        // Control Register (0h)
        // RESV  7:2
        // POWER 1:0
        //
        // Power up/power down.
        // By writing a 03h to this register, the device is powered up.
        // By writing a 00h to this register, the device is powered down.
        //
        // 0b00000011 = 0x03
        // 0b00000000 = 0x00
        this.io.i2cWriteReg(address, command(this.REGISTER.CONTROL), 0x03);

        // Gain & Integration
        // var isAutoGain = false;

        // Page 24
        // Integration time scaling factors
        const LUX_SCALE = 14; // scale by (2 ** 14)
        const RATIO_SCALE = 9; // scale ratio by (2 ** 9)

        // Page 24
        // T, FN, and CL Package coefficients
        const K1T = 0x0040; // 0.125 * (2 ** RATIO_SCALE)
        const B1T = 0x01F2; // 0.0304 * (2 ** LUX_SCALE)
        const M1T = 0x01BE; // 0.0272 * (2 ** LUX_SCALE)
        const K2T = 0x0080; // 0.250 * (2 ** RATIO_SCALE)
        const B2T = 0x0214; // 0.0325 * (2 ** LUX_SCALE)
        const M2T = 0x02D1; // 0.0440 * (2 ** LUX_SCALE)
        const K3T = 0x00C0; // 0.375 * (2 ** RATIO_SCALE)
        const B3T = 0x023F; // 0.0351 * (2 ** LUX_SCALE)
        const M3T = 0x037B; // 0.0544 * (2 ** LUX_SCALE)
        const K4T = 0x0100; // 0.50 * (2 ** RATIO_SCALE)
        const B4T = 0x0270; // 0.0381 * (2 ** LUX_SCALE)
        const M4T = 0x03FE; // 0.0624 * (2 ** LUX_SCALE)
        const K5T = 0x0138; // 0.61 * (2 ** RATIO_SCALE)
        const B5T = 0x016F; // 0.0224 * (2 ** LUX_SCALE)
        const M5T = 0x01FC; // 0.0310 * (2 ** LUX_SCALE)
        const K6T = 0x019A; // 0.80 * (2 ** RATIO_SCALE)
        const B6T = 0x00D2; // 0.0128 * (2 ** LUX_SCALE)
        const M6T = 0x00FB; // 0.0153 * (2 ** LUX_SCALE)
        const K7T = 0x029A; // 1.3 * (2 ** RATIO_SCALE)
        const B7T = 0x0018; // 0.00146 * (2 ** LUX_SCALE)
        const M7T = 0x0012; // 0.00112 * (2 ** LUX_SCALE)
        const K8T = 0x029A; // 1.3 * (2 ** RATIO_SCALE)
        const B8T = 0x0000; // 0.000 * (2 ** LUX_SCALE)
        const M8T = 0x0000; // 0.000 * (2 ** LUX_SCALE)

        // Auto-gain thresholds
        // Max value at Ti 13ms = 5047
        // var AGT_LO_13MS = 100;
        // var AGT_HI_13MS = 4850;

        // // Max value at Ti 101ms = 37177
        // var AGT_LO_101MS = 200;
        // var AGT_HI_101MS = 36000;

        // // Max value at Ti 402ms = 65535
        // var AGT_LO_402MS = 500;
        // var AGT_HI_402MS = 63000;

        // var agtRanges = [
        //   // 0, TI_13MS
        //   [100, 4850],
        //   // 1, TI_101MS
        //   [200, 36000],
        //   // 2, TI_402MS
        //   [500, 63000],
        // ];

        // var CLIPPING_13MS = 4900;
        // var CLIPPING_101MS = 37000;
        // var CLIPPING_402MS = 65000;

        // var clipping = [
        //   // 0, TI_13MS
        //   4900,
        //   // 1, TI_101MS
        //   37000,
        //   // 2, TI_402MS
        //   65000,
        // ];


        const GAIN_1X = 0x00;
        const GAIN_16X = 0x10;

        // var TI_13MS = 0x00;
        // var TI_101MS = 0x01;
        // var TI_402MS = 0x02;

        const TintMs = [
          // 0, TI_13MS
          13,
          // 1, TI_101MS
          101,
          // 2, TI_402MS
          402,
        ];

        const TintDelayMs = [
          // 0, TI_13MS
          15,
          // 1, TI_101MS
          120,
          // 2, TI_402MS
          450,
        ];

        // Page 23 - 28
        // Simplified Lux Calculation
        // var CH_SCALE_D = 0x0010;
        // var CH_SCALE_0 = 0x7517;
        // var CH_SCALE_1 = 0x0FE7;

        const chScales = [
          // 0, TI_13MS
          0x07517,
          // 1, TI_101MS
          0x00FE7,
          // 2, TI_402MS
          0x10000,
        ];

        // Gain and Tint defaults;
        let gain = GAIN_16X;
        let TintIndex = 0;
        let Tint = TintMs[TintIndex];
        let lux = 0;

        // if (typeof options.gain !== "undefined") {
        //   isAutoGain = false;
        //   gain = options.gain;
        // }

        // if (typeof options.integration !== "undefined") {
        //   isAutoGain = false;
        //   Tint = options.integration;
        // }


        // TODO: reduce duplication here
        Object.defineProperties(this, {
          gain: {
            get() {
              return gain;
            },
            set(value) {
              if (value !== GAIN_1X && value !== GAIN_16X) {
                throw new RangeError("Invalid gain. Expected one of: 0, 16");
              }
              gain = value;

              this.io.i2cWriteReg(address, command(this.REGISTER.TIMING), TintIndex | gain);
            }
          },
          integration: {
            get() {
              return Tint;
            },
            set(value) {
              TintIndex = TintMs.indexOf(value);

              if (TintIndex === -1) {
                throw new RangeError("Invalid integration. Expected one of: 13, 101, 402");
              }

              Tint = value;

              this.io.i2cWriteReg(address, command(this.REGISTER.TIMING), TintIndex | gain);
            }
          },
          lux: {
            get() {
              return lux;
            }
          }
        });

        // Assign the default gain and integration values
        // These are validated and written to the device.
        // These will invoke the accessors above.
        this.gain = gain;
        this.integration = Tint;

        // Page 1
        // Description
        // Page 2
        // Functional Block Diagram
        // var data = {
        //   broadband: null,
        //   infrared: null,
        // };

        const read = () => {
          setTimeout(() => {
            // Page 19
            // Read ADC Channels Using Read Word Protocol − RECOMMENDED
            this.io.i2cReadOnce(address, command(this.REGISTER.READ), 4, data => {
              // Page 23 - 28
              // Simplified Lux Calculation
              let ch0 = uint16(data[1], data[0]);
              let ch1 = uint16(data[3], data[2]);
              let b = 0;
              let m = 0;

              // Page 26
              // CalculateLux(...)
              let chScale = chScales[TintIndex];


              if (!gain) {
                chScale = chScale << 4;
              }

              // Page 27
              // CalculateLux(...)
              ch0 = (ch0 * chScale) >> 10;
              ch1 = (ch1 * chScale) >> 10;

              let ratio1 = 0;

              if (ch0) {
                ratio1 = (ch1 << (RATIO_SCALE + 1)) / ch0;
              }

              ratio1 = Math.round(ratio1);

              const ratio = (ratio1 + 1) >> 1;

              if (ratio >= 0 && ratio <= K1T) {
                b = B1T;
                m = M1T;
              } else if (ratio <= K2T) {
                b = B2T;
                m = M2T;
              } else if (ratio <= K3T) {
                b = B3T;
                m = M3T;
              } else if (ratio <= K4T) {
                b = B4T;
                m = M4T;
              } else if (ratio <= K5T) {
                b = B5T;
                m = M5T;
              } else if (ratio <= K6T) {
                b = B6T;
                m = M6T;
              } else if (ratio <= K7T) {
                b = B7T;
                m = M7T;
              } else if (ratio > K8T) {
                b = B8T;
                m = M8T;
              }
              // I followed the datasheet and it had no else clause here.

              let temp = (ch0 * b) - (ch1 * m);

              if (temp < 0) {
                temp = 0;
              }

              temp += 1 << (LUX_SCALE - 1);

              // Updating the `lux` binding
              // in the outer scope.
              lux = temp >>> LUX_SCALE;

              callback(lux);
              read();
            });
          }, TintDelayMs[TintIndex]);
        };

        read();
      }
    },
    toLux: {
      value(value) {
        return value;
      },
    },
    toIntensityLevel: {
      value(value) {
        return toFixed$1(scale(value, 0, 17000, 0, 100) / 100, 2);
      },
    },
  },
  BH1750: {
    // code based on Arduino library https://github.com/claws/BH1750
    // currently only "continuous H-resolution" mode supported
    ADDRESSES: {
      value: [0x23, 0x5C]
    },
    initialize: {
      value(options, callback) {
        const { Drivers } = requireSip();
        const address = Drivers.addressResolver(this, options);
        const mode = options.mode || 0x10;
        this.io.i2cConfig(options);
        this.io.i2cWrite(address, mode);
        const read = () => {
          setTimeout(() => {
            this.io.i2cReadOnce(address, 2, data => {
              callback(uint16(data[0], data[1]));
              read();
            });
          }, 120);
        };
        read();
      },
    },
    toLux: {
      value(value) {
        // Page 2
        // H-Resolution Mode Resolution rHR － 1 － lx
        return Math.round(value / 1.2);
      },
    },
    toIntensityLevel: {
      value(value) {
        return toFixed$1(scale(value / 1.2, 0, 65535, 0, 100) / 100, 2);
      },
    },
  },
};

Controllers$8.ALSPT19 = Controllers$8["ALS-PT19"] = Controllers$8.DEFAULT;


/**
 * Light
 * @constructor
 *
 */

class Light extends Withinable$2 {
  constructor(options) {
    super();

    Board$c.Component.call(
      this, options = Board$c.Options(options)
    );

    Board$c.Controller.call(this, Controllers$8, options);

    let value = 0;
    let last = 0;
    let {
      freq = 25
    } = options;

    priv$b.set(this, {});

    if (!this.toIntensityLevel) {
      this.toIntensityLevel = options.toIntensityLevel || (x => x);
    }

    if (!this.toLux) {
      this.toLux = options.toLux || (x => x);
    }

    Object.defineProperties(this, {
      value: {
        get() {
          return value;
        },
      },
      level: {
        get() {
          return this.toIntensityLevel(value);
        },
      },
    });

    /* istanbul ignore else */
    if (typeof this.initialize === "function") {
      this.initialize(options, data => value = data);
    }

    if (typeof this.lux === "undefined") {
      Object.defineProperty(this, "lux", {
        get() {
          return this.toLux(value);
        },
      });
    }

    const data = {
      level: 0,
      lux: 0,
    };

    setInterval(() => {
      data.level = this.level;
      data.lux = this.lux;

      this.emit("data", data);

      if (value !== last) {
        last = value;
        this.emit("change", data);
      }
    }, freq);
  }
}

/* istanbul ignore else */
if (process.env.IS_TEST_MODE) {
  Light.Controllers = Controllers$8;
  Light.purge = function() {
    priv$b.clear();
  };
}

var light = Light;

const Board$b = requireBoard();
const Emitter$5 = emitter;
const { constrain, fscale } = fn;
const priv$a = new Map();
const axes = ["x", "y"];

class Multiplexer {
  constructor({pins, io}) {
    this.pins = pins;
    this.io = io;

    // Setup these "analog" pins as digital output.
    this.io.pinMode(this.pins[0], this.io.MODES.OUTPUT);
    this.io.pinMode(this.pins[1], this.io.MODES.OUTPUT);
    this.io.pinMode(this.pins[2], this.io.MODES.OUTPUT);
    this.io.pinMode(this.pins[3], this.io.MODES.OUTPUT);
  }

  select(channel) {
    this.io.digitalWrite(this.pins[0], channel & 1 ? this.io.HIGH : this.io.LOW);
    this.io.digitalWrite(this.pins[1], channel & 2 ? this.io.HIGH : this.io.LOW);
    this.io.digitalWrite(this.pins[2], channel & 4 ? this.io.HIGH : this.io.LOW);
    this.io.digitalWrite(this.pins[3], channel & 8 ? this.io.HIGH : this.io.LOW);
  }
}

const Controllers$7 = {
  ANALOG: {
    initialize: {
      value({pins}, callback) {
        const axisValues = {
          x: null,
          y: null
        };

        pins.forEach((pin, index) => {
          this.io.pinMode(pin, this.io.MODES.ANALOG);
          this.io.analogRead(pin, value => {
            axisValues[axes[index]] = value;

            if (axisValues.x !== null && axisValues.y !== null) {
              callback({
                x: axisValues.x,
                y: axisValues.y
              });

              axisValues.x = null;
              axisValues.y = null;
            }
          });
        });
      }
    },
    toAxis: {
      value(raw, axis) {
        const state = priv$a.get(this);
        return constrain(fscale(raw - state[axis].zeroV, -511, 511, -1, 1), -1, 1);
      }
    }
  },
  ESPLORA: {
    initialize: {
      value(options, callback) {
        // References:
        //
        // https://github.com/arduino/Arduino/blob/master/libraries/Esplora/src/Esplora.h
        // https://github.com/arduino/Arduino/blob/master/libraries/Esplora/src/Esplora.cpp
        //
        const multiplexer = new Multiplexer({
          // Since Multiplexer uses digitalWrite,
          // we have to send the analog pin numbers
          // in their "digital" pin order form.
          pins: [18, 19, 20, 21],
          io: this.io
        });
        const channels = [11, 12];
        let index = 1;
        const axisValues = {
          x: null,
          y: null
        };

        this.io.pinMode(4, this.io.MODES.ANALOG);

        const handler = value => {
          axisValues[axes[index]] = value;

          if (axisValues.x !== null && axisValues.y !== null) {
            callback({
              x: axisValues.x,
              y: axisValues.y
            });

            axisValues.x = null;
            axisValues.y = null;
          }

          // Remove this handler to all the multiplexer
          // to setup the next pin for the next read.
          this.io.removeListener("analog-read-4", handler);

          setTimeout(read, 10);
        };

        var read = () => {
          multiplexer.select(channels[index ^= 1]);
          this.io.analogRead(4, handler);
        };

        read();
      }
    },
    toAxis: {
      value(raw, axis) {
        const state = priv$a.get(this);
        return constrain(fscale(raw - state[axis].zeroV, -511, 511, -1, 1), -1, 1);
      }
    }
  }
};

Controllers$7.DEFAULT = Controllers$7.ANALOG;

/**
 * Joystick
 * @constructor
 *
 * five.Joystick([ x, y[, z] ]);
 *
 * five.Joystick({
 *   pins: [ x, y[, z] ]
 *   freq: ms
 * });
 *
 *
 * @param {Object} options [description]
 *
 */
let Joystick$1 = class Joystick extends Emitter$5 {
  constructor(options) {
    super();

    Board$b.Component.call(
      this, options = Board$b.Options(options)
    );

    Board$b.Controller.call(this, Controllers$7, options);

    if (!this.toAxis) {
      this.toAxis = options.toAxis || (raw => raw);
    }

    const state = {
      x: {
        invert: false,
        value: 0,
        previous: 0,
        zeroV: 0,
        calibrated: false
      },
      y: {
        invert: false,
        value: 0,
        previous: 0,
        zeroV: 0,
        calibrated: false
      }
    };

    state.x.zeroV = options.zeroV === undefined ? 0 : (options.zeroV.x || 0);
    state.y.zeroV = options.zeroV === undefined ? 0 : (options.zeroV.y || 0);

    state.x.invert = options.invertX || options.invert || false;
    state.y.invert = options.invertY || options.invert || false;

    priv$a.set(this, state);

    if (typeof this.initialize === "function") {
      this.initialize(options, data => {
        let isChange = false;
        const computed = {
          x: null,
          y: null
        };

        Object.keys(data).forEach(axis => {
          const value = data[axis];
          const sensor = state[axis];

          // Set the internal ADC reading value...
          sensor.value = value;

          if (!state[axis].calibrated) {
            state[axis].calibrated = true;
            state[axis].zeroV = value;
            isChange = true;
          }

          // ... Get the computed axis value.
          computed[axis] = this[axis];

          const absAxis = Math.abs(computed[axis]);
          const absPAxis = Math.abs(sensor.previous);

          if ((absAxis < absPAxis) ||
            (absAxis > absPAxis)) {
            isChange = true;
          }

          sensor.previous = computed[axis];
        });

        this.emit("data", {
          x: computed.x,
          y: computed.y
        });

        if (isChange) {
          this.emit("change", {
            x: computed.x,
            y: computed.y
          });
        }
      });
    }

    Object.defineProperties(this, {
      x: {
        get() {
          return this.toAxis(state.x.value, "x") * (state.x.invert ? -1 : 1);
        }
      },
      y: {
        get() {
          return this.toAxis(state.y.value, "y") * (state.y.invert ? -1 : 1);
        }
      }
    });
  }
};

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  Joystick$1.Controllers = Controllers$7;
  Joystick$1.purge = () => {
    priv$a.clear();
  };
}

var joystick = Joystick$1;

const Board$a = requireBoard();
const Collection$7 = collection;
const Emitter$4 = emitter;
const priv$9 = new Map();


function analogInitializer({pin}, dataHandler) {
  const state = priv$9.get(this);

  this.io.pinMode(pin, this.io.MODES.ANALOG);

  setTimeout(() => {
    state.isCalibrated = true;
    this.emit("calibrated");
  }, 10);

  this.io.analogRead(pin, dataHandler);
}

const initialize = {
  value: analogInitializer
};

const Controllers$6 = {
  PIR: {
    initialize: {
      value(options, dataHandler) {
        const state = priv$9.get(this);
        const calibrationDelay = typeof options.calibrationDelay !== "undefined" ?
          options.calibrationDelay : 2000;

        this.io.pinMode(options.pin, this.io.MODES.INPUT);

        setTimeout(() => {
          state.isCalibrated = true;
          this.emit("calibrated");
        }, calibrationDelay);

        this.io.digitalRead(options.pin, dataHandler);
      }
    },
    toBoolean: {
      value(raw) {
        return !!raw;
      }
    }
  },
  GP2Y0D805Z0F: {
    ADDRESSES: {
      value: [0x26]
    },
    initialize: {
      value(options, dataHandler) {
        const { Drivers } = requireSip();
        const address = Drivers.addressResolver(this, options);
        const state = priv$9.get(this);

        // This is meaningless for GP2Y0D805Z0F.
        // The event is implemented for consistency
        // with the digital passive infrared sensor
        setTimeout(() => {
          state.isCalibrated = true;
          this.emit("calibrated");
        }, 10);


        // Set up I2C data connection
        this.io.i2cConfig(options);

        this.io.i2cWriteReg(address, 0x03, 0xFE);
        this.io.i2cWrite(address, [0x00]);
        this.io.i2cRead(address, 1, data => {
          dataHandler(data[0] & 0x02);
        });
      }
    },
    toBoolean: {
      value(raw) {
        return raw === 0;
      }
    }
  },
  GP2Y0D810Z0F: {
    initialize,
    toBoolean: {
      value(raw) {
        return raw >> 9 === 0;
      }
    }
  },
  GP2Y0A60SZLF: {
    initialize,
    toBoolean: {
      value(raw) {
        return raw >> 9 === 1;
      }
    }
  }
};

Controllers$6.GP2Y0D815Z0F = Controllers$6.GP2Y0D810Z0F;

Controllers$6["HC-SR501"] = Controllers$6.PIR;
Controllers$6["HCSR501"] = Controllers$6.PIR;
Controllers$6["0D805"] = Controllers$6.GP2Y0D805Z0F;
Controllers$6["805"] = Controllers$6.GP2Y0D805Z0F;
Controllers$6["0D810"] = Controllers$6.GP2Y0D810Z0F;
Controllers$6["810"] = Controllers$6.GP2Y0D810Z0F;
Controllers$6["0D815"] = Controllers$6.GP2Y0D815Z0F;
Controllers$6["815"] = Controllers$6.GP2Y0D815Z0F;
Controllers$6["0A60SZLF"] = Controllers$6.GP2Y0A60SZLF;
Controllers$6["60SZLF"] = Controllers$6.GP2Y0A60SZLF;
Controllers$6.DEFAULT = Controllers$6.PIR;
/**
 * Motion
 * @constructor
 *
 * five.Motion(7);
 *
 * five.Motion({
 *  controller: "PIR",
 *  pin: 7,
 *  freq: 100,
 *  calibrationDelay: 1000
 * });
 *
 *
 * @param {Object} options [description]
 *
 */

class Motion extends Emitter$4 {
  constructor(options) {

    super();

    Board$a.Component.call(
      this, options = Board$a.Options(options)
    );

    Board$a.Controller.call(this, Controllers$6, options);

    let last = false;
    const freq = options.freq || 25;
    const state = {
      value: false,
      isCalibrated: false
    };

    priv$9.set(this, state);

    Object.defineProperties(this, {
      /**
       * [read-only] Current sensor state
       * @property detectedMotion
       * @type Boolean
       */
      detectedMotion: {
        get() {
          return this.toBoolean(state.value);
        }
      },
      /**
       * [read-only] Sensor calibration status
       * @property isCalibrated
       * @type Boolean
       */
      isCalibrated: {
        get() {
          return state.isCalibrated;
        }
      },
    });

    if (typeof this.initialize === "function") {
      this.initialize(options, data => state.value = data);
    }

    setInterval(() => {
      let isChange = false;
      const eventData = {
        timestamp: Date.now(),
        detectedMotion: this.detectedMotion,
        isCalibrated: state.isCalibrated
      };

      if (state.isCalibrated && this.detectedMotion && !last) {
        this.emit("motionstart", eventData);
      }

      if (state.isCalibrated && !this.detectedMotion && last) {
        this.emit("motionend", eventData);
      }

      if (last !== this.detectedMotion) {
        isChange = true;
      }

      this.emit("data", eventData);

      if (isChange) {
        this.emit("change", eventData);
      }

      last = this.detectedMotion;
    }, freq);
  }
}

/**
 * Motion.Collection()
 * new Motion.Collection()
 *
 * Constructs an Array-like instance
 */
Motion.Collection = class extends Collection$7.Emitter {
  constructor(numsOrObjects) {
    super(numsOrObjects);
  }

  get type() {
    return Motion;
  }
};

Collection$7.installMethodForwarding(
  Motion.Collection.prototype, Motion.prototype
);


/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  Motion.Controllers = Controllers$6;
  Motion.purge = () => {
    priv$9.clear();
  };
}

var motion = Motion;

const Board$9 = requireBoard();
const Fn$6 = fn;
const Collection$6 = collection;
const Withinable$1 = withinable;

// Sensor instance private data
const priv$8 = new Map();

// To reduce noise in sensor readings, sort collected samples
// from high to low and select the value in the center.
function median(input) {
  // faster than default comparitor (even for small n)
  const sorted = input.sort((a, b) => a - b);
  const len = sorted.length;
  const half = Math.floor(len / 2);

  // If the length is odd, return the midpoint m
  // If the length is even, return average of m & m + 1
  return len % 2 ? sorted[half] : (sorted[half - 1] + sorted[half]) / 2;
}

/**
 * Sensor
 * @constructor
 *
 * @description Generic analog or digital sensor constructor
 *
 * @param {Object} options Options: pin, freq, range
 */

let Sensor$2 = class Sensor extends Withinable$1 {
  constructor(options) {

    super();

    // Defaults to 10-bit resolution
    let resolution = 0x3FF;
    let raw = null;
    let last = -1;
    const samples = [];

    Board$9.Component.call(
      this, options = Board$9.Options(options)
    );

    if (!options.type) {
      options.type = "analog";
    }

    if (this.io.RESOLUTION &&
        (this.io.RESOLUTION.ADC &&
          (this.io.RESOLUTION.ADC !== resolution))) {
      resolution = this.io.RESOLUTION.ADC;
    }

    // Set the pin to ANALOG (INPUT) mode
    this.mode = options.type === "digital" ?
      this.io.MODES.INPUT :
      this.io.MODES.ANALOG;

    this.io.pinMode(this.pin, this.mode);

    // Create a "state" entry for privately
    // storing the state of the sensor
    const state = {
      enabled: typeof options.enabled === "undefined" ? true : options.enabled,
      booleanBarrier: options.type === "digital" ? 0 : null,
      intervalId: null,
      scale: null,
      value: 0,
      median: 0,
      freq: options.freq || 25,
      previousFreq: options.freq || 25,
    };
    // Put a reference where the prototype methods defined in this file have access
    priv$8.set(this, state);

    // Sensor instance properties
    this.range = options.range || [0, resolution];
    this.limit = options.limit || null;
    this.threshold = options.threshold === undefined ? 1 : options.threshold;
    this.isScaled = false;

    this.io[`${options.type}Read`](this.pin, data => {
      raw = data;

      // Only append to the samples when noise filtering can/will be used
      if (options.type !== "digital") {
        samples.push(raw);
      }
    });

    // Throttle
    // TODO: The event (interval) processing function should be outside of the Sensor
    // constructor function (with appropriate passed (and bound?) arguments), to
    // avoid creating a separate copy (of the function) for each Sensor instance.
    const eventProcessing = () => {
      let boundary;

      // For digital sensors, skip the analog
      // noise filtering provided below.
      if (options.type === "digital") {
        this.emit("data", raw);

        /* istanbul ignore else */
        if (last !== raw) {
          this.emit("change", raw);
          last = raw;
        }
        return;
      }

      // Keep the previous calculated value if there were no new readings
      if (samples.length > 0) {
        // Filter the accumulated sample values to reduce analog reading noise
        state.median = median(samples);
      }

      const roundMedian = Math.round(state.median);

      this.emit("data", roundMedian);

      // If the filtered (state.median) value for this interval is at least ± the
      // configured threshold from last, fire change events
      if (state.median <= (last - this.threshold) || state.median >= (last + this.threshold)) {
        this.emit("change", roundMedian);
        // Update the instance-local `last` value (only) when a new change event
        // has been emitted.  For comparison in the next interval
        last = state.median;
      }

      if (this.limit) {
        if (state.median <= this.limit[0]) {
          boundary = "lower";
        }
        if (state.median >= this.limit[1]) {
          boundary = "upper";
        }

        if (boundary) {
          this.emit("limit", {
            boundary,
            value: roundMedian
          });
          this.emit(`limit:${boundary}`, roundMedian);
        }
      }

      // Reset samples
      samples.length = 0;
    }; // ./function eventProcessing()


    Object.defineProperties(this, {
      raw: {
        get() {
          return raw;
        }
      },
      analog: {
        get() {
          if (options.type === "digital") {
            return raw;
          }

          return raw === null ? 0 :
            Fn$6.map(this.raw, 0, resolution, 0, 255) | 0;
        },
      },
      constrained: {
        get() {
          if (options.type === "digital") {
            return raw;
          }

          return raw === null ? 0 :
            Fn$6.constrain(this.raw, 0, 255);
        }
      },
      boolean: {
        get() {
          const state = priv$8.get(this);
          let booleanBarrier = state.booleanBarrier;
          const scale = state.scale || [0, resolution];

          if (booleanBarrier === null) {
            booleanBarrier = scale[0] + (scale[1] - scale[0]) / 2;
          }

          return this.value > booleanBarrier;
        }
      },
      scaled: {
        get() {
          let mapped;
          let constrain;

          if (state.scale && raw !== null) {
            if (options.type === "digital") {
              // Value is either 0 or 1, use as an index
              // to return the scaled value.
              return state.scale[raw];
            }

            mapped = Fn$6.fmap(raw, this.range[0], this.range[1], state.scale[0], state.scale[1]);
            constrain = Fn$6.constrain(mapped, state.scale[0], state.scale[1]);

            return constrain;
          }
          return this.constrained;
        }
      },
      freq: {
        get() {
          return state.freq;
        },
        set(newFreq) {
          state.freq = newFreq;
          if (state.intervalId) {
            clearInterval(state.intervalId);
          }

          if (state.freq !== null) {
            state.intervalId = setInterval(eventProcessing, newFreq);
          }
        }
      },
      value: {
        get() {
          if (state.scale) {
            this.isScaled = true;
            return this.scaled;
          }

          return raw;
        }
      },
      resolution: {
        get() {
          return resolution;
        }
      }
    });

    /* istanbul ignore else */
    if (!!process.env.IS_TEST_MODE) {
      Object.defineProperties(this, {
        state: {
          get() {
            return priv$8.get(this);
          }
        }
      });
    }

    // Set the freq property only after the get and set functions are defined
    // and only if the sensor is not `enabled: false`
    if (state.enabled) {
      this.freq = state.freq;
    }
  }

  /**
   * enable Enable a disabled sensor.
   *
   * @return {Object} instance
   *
   */
  enable() {
    const state = priv$8.get(this);

    /* istanbul ignore else */
    if (!state.enabled) {
      this.freq = state.freq || state.previousFreq;
    }

    return this;
  }

  /**
   * disable Disable an enabled sensor.
   *
   * @return {Object} instance
   *
   */
  disable() {
    const state = priv$8.get(this);

    /* istanbul ignore else */
    if (state.enabled) {
      state.enabled = false;
      state.previousFreq = state.freq;
      this.freq = null;
    }

    return this;
  }

  /**
   * scale/scaleTo Set a value scaling range
   *
   * @param  {Number} low  Lowerbound
   * @param  {Number} high Upperbound
   * @return {Object} instance
   *
   * @param  {Array} [ low, high]  Lowerbound
   * @return {Object} instance
   *
   */
  scale(low, high) {
    this.isScaled = true;

    priv$8.get(this).scale = Array.isArray(low) ?
      low : [low, high];

    return this;
  }

  /**
   * scaleTo Scales value to integer representation
   * @param  {Number} low  An array containing a lower and upper bound
   *
   * @param  {Number} low  A number to use as a lower bound
   * @param  {Number} high A number to use as an upper bound
   * @return {Number}      The scaled value
   */
  scaleTo(low, high) {
    const scale = Array.isArray(low) ? low : [low, high];
    return Fn$6.map(this.raw, 0, this.resolution, scale[0], scale[1]);
  }

  /**
   * fscaleTo Scales value to single precision float representation
   * @param  {Number} low  An array containing a lower and upper bound
   *
   * @param  {Number} low  A number to use as a lower bound
   * @param  {Number} high A number to use as an upper bound
   * @return {Number}      The scaled value
   */
  fscaleTo(low, high) {
    const scale = Array.isArray(low) ? low : [low, high];
    return Fn$6.fmap(this.raw, 0, this.resolution, scale[0], scale[1]);
  }

  /**
   * booleanAt Set a midpoint barrier value used to calculate returned value of
   *           .boolean property.
   *
   * @param  {Number} barrier
   * @return {Object} instance
   *
   */
  booleanAt(barrier) {
    priv$8.get(this).booleanBarrier = barrier;
    return this;
  }
};

/**
 * Sensors()
 * new Sensors()
 *
 * Constructs an Array-like instance of all servos
 */
class Sensors extends Collection$6.Emitter {
  constructor(numsOrObjects) {
    super(numsOrObjects);
  }
  get type() {
    return Sensor$2;
  }
}

Collection$6.installMethodForwarding(
  Sensors.prototype, Sensor$2.prototype
);

// Assign Sensors Collection class as static "method" of Sensor.
Sensor$2.Collection = Sensors;

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  Sensor$2.purge = () => {
    priv$8.clear();
  };
}


var sensor = Sensor$2;

const Board$8 = requireBoard();
const Collection$5 = collection;
const priv$7 = new Map();
const encoded = {
  cathode: [63, 6, 91, 79, 102, 109, 125, 7, 127, 103],
  anode: [64, 121, 36, 48, 25, 18, 2, 120, 0, 24],
};


let ShiftRegister$1 = class ShiftRegister {
  constructor(opts) {
    if (!(this instanceof ShiftRegister)) {
      return new ShiftRegister(opts);
    }

    if (Array.isArray(opts)) {
      // [Data, Clock, Latch, Reset]
      opts = {
        pins: {
          data: opts[0],
          clock: opts[1],
          latch: opts[2],
          reset: opts.length === 4 ? opts[3] : null,
        }
      };
    } else if (typeof opts.pins === "object" && Array.isArray(opts.pins)) {
      opts.pins = {
        data: opts.pins[0],
        clock: opts.pins[1],
        latch: opts.pins[2],
        reset: opts.pins.length === 4 ? opts.pins[3] : null,
      };
    }

    Board$8.Component.call(
      this, opts = Board$8.Options(opts)
    );

    this.size = opts.size || 1;
    this.pins.reset = typeof opts.pins.reset !== "undefined" ? opts.pins.reset : null;

    const isAnode = typeof opts.isAnode !== "undefined" ? opts.isAnode : false;
    const clear = isAnode ? 255 : 0;
    const state = {
      isAnode,
      value: new Array(this.size).fill(clear),
      encoded: encoded[isAnode ? "anode" : "cathode"],
      clear,
    };

    priv$7.set(this, state);

    Object.defineProperties(this, {
      isAnode: {
        get() {
          return isAnode;
        }
      },
      value: {
        get() {
          return state.value;
        }
      },
    });
  }

  /**
   * Print a digit on a seven segment display, or several
   * digits across several displays.
   */
  display(value) {
    const state = priv$7.get(this);
    let chars;

    if (typeof value === "number") {
      // 1, 20, etc.
      return this.display(String(value));
    }

    if (typeof value === "string") {
      const matches = value.match(/([0-9]{1}\.*)/g);

      if (matches && matches.length) {
        chars = matches.map(char => {
          // "1"
          if (char.length === 1) {
            return state.encoded[char] | (1 << 7);
          }
          // "1.?.?"
          return state.encoded[char[0]];
        });
      }
    }

    this.send(chars);

    state.value = chars;

    return this;
  }

  /**
   * Send one or more values to the shift register.
   * @param {...number} value Value to send
   * @returns {ShiftRegister}
   */
  send(value) {
    const state = priv$7.get(this);
    let args = Array.from(arguments);

    if (args.length === 1) {
      args = [value];
    }

    if (Array.isArray(value)) {
      args = value;
    }

    // open latch to fill register with data
    this.io.digitalWrite(this.pins.latch, this.io.LOW);

    args.forEach(function(arg) {
      if (typeof arg === "string") {
        arg = arg.charCodeAt(0);
      }
      if (this.isAnode &&
        (arg !== 255 && !state.encoded.includes(arg) && !state.encoded.includes(arg & ~(1 << 7)))) {

        const index = encoded.anode.findIndex(value => value === arg);

        if (index !== -1) {
          arg = encoded.cathode[index];
        }
      }
      this.board.shiftOut(this.pins.data, this.pins.clock, true, arg);
    }, this);

    // close latch to commit bits into register.
    this.io.digitalWrite(this.pins.latch, this.io.HIGH);

    state.value = args;

    return this;
  }

  /**
   * Clear the shift register by replacing each value with a 0.
   * @type {ShiftRegister}
   */
  clear() {
    const state = priv$7.get(this);
    return this.send(Array(this.size).fill(state.clear));
  }

  reset() {
    if (this.pins.reset === null) {
      throw new Error("ShiftRegister was not initialized with a reset pin");
    }
    this.io.digitalWrite(this.pins.clock, this.io.LOW);
    this.io.digitalWrite(this.pins.reset, this.io.LOW);
    this.io.digitalWrite(this.pins.clock, this.io.HIGH);
    this.io.digitalWrite(this.pins.reset, this.io.HIGH);

    return this;
  }
};



/**
 * ShiftRegisters()
 * new ShiftRegisters()
 */

class ShiftRegisters extends Collection$5 {
  constructor(numsOrObjects) {
    super(numsOrObjects);
  }

  get type() {
    return ShiftRegister$1;
  }
}

Collection$5.installMethodForwarding(
  ShiftRegisters.prototype, ShiftRegister$1.prototype
);


/*
 * ShiftRegisters, display(...)
 *
 * eg. array.display(...);

 * ShiftRegisters, send(...)
 *
 * eg. array.send(...);

 * ShiftRegisters, clear()
 *
 * eg. array.clear();

 * ShiftRegisters, reset()
 *
 * eg. array.reset();
 */

Collection$5.installMethodForwarding(
  ShiftRegisters.prototype, ShiftRegister$1.prototype
);

// Assign ShiftRegisters Collection class as static "method" of ShiftRegister.
ShiftRegister$1.Collection = ShiftRegisters;

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  ShiftRegister$1.purge = () => {
    priv$7.clear();
  };
}

var shiftregister = ShiftRegister$1;

const Board$7 = requireBoard();
const Collection$4 = collection;
const Emitter$3 = emitter;
const EVS$1 = evshield;
const Expander$1 = requireExpander();
const Fn$5 = fn;
const Sensor$1 = sensor;
const ShiftRegister = shiftregister;

const priv$6 = new Map();
const registers = new Map();

function registerKey(registerOpts) {
  return ["clock", "data", "latch"].reduce((accum, key) => `${accum}.${registerOpts[key]}`, "");
}

function latch(state, bit, on) {
  return on ? state |= (1 << bit) : state &= ~(1 << bit);
}

function updateShiftRegister(motor, dir) {
  const rKey = registerKey(motor.settings.register);
  const register = registers.get(motor.board)[rKey];
  let latchState = register.value;
  const bits = priv$6.get(motor).bits;
  const forward = dir !== "reverse";

  // There are two ShiftRegister bits which we need to change based on the
  // direction of the motor.  These will be the pins that control the HBridge
  // on the board.  They will get flipped high/low based on the current flow
  // in the HBridge.
  latchState = latch(latchState, bits.a, forward);
  latchState = latch(latchState, bits.b, !forward);

  if (register.value !== latchState) {
    register.send(latchState);
  }
}

const Controllers$5 = {
  DEFAULT: {},
  ShiftRegister: {
    initialize: {
      value({register, bits}) {
        const rKey = registerKey(register);

        if (!bits || bits.a === undefined || bits.b === undefined) {
          throw new Error("ShiftRegister Motors MUST contain HBRIDGE bits {a, b}");
        }

        priv$6.get(this).bits = bits;

        if (!registers.has(this.board)) {
          registers.set(this.board, {});
        }

        if (!registers.get(this.board)[rKey]) {
          registers.get(this.board)[rKey] = new ShiftRegister({
            board: this.board,
            pins: register
          });
        }

        this.io.pinMode(this.pins.pwm, this.io.MODES.PWM);
      }
    },
    dir: {
      value(dir) {
        this.stop();

        updateShiftRegister(this, dir.name);

        this.direction = dir;

        process.nextTick(() => this.emit(dir.name));

        return this;
      }
    }
  },
  PCA9685: {
    initialize: {
      value({address, pwmRange, frequency}) {

        const state = priv$6.get(this);

        this.address = address || 0x40;
        this.pwmRange = pwmRange || [0, 4080];
        this.frequency = frequency || 50;

        state.expander = Expander$1.get({
          address: this.address,
          controller: this.controller,
          bus: this.bus,
          pwmRange: this.pwmRange,
          frequency: this.frequency,
        });

        Object.keys(this.pins).forEach(pinName => {
          this.pins[pinName] = state.expander.normalize(this.pins[pinName]);
        });
      }
    },
    setPWM: {
      writable: true,
      value(pin, speed) {
        priv$6.get(this).expander.analogWrite(pin, speed);
      }
    },
    setPin: {
      writable: true,
      value(pin, value) {
        priv$6.get(this).expander.digitalWrite(pin, value);
      }
    },
  },
  PCA9685_Hybrid: {
    initialize: {
      value({address, pwmRange, frequency}) {

        const state = priv$6.get(this);

        this.address = address || 0x40;
        this.pwmRange = pwmRange || [0, 4080];
        this.frequency = frequency || 50;

        state.expander = Expander$1.get({
          address: this.address,
          controller: "PCA9685",
          bus: this.bus,
          pwmRange: this.pwmRange,
          frequency: this.frequency,
        });

        this.pins.pwm = state.expander.normalize(this.pins.pwm);

      }
    },
    setPWM: {
      writable: true,
      value(pin, speed) {
        priv$6.get(this).expander.analogWrite(pin, speed);
      }
    },
  },
  EVS_EV3: {
    initialize: {
      value(options) {
        const state = priv$6.get(this);

        state.shield = EVS$1.shieldPort(options.pin);
        state.ev3 = new EVS$1(Object.assign(options, {
          io: this.io
        }));

        this.settings.pins = {
          pwm: options.pin,
          dir: options.pin,
        };
      }
    },
    setPWM: {
      value(pin, value) {
        const state = priv$6.get(this);
        const register = state.shield.motor === EVS$1.M1 ? EVS$1.SPEED_M1 : EVS$1.SPEED_M2;
        let speed = Fn$5.scale(value, 0, 255, 0, 100) | 0;

        if (value === 0) {
          state.ev3.write(state.shield, EVS$1.COMMAND, EVS$1.Motor_Reset);
        } else {
          if (!this.direction.value) {
            speed = -speed;
          }

          const data = [
            // 0-100
            speed,
            // Duration (0 is forever)
            0,
            // Command B
            0,
            // Command A
            EVS$1.CONTROL_SPEED | EVS$1.CONTROL_GO
          ];

          state.ev3.write(state.shield, register, data);
        }
      }
    },
    setPin: {
      value(pin, value) {
        this.setPWM(this.pin, value);
      }
    },
    validatePins: {
      value() {
        // Check for required pins
        if (typeof this.settings.pin === "undefined") {
          throw new Error("Pin must be defined");
        }
      }
    }
  },

  GROVE_I2C_MOTOR_DRIVER: {
    REGISTER: {
      value: {
        ADDRESS: 0x0F,
      }
    },
    COMMANDS: {
      value: {
        SET_SPEED: 0x82,
        SET_PWM_FREQUENCY: 0x84,
        SET_DIRECTION: 0xAA,
        NOOP: 0x01,
      }
    },

    initialize: {
      value(options) {
        const state = priv$6.get(this);
        let shared = priv$6.get("GROVE_I2C_MOTOR_DRIVER");

        if (!shared) {
          shared = {
            direction: {
              A: 0x01,
              B: 0x01,
            },
            speed: {
              A: 0,
              B: 0,
            }
          };

          priv$6.set("GROVE_I2C_MOTOR_DRIVER", shared);
        }

        state.shared = shared;
        state.pin = options.pin.toUpperCase();

        this.settings.pins = {
          pwm: options.pin,
          dir: options.pin,
        };

        this.address = options.address || this.REGISTER.ADDRESS;

        options.address = this.address;

        this.io.i2cConfig(options);
      }
    },
    setPWM: {
      value(pin, value) {
        const state = priv$6.get(this);
        const speed = Board$7.constrain(value, 0, 255) | 0;

        state.shared.speed[state.pin] = speed;

        this.io.i2cWrite(this.address, [
          this.COMMANDS.SET_SPEED,
          state.shared.speed.A,
          state.shared.speed.B,
        ]);
      }
    },
    setPin: {
      value(pin, value) {
        const state = priv$6.get(this);

        // DIR_CCW = 0x02
        // DIR_CW  = 0x01
        state.shared.direction[state.pin] = value ? 0x01 : 0x02;

        const a = state.shared.direction.A & 0x03;
        const b = state.shared.direction.B & 0x03;
        const direction = (b << 2) | a;

        this.io.i2cWrite(this.address, [
          this.COMMANDS.SET_DIRECTION,
          direction,
          this.COMMANDS.NOOP,
        ]);
      }
    },
    validatePins: {
      value() {
        // Check for required pins
        if (typeof this.settings.pin === "undefined") {
          throw new Error("Pin must be defined");
        }
      }
    }
  }
};

// Aliases
//
// NXT motors have the exact same control commands as EV3 motors
Controllers$5.EVS_NXT = Controllers$5.EVS_EV3;

const Devices = {
  NONDIRECTIONAL: {
    pins: {
      get() {
        if (this.settings.pin) {
          return {
            pwm: this.settings.pin
          };
        } else {
          return this.settings.pins || {};
        }
      }
    },
    dir: {
      writable: true,
      configurable: true,
      value(speed) {
        speed = speed || this.speed();
        return this;
      }
    },
    resume: {
      value() {
        const speed = this.speed();
        this.speed({
          speed
        });
        return this;
      }
    }
  },
  DIRECTIONAL: {
    pins: {
      get() {
        if (Array.isArray(this.settings.pins)) {
          return {
            pwm: this.settings.pins[0],
            dir: this.settings.pins[1]
          };
        } else {
          return this.settings.pins;
        }
      }
    },
    dir: {
      writable: true,
      configurable: true,
      value(dir) {

        this.stop();

        this.setPin(this.pins.dir, dir.value);
        this.direction = dir;

        process.nextTick(() => this.emit(dir.name));

        return this;
      }
    }
  },
  CDIR: {
    pins: {
      get() {
        if (Array.isArray(this.settings.pins)) {
          return {
            pwm: this.settings.pins[0],
            dir: this.settings.pins[1],
            cdir: this.settings.pins[2]
          };
        } else {
          return this.settings.pins;
        }
      }
    },
    dir: {
      value(dir) {

        this.stop();
        this.direction = dir;

        this.setPin(this.pins.cdir, 1 ^ dir.value);
        this.setPin(this.pins.dir, dir.value);

        process.nextTick(() => this.emit(dir.name));

        return this;
      }
    },
    brake: {
      value(duration) {

        this.speed({
          speed: 0,
          saveSpeed: false
        });
        this.setPin(this.pins.dir, 1, 127);
        this.setPin(this.pins.cdir, 1, 128, 127);
        this.speed({
          speed: 255,
          saveSpeed: false,
          braking: true
        });

        process.nextTick(() => this.emit("brake"));

        if (duration) {
          this.board.wait(duration, () => this.stop());
        }

        return this;
      }
    }
  }
};

/**
 * Motor
 * @constructor
 *
 * @param {Object} options Options: pin|pins{pwm, dir[, cdir]}, device, controller, current
 * @param {Number} pin A single pin for basic
 * @param {Array} pins A two or three digit array of pins [pwm, dir]|[pwm, dir, cdir]
 *
 *
 * Initializing "Hobby Motors"
 *
 *    new five.Motor(9);
 *
 * ...is the same as...
 *
 *    new five.Motor({
 *      pin: 9
 *    });
 *
 *
 * Initializing 2 pin, Bi-Directional DC Motors:
 *
 *    new five.Motor([ 3, 12 ]);
 *
 * ...is the same as...
 *
 *    new five.Motor({
 *      pins: [ 3, 12 ]
 *    });
 *
 * ...is the same as...
 *
 *    new five.Motor({
 *      pins: {
 *        pwm: 3,
 *        dir: 12
 *      }
 *    });
 *
 *
 * Initializing 3 pin, I2C PCA9685 Motor Controllers:
 * i.e. The Adafruit Motor Shield V2
 *
 *    new five.Motor({
 *      pins: [ 8, 9, 10 ],
 *      controller: "PCA9685",
 *      address: 0x60
 *    });
 *
 *
 * Initializing 3 pin, Bi-Directional DC Motors:
 *
 *    new five.Motor([ 3, 12, 11 ]);
 *
 * ...is the same as...
 *
 *    new five.Motor({
 *      pins: [ 3, 12, 11 ]
 *    });
 *
 * ...is the same as...
 *
 *    new five.Motor({
 *      pins: {
 *        pwm: 3,
 *        dir: 12,
 *        cdir: 11
 *      }
 *    });
 *
 *
 * Initializing Bi-Directional DC Motors with brake:
 *
 *    new five.Motor({
 *      pins: {
 *        pwm: 3,
 *        dir: 12,
 *        brake: 11
 *      }
 *    });
 *
 *
 * Initializing Bi-Directional DC Motors with current sensing pins:
 * See Sensor.js for details on options
 *
 *    new five.Motor({
 *      pins: [3, 12],
 *      current: {
 *        pin: "A0",
 *        freq: 250,
 *        range: [0, 2000]
 *      }
 *    });
 *
 *
 * Initializing Bi-Directional DC Motors with inverted speed for reverse:
 * Most likely used for non-commercial H-Bridge controllers
 *
 *    new five.Motor({
 *      pins: [3, 12],
 *      invertPWM: true
 *    });
 *
 */

class Motor extends Emitter$3 {
  constructor(options) {
    super();

    var device, state;

    Board$7.Component.call(
      this, options = Board$7.Options(options)
    );

    this.settings = options;

    // Derive device based on pins passed
    if (typeof this.settings.device === "undefined") {
      this.settings.device = "DIRECTIONAL";

      if (typeof this.settings.pins === "undefined" && typeof this.settings.register !== "object") {
        this.settings.device = "NONDIRECTIONAL";
      }

      if (this.settings.pins) {
        if (Array.isArray(this.settings.pins)) {
          this.settings.device = ["NONDIRECTIONAL", "DIRECTIONAL", "CDIR"][this.settings.pins.length - 1];
        } else {
          if (typeof this.settings.pins.dir === "undefined") {
            this.settings.device = "NONDIRECTIONAL";
          } else {
            this.settings.device = "DIRECTIONAL";
          }
          if (typeof this.settings.pins.cdir !== "undefined") {
            this.settings.device = "CDIR";
          }
        }
      }
    }

    if (typeof this.settings.controller === "string" &&
        (this.settings.controller.startsWith("EVS") ||
          this.settings.controller.startsWith("GROVE_I2C"))) {
        this.settings.device = "DIRECTIONAL";
    }

    // Allow users to pass in custom device types
    device = typeof this.settings.device === "string" ?
      Devices[this.settings.device] : this.settings.device;

    this.threshold = typeof this.settings.threshold !== "undefined" ?
      this.settings.threshold : 30;

    this.invertPWM = typeof this.settings.invertPWM !== "undefined" ?
      this.settings.invertPWM : false;

    Object.defineProperties(this, device);

    if (this.settings.register) {
      this.settings.controller = "ShiftRegister";
    }

    /**
     * Note: Controller decorates the device. Used for adding
     * special controllers (i.e. PCA9685)
     **/
    if (this.settings.controller) {
      typeof this.settings.controller === "string" ?
        Controllers$5[this.settings.controller] : this.settings.controller;

      Board$7.Controller.call(this, Controllers$5, options);
    }

    // current just wraps a Sensor
    if (this.settings.current) {
      this.settings.current.board = this.board;
      this.current = new Sensor$1(this.settings.current);
    }

    // Create a "state" entry for privately
    // storing the state of the motor
    state = {
      isOn: false,
      currentSpeed: typeof this.settings.speed !== "undefined" ?
        this.settings.speed : 128,
      braking: false,
      enabled: false
    };

    priv$6.set(this, state);

    Object.defineProperties(this, {
      // Calculated, read-only motor on/off state
      // true|false
      isOn: {
        get: function() {
          return state.isOn;
        }
      },
      currentSpeed: {
        get: function() {
          return state.currentSpeed;
        }
      },
      braking: {
        get: function() {
          return state.braking;
        }
      },
      enabled: {
        get: function() {
          return state.enabled;
        }
      }
    });

    // We need to store and initialize the state of the dir pin(s)
    this.direction = {
      value: 1
    };

    if (this.initialize) {
      this.initialize(options);
    }

    this.validatePins();
    this.enable();
    this.dir(this.direction);
  }
}

Motor.prototype.initialize = function() {
  this.io.pinMode(this.pins.pwm, this.io.MODES.PWM);

  ["dir", "cdir", "brake", "enable"].forEach(pin => {
    if (typeof this.pins[pin] !== "undefined") {
      this.io.pinMode(this.pins[pin], this.io.MODES.OUTPUT);
    }
  });
};

Motor.prototype.setPin = function(pin, value) {
  this.io.digitalWrite(pin, value);
};

Motor.prototype.setPWM = function(pin, value) {
  this.io.analogWrite(pin, Fn$5.map(value, 0, 255, 0, this.board.RESOLUTION.PWM));
};

Motor.prototype.speed = function(options) {
  var state = priv$6.get(this);

  if (typeof options === "undefined") {
    return state.currentSpeed;
  } else {

    if (typeof options === "number") {
      options = {
        speed: options
      };
    }

    options.speed = Board$7.constrain(options.speed, 0, 255);

    options.saveSpeed = typeof options.saveSpeed !== "undefined" ?
      options.saveSpeed : true;

    if (options.speed < this.threshold) {
      options.speed = 0;
    }

    state.isOn = options.speed === 0 ? false : true;

    if (options.saveSpeed) {
      state.currentSpeed = options.speed;
    }

    if (options.braking) {
      state.braking = true;
    }

    if (this.invertPWM && this.direction.value === 1) {
      options.speed ^= 0xff;
    }

    this.setPWM(this.pins.pwm, options.speed);

    return this;
  }

};

// start a motor - essentially just switch it on like a normal motor
Motor.prototype.start = function(speed) {
  // Send a signal to turn on the motor and run at given speed in whatever
  // direction is currently set.
  if (this.pins.brake && this.braking) {
    this.setPin(this.pins.brake, 0);
  }

  // get current speed if nothing provided.
  speed = typeof speed !== "undefined" ?
    speed : this.speed();

  this.speed({
    speed: speed,
    braking: false
  });

  // "start" event is fired when the motor is started
  if (speed > 0) {
    process.nextTick(() => this.emit("start"));
  }

  return this;
};

Motor.prototype.stop = function() {
  this.speed({
    speed: 0,
    saveSpeed: false
  });
  process.nextTick(() => this.emit("stop"));

  return this;
};

Motor.prototype.brake = function(duration) {
  if (typeof this.pins.brake === "undefined") {
    if (this.board.io.name !== "Mock") {
      console.log("Non-braking motor type");
    }
    this.stop();
  } else {
    this.setPin(this.pins.brake, 1);
    this.setPin(this.pins.dir, 1);
    this.speed({
      speed: 255,
      saveSpeed: false,
      braking: true
    });
    process.nextTick(() => this.emit("brake"));

    if (duration) {
      var motor = this;
      this.board.wait(duration, function() {
        motor.resume();
      });
    }
  }

  return this;
};

Motor.prototype.release = function() {
  this.resume();
  process.nextTick(() => this.emit("release"));

  return this;
};

Motor.prototype.resume = function() {
  var speed = this.speed();
  this.dir(this.direction);
  this.start(speed);

  return this;
};

Motor.prototype.enable = function() {
  var state = priv$6.get(this);
  if (typeof this.pins.enable !== "undefined" && !state.enabled) {
    this.setPin(this.pins.enable, 1);
    state.enabled = true;
  }
};

Motor.prototype.disable = function() {
  var state = priv$6.get(this);
  if (typeof this.pins.enable !== "undefined" && state.enabled) {
    this.setPin(this.pins.enable, 0);
    state.enabled = false;
  }
};

// Check for required pins
Motor.prototype.validatePins = function() {

  if (typeof this.pins.pwm === "undefined") {
    throw new Error("PWM pin must be defined");
  }

  if (typeof this.pins.dir === "undefined" && this.settings.device !== "NONDIRECTIONAL") {
    throw new Error("DIR pin must be defined");
  }

  if (this.settings.device === "CDIR" && typeof this.pins.cdir === "undefined") {
    throw new Error("CDIR pin must be defined for three wire motors");
  }
};

[
  /**
   * forward Turn the Motor in its forward direction
   * fwd Turn the Motor in its forward direction
   *
   * @param  {Number} 0-255, 0 is stopped, 255 is fastest
   * @return {Object} this
   */
  {
    name: "forward",
    abbr: "fwd",
    value: 1
  },
  /**
   * reverse Turn the Motor in its reverse direction
   * rev Turn the Motor in its reverse direction
   *
   * @param  {Number} 0-255, 0 is stopped, 255 is fastest
   * @return {Object} this
   */
  {
    name: "reverse",
    abbr: "rev",
    value: 0
  }
].forEach(dir => {
  Motor.prototype[dir.name] = Motor.prototype[dir.abbr] = function(speed) {
    this.dir(dir);
    this.start(speed);
    return this;
  };
});

Motor.SHIELD_CONFIGS = {
  ADAFRUIT_V1: {
    M1: {
      pins: {
        pwm: 11
      },
      register: {
        data: 8,
        clock: 4,
        latch: 12
      },
      bits: {
        a: 2,
        b: 3
      }
    },
    M2: {
      pins: {
        pwm: 3
      },
      register: {
        data: 8,
        clock: 4,
        latch: 12
      },
      bits: {
        a: 1,
        b: 4
      }
    },
    M3: {
      pins: {
        pwm: 6
      },
      register: {
        data: 8,
        clock: 4,
        latch: 12
      },
      bits: {
        a: 5,
        b: 7
      }
    },
    M4: {
      pins: {
        pwm: 5
      },
      register: {
        data: 8,
        clock: 4,
        latch: 12
      },
      bits: {
        a: 0,
        b: 6
      }
    }
  },
  ADAFRUIT_V2: {
    M1: {
      pins: {
        pwm: 8,
        dir: 9,
        cdir: 10
      },
      address: 0x60,
      controller: "PCA9685"
    },
    M2: {
      pins: {
        pwm: 13,
        dir: 12,
        cdir: 11
      },
      address: 0x60,
      controller: "PCA9685"
    },
    M3: {
      pins: {
        pwm: 2,
        dir: 3,
        cdir: 4
      },
      address: 0x60,
      controller: "PCA9685"
    },
    M4: {
      pins: {
        pwm: 7,
        dir: 6,
        cdir: 5
      },
      address: 0x60,
      controller: "PCA9685"
    }
  },
  SEEED_STUDIO: {
    A: {
      pins: {
        pwm: 9,
        dir: 8,
        cdir: 11
      }
    },
    B: {
      pins: {
        pwm: 10,
        dir: 12,
        cdir: 13
      }
    }
  },
  FREETRONICS_HBRIDGE: {
    A: {
      pins: {
        pwm: 6,
        dir: 4,
        cdir: 7
      }
    },
    B: {
      pins: {
        pwm: 5,
        dir: 3,
        cdir: 2
      }
    }
  },
  ARDUINO_MOTOR_SHIELD_R3_1: {
    A: {
      pins: {
        pwm: 3,
        dir: 12
      }
    },
    B: {
      pins: {
        pwm: 11,
        dir: 13
      }
    }
  },
  ARDUINO_MOTOR_SHIELD_R3_2: {
    A: {
      pins: {
        pwm: 3,
        dir: 12,
        brake: 9
      }
    },
    B: {
      pins: {
        pwm: 11,
        dir: 13,
        brake: 8
      }
    }
  },
  ARDUINO_MOTOR_SHIELD_R3_3: {
    A: {
      pins: {
        pwm: 3,
        dir: 12,
        brake: 9,
        current: "A0"
      }
    },
    B: {
      pins: {
        pwm: 11,
        dir: 13,
        brake: 8,
        current: "A1"
      }
    }
  },
  DF_ROBOT: {
    A: {
      pins: {
        pwm: 6,
        dir: 7
      }
    },
    B: {
      pins: {
        pwm: 5,
        dir: 4
      }
    }
  },
  NKC_ELECTRONICS_KIT: {
    A: {
      pins: {
        pwm: 9,
        dir: 12
      }
    },
    B: {
      pins: {
        pwm: 10,
        dir: 13
      }
    }
  },
  RUGGED_CIRCUITS: {
    A: {
      pins: {
        pwm: 3,
        dir: 12
      }
    },
    B: {
      pins: {
        pwm: 11,
        dir: 13
      }
    }
  },
  SPARKFUN_ARDUMOTO: {
    A: {
      pins: {
        pwm: 3,
        dir: 12
      }
    },
    B: {
      pins: {
        pwm: 11,
        dir: 13
      }
    }
  },
  POLOLU_DRV8835_SHIELD: {
    M1: {
      pins: {
        pwm: 9,
        dir: 7
      }
    },
    M2: {
      pins: {
        pwm: 10,
        dir: 8
      }
    }
  },
  POLOLU_VNH5019_SHIELD: {
    M1: {
      pins: {
        pwm: 9,
        dir: 2,
        cdir: 4,
        enable: 6
      }
    },
    M2: {
      pins: {
        pwm: 10,
        dir: 7,
        cdir: 8,
        enable: 12
      }
    }
  },
  MICRO_MAGICIAN_V2: {
    A: {
      pins: {
        pwm: 6,
        dir: 8
      },
      invertPWM: true
    },
    B: {
      pins: {
        pwm: 5,
        dir: 7
      },
      invertPWM: true
    }
  },
  SPARKFUN_LUDUS: {
    A: {
      pins: {
        pwm: 3,
        dir: 4,
        cdir: 5
      }
    },
    B: {
      pins: {
        pwm: 6,
        dir: 7,
        cdir: 8
      }
    }
  },
  SPARKFUN_DUAL_HBRIDGE_EDISON_BLOCK: {
    A: {
      pins: {
        pwm: 20,
        dir: 33,
        cdir: 46,
        enable: 47
      }
    },
    B: {
      pins: {
        pwm: 14,
        dir: 48,
        cdir: 36,
        enable: 47
      }
    }
  },
  PICAR_V: {
    A: {
      controller: "PCA9685_Hybrid",
      pins: {
        pwm: 4,
        dir: "GPIO17"
      }
    },
    B: {
      controller: "PCA9685_Hybrid",
      pins: {
        pwm: 5,
        dir: "GPIO27"
      }
    }
  }
};

/**
 * Motors()
 * new Motors()
 */
class Motors extends Collection$4 {
  constructor(numsOrObjects) {
    super(numsOrObjects);
  }
  get type() {
    return Motor;
  }
}

/*
 * Motors, forward(speed)/fwd(speed)
 *
 * eg. array.forward(speed);

 * Motors, reverse(speed)/rev(speed)
 *
 * eg. array.reverse(speed);

 * Motors, start(speed)
 *
 * eg. array.start(speed);

 * Motors, stop()
 *
 * eg. array.stop();

 * Motors, brake()
 *
 * eg. array.brake();

 * Motors, release()
 *
 * eg. array.release();
 */

Collection$4.installMethodForwarding(
  Motors.prototype, Motor.prototype
);

Motor.Collection = Motors;

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  Motor.Controllers = Controllers$5;
  Motor.purge = function() {
    priv$6.clear();
    registers.clear();
  };
}

var motor = Motor;

function NanoTimer(log){

    var version = process.version;
	var major = version.split('.')[0];
	major = major.split('v')[1];
    var minor = version.split('.')[1];
    if ((major == 0) && (minor < 10)){
        console.log('Error: Please update to the latest version of node! This library requires 0.10.x or later');
        process.exit(0);
    }
	
	//Time reference variables
    this.intervalT1 = null;
	this.timeOutT1 = null;
    this.intervalCount = 1; 
	
	//Deferred reference indicator variables.  Indicate whether the timer used/will use the deferred call. ie - delay/interval > 25ms
    this.deferredInterval = false;
    this.deferredTimeout = false;
	
	//Deferred reference variables.  Used to clear the native js timeOut calls
	this.deferredTimeoutRef = null;
	this.deferredIntervalRef = null;
	
	//Callback reference variables.  Used to be able to still successfully call callbacks when timeouts or intervals are cleared.
	this.timeoutCallbackRef = null;
	this.intervalCallbackRef = null;
	
	//Immediate reference variables. Used to clear functions scheduled with setImmediate from running in the event timeout/interval is cleared.
	this.timeoutImmediateRef = null;
	this.intervalImmediateRef = null;
	
	this.intervalErrorChecked = false;
	
	this.intervalType = "";
    
    if(log){
        this.logging = true;
    }
}

NanoTimer.prototype.time = function(task, args, format, callback){
  //Asynchronous task
    if(callback){
        var t1 = process.hrtime();
        
        
        if(args){
        
            args.push(function(){
                var time = process.hrtime(t1);
                if(format == 's'){
                    callback(time[0] + time[1]/1000000000);
                } else if (format == 'm'){
                    callback(time[0]/1000 + time[1]/1000000);
                } else if (format == 'u'){
                    callback(time[0]/1000000 + time[1]/1000);
                } else if (format == 'n'){
                    callback(time[0]/1000000000 + time[1]);
                } else {
                    callback(time); 
                }
            });
           
            task.apply(null, args);
        } else {
            task(function(){
                var time = process.hrtime(t1);
                if(format == 's'){
                    callback(time[0] + time[1]/1000000000);
                } else if (format == 'm'){
                    callback(time[0]/1000 + time[1]/1000000);
                } else if (format == 'u'){
                    callback(time[0]/1000000 + time[1]/1000);
                } else if (format == 'n'){
                    callback(time[0]/1000000000 + time[1]);
                } else {
                    callback(time); 
                }
            });
        }
        
    //Synchronous task
    } else {
        var t1 = process.hrtime();
        
        if(args){
            task.apply(null, args);
        } else {
            task();
        }
        
        var t2 = process.hrtime(t1);
        
        if(format == 's'){
            return t2[0] + t2[1]/1000000000;
        } else if (format == 'm'){
            return t2[0]/1000 + t2[1]/1000000;
        } else if (format == 'u'){
            return t2[0]/1000000 + t2[1]/1000;
        } else if (format == 'n'){
            return t2[0]/1000000000 + t2[1];
        } else {
            return process.hrtime(t1);
        } 
    } 
};

NanoTimer.prototype.setInterval = function(task, args, interval, callback){

	if(!this.intervalErrorChecked){
		//Task error handling
		if(!task){
			console.log("A task function must be specified to setInterval");
			process.exit(1);
		} else {
			if(typeof(task) != "function"){
				console.log("Task argument to setInterval must be a function reference");
				process.exit(1);
			}
		}
		
		//Interval error handling
		if(!interval){
			console.log("An interval argument must be specified");
			process.exit(1);
		} else {
			if(typeof(interval) != "string"){
				console.log("Interval argument to setInterval must be a string specified as an integer followed by 's' for seconds, 'm' for milli, 'u' for micro, and 'n' for nanoseconds. Ex. 2u");
				process.exit(1);
			}
		}
		
		//This ref is used if deferred timeout is cleared, so the callback can still be accessed
		if(callback){
			if(typeof(callback) != "function"){
				console.log("Callback argument to setInterval must be a function reference");
				process.exit(1);
			} else {
				this.intervalCallbackRef = callback;
			}
		}
		
		this.intervalType = interval[interval.length-1];
		
		if(this.intervalType == 's'){
			this.intervalTime = interval.slice(0, interval.length-1) * 1000000000;
		} else if(this.intervalType == 'm'){
			this.intervalTime = interval.slice(0, interval.length-1) * 1000000;
		} else if(this.intervalType == 'u'){
			this.intervalTime = interval.slice(0, interval.length-1) * 1000;
		} else if(this.intervalType == 'n'){
			this.intervalTime = interval.slice(0, interval.length-1);
		} else {
			console.log('Error with argument: ' + interval + ': Incorrect interval format. Format is an integer followed by "s" for seconds, "m" for milli, "u" for micro, and "n" for nanoseconds. Ex. 2u');
			process.exit(1);
		}
		
		this.intervalErrorChecked = true;
	}

    //Avoid dereferencing inside of function objects later
	//Must be performed on every execution 
    var thisTimer = this;
    
    if(this.intervalTime > 0){
        
        //Check and set constant t1 value.
        if(this.intervalT1 == null){
            this.intervalT1 = process.hrtime();
        }
        
        //Check for overflow.  Every 8,000,000 seconds (92.6 days), this will overflow
        //and the reference time T1 will be re-acquired.  This is the only case in which error will 
        //propagate.
        if(this.intervalTime*this.intervalCount > 8000000000000000){
            this.intervalT1 = process.hrtime();
            this.intervalCount = 1;
        }
		
        
        //Get comparison time
        this.difArray = process.hrtime(this.intervalT1);
        this.difTime = (this.difArray[0] * 1000000000) + this.difArray[1];
        
		//If updated time < expected time, continue
        //Otherwise, run task and update counter
		if(this.difTime < (this.intervalTime*this.intervalCount)){
			
			//Can potentially defer to less accurate setTimeout if intervaltime > 25ms
			if(this.intervalTime > 25000000){
				if(this.deferredInterval == false){
					this.deferredInterval = true;
					msDelay = (this.intervalTime - 25000000) / 1000000.0;
					this.deferredIntervalRef = setTimeout(function(){thisTimer.setInterval(task, args, interval, callback);}, msDelay);
				} else {
					this.deferredIntervalRef = null;
					this.intervalImmediateRef = setImmediate(function(){thisTimer.setInterval(task, args, interval, callback);});
				}
			} else {
				this.intervalImmediateRef = setImmediate(function(){thisTimer.setInterval(task, args, interval, callback);});
			}
		} else {
			
			this.intervalImmediateRef = null;
			
			if(this.logging){
				console.log('nanotimer log: ' + 'cycle time at - ' + this.difTime);
			}
			
			
			
			if(args){
				task.apply(null, args);
			} else {
				task();
			}
			
			//Check if the intervalT1 is still not NULL. If it is, that means the task cleared the interval so it should not run again.
			if(this.intervalT1){
				this.intervalCount++;
				this.deferredInterval = false;
				this.intervalImmediateRef = setImmediate(function(){thisTimer.setInterval(task, args, interval, callback);});
			}
		}
        
    //If interval = 0, run as fast as possible.
    } else {
        
      //Check and set constant t1 value.
        if(this.intervalT1 == null){
            this.intervalT1 = process.hrtime();
            this.intervalContinue = true;
        }
        
        if(this.intervalContinue == true) {
            if(args){
                task.apply(null, args);
            } else {
                task();
            }
            setImmediate(function(){thisTimer.setInterval(task, args, interval, callback);});
        } else {
            this.intervalT1 = null;
            this.intervalCount = 1;
            callback();
        }  
    }
};

NanoTimer.prototype.setTimeout = function(task, args, delay, callback){

	//Task error handling
	if(!task){
		console.log("A task function must be specified to setTimeout");
		process.exit(1);
	} else {
		if(typeof(task) != "function"){
			console.log("Task argument to setTimeout must be a function reference");
			process.exit(1);
		}
	}
	
	//Delay error handling
	if(!delay){
		console.log("A delay argument must be specified");
		process.exit(1);
	} else {
		if(typeof(delay) != "string"){
			console.log("Delay argument to setTimeout must be a string specified as an integer followed by 's' for seconds, 'm' for milli, 'u' for micro, and 'n' for nanoseconds. Ex. 2u");
			process.exit(1);
		}
	}
	
	//This ref is used if deferred timeout is cleared, so the callback can still be accessed
	if(callback){
		if(typeof(callback) != "function"){
			console.log("Callback argument to setTimeout must be a function reference");
			process.exit(1);
		} else {
			this.timeoutCallbackRef = callback;
		}
	}
    
    //Avoid dereferencing
    var thisTimer = this;
    
	var delayType = delay[delay.length-1];

	if(delayType == 's'){
		var delayTime = delay.slice(0, delay.length-1) * 1000000000;
	} else if(delayType == 'm'){
		var delayTime = delay.slice(0, delay.length-1) * 1000000;
	} else if(delayType == 'u'){
		var delayTime = delay.slice(0, delay.length-1) * 1000;
	} else if(delayType == 'n'){
		var delayTime = delay.slice(0, delay.length-1);
	} else {
		console.log('Error with argument: ' + delay + ': Incorrect delay format. Format is an integer followed by "s" for seconds, "m" for milli, "u" for micro, and "n" for nanoseconds. Ex. 2u');
		process.exit(1);
	}
    
    //Set marker
	if(this.timeOutT1 == null){
		this.timeOutT1 = process.hrtime();
	}
	
	
	var difArray = process.hrtime(this.timeOutT1);
	var difTime = (difArray[0] * 1000000000) + difArray[1];
    
    
	if(difTime < delayTime){
		//Can potentially defer to less accurate setTimeout if delayTime > 25ms
		if(delayTime > 25000000){
			if(this.deferredTimeout == false){
				this.deferredTimeout = true;
				msDelay = (delayTime - 25000000) / 1000000.0;
				this.deferredTimeoutRef = setTimeout(function(){thisTimer.setTimeout(task, args, delay, callback);}, msDelay);
			} else {
				this.deferredTimeoutRef = null;
				this.timeoutImmediateRef = setImmediate(function(){thisTimer.setTimeout(task, args, delay, callback);});
			}
		} else {
			this.timeoutImmediateRef = setImmediate(function(){thisTimer.setTimeout(task, args, delay, callback);});
		}
	} else {
		this.timeoutImmediateRef = null;
		this.timeOutT1 = null;
		this.deferredTimeout = false;
		
		if(this.logging == true){
			console.log('nanotimer log: ' + 'actual wait - ' + difTime);
		}
		
		if(args){
			task.apply(null, args);
		} else {
			task();
		}
		
		if(callback){
			var data = {'waitTime':difTime};
			callback(data);
		}

	}
};

NanoTimer.prototype.clearInterval = function(){
	if(this.deferredIntervalRef){
		clearTimeout(this.deferredIntervalRef);
		
		this.deferredInterval = false;
	}
	
	if(this.intervalImmediateRef){
		clearImmediate(this.intervalImmediateRef);
	}
	
	this.intervalT1 = null;
	this.intervalCount = 1;
	this.intervalErrorChecked = false;
	
	if(this.intervalCallbackRef){
		this.intervalCallbackRef();
	}
};

NanoTimer.prototype.clearTimeout = function(){
	
	if(this.deferredTimeoutRef){
		clearTimeout(this.deferredTimeoutRef);
		
		var difArray = process.hrtime(this.timeOutT1);
		var difTime = (difArray[0] * 1000000000) + difArray[1];
		
		this.deferredTimeout = false;
	}
	
	if(this.timeoutImmediateRef){
		clearImmediate(this.timeoutImmediateRef);
	}
	
	this.timeOutT1 = null;
	
	if(this.timeoutCallbackRef){
		var data = {'waitTime':difTime};
		this.timeoutCallbackRef(data);
	}
};

var nanoTimer = NanoTimer;

const Board$6 = requireBoard();
const Timer$1 = nanoTimer;

const MICROSECONDS_PER_SECOND = 1000000;
const priv$5 = new Map();
let defaultOctave = 4;

function clearTimer(target) {
  if (!target.timer) {
    return target;
  }

  target.timer.clearInterval();
  delete target.timer;

  return target;
}

const Controllers$4 = {
  /**
   * Timer-based tone generator using digital high/low piezo.
   */
  DEFAULT: {
    initialize: {
      writable: true,
      value() {
        this.io.pinMode(this.pin, this.io.MODES.OUTPUT);
      },
    },
    tone: {
      writable: true,
      value(tone, duration) {
        if (isNaN(tone) || isNaN(duration)) {
          // Very Bad Things happen if one tries to play a NaN tone
          throw new Error(
            "Piezo.tone: invalid tone or duration"
          );
        }

        clearTimer(this);

        this.timer = new Timer$1();
        let value = 1;

        this.timer.setInterval(() => {
          value = value === 1 ? 0 : 1;
          this.io.digitalWrite(this.pin, value);

          if ((this.timer.difTime / 1000000) > duration) {
            clearTimer(this);
          }
        }, null, `${tone}u`, () => {});

        return this;
      },
    },
    noTone: {
      writable: true,
      value() {
        this.io.digitalWrite(this.pin, 0);
        return clearTimer(this);
      },
    },
  },

  I2C_BACKPACK: {
    ADDRESSES: {
      value: [0x0A]
    },
    REGISTER: {
      value: {
        NO_TONE: 0x00,
        TONE: 0x01,
      },
    },
    initialize: {
      writable: true,
      value(options) {
        const { Drivers } = requireSip();
        const address = Drivers.addressResolver(this, options);
        const state = priv$5.get(this);

        this.io.i2cConfig(options);
        state.address = address;
      }
    },
    tone: {
      writable: true,
      value(tone, duration) {
        const state = priv$5.get(this);

        if (isNaN(tone) || isNaN(duration)) {
          throw new Error(
            "Piezo.tone: invalid tone or duration"
          );
        }

        this.io.i2cWrite(state.address, [
          this.REGISTER.TONE,
          this.pin,
          (tone >> 8) & 0xff,
          tone & 0xff,
          (duration >> 24) & 0xff,
          (duration >> 16) & 0xff,
          (duration >> 8) & 0xff,
          duration & 0xff,
        ]);

        return this;
      },
    },
    noTone: {
      writable: true,
      value() {
        const state = priv$5.get(this);

        this.io.i2cWrite(state.address, [
          this.REGISTER.NO_TONE,
          this.pin,
        ]);

        return this;
      },
    },
  },
};

class Piezo {
  constructor(options) {

    Board$6.Component.call(
      this, options = Board$6.Options(options)
    );

    Board$6.Controller.call(this, Controllers$4, options);

    // Piezo instance properties
    const state = {
      isPlaying: false,
      timeout: null,
      address: null,
    };

    priv$5.set(this, state);

    Object.defineProperties(this, {
      isPlaying: {
        get() {
          return state.isPlaying;
        }
      }
    });

    if (typeof this.initialize === "function") {
      this.initialize(options);
    }
  }

  /**
   * Play a note for a duration.
   * @param {string} note - see Piezo.Notes.  Case-insensitive.
   *   If a note name without an octave number is given (e.g. "C#" instead of
   *   "C#4") then the configured default octave will be used.
   *   @see Piezo.prototype.defaultOctave
   * @param {number} duration - in milliseconds.
   */
  note(note, duration) {
    return this.frequency(Piezo.Parsers.hzFromInput(note), duration);
  }

  /**
   * Play a tone for a duration.
   * This is a lower-level method than frequency (which does
   * the translation from frequency to tone for you). Most of
   * the time you likely want to use frequency.
   * @param {number} tone - Given as a computed duty-cycle,
   *   in microseconds. Larger values produce lower tones.
   *   See https://en.wikipedia.org/wiki/Duty_cycle
   * @param {number} duration - in milliseconds.
   */
  tone(tone, duration) {
    return this.frequency(Piezo.ToFrequency(tone), duration);
  }

  /**
   * Play a frequency for a duration.
   * @param {number} frequency - in Hz
   * @param {number} duration - in milliseconds
   */
  frequency(frequency, duration) {
    return this.tone(Piezo.ToTone(frequency), duration);
  }

  play(tune, callback) {
    if (typeof tune !== "object") {
      tune = {
        song: tune
      };
    }

    if (typeof tune.song === "string") {
      tune.song = Piezo.ToSong(tune.song, tune.beats);
    }

    if (tune.song && !Array.isArray(tune.song)) {
      /*
        If `tune.song` was present and not falsy,
        but also is not a string (above), or an array
        (presently), then it is likely a Hz value, so
        normalize song to the appropriate array format:
       */
      tune.song = [tune.song];
      /*
        Note: This path is taken for calls that look
        like this:

        piezo.play({
          song: 262,
        }, ...)

        Where 262 is a frequency in Hz
       */
    }

    const state = priv$5.get(this);
    const tempo = tune.tempo || 250;
    // Length for a single beat in ms
    const beatDuration = Math.round(60000 / tempo);
    const song = tune.song || [];
    let duration;
    let nextNoteIndex = 0;

    const next = () => {
      if (nextNoteIndex === song.length) {
        // No more notes in song:
        // Song is over
        state.isPlaying = false;
        if (typeof callback === "function") {
          callback(tune);
        }
        return;
      }

      const note = song[nextNoteIndex];
      const hz = Piezo.Parsers.hzFromInput(note);
      const beat = Piezo.Parsers.beatFromNote(note);

      duration = beat * beatDuration;
      nextNoteIndex++;

      if (hz === null) {
        this.noTone();
      } else {
        this.frequency(hz, duration);
      }

      state.timeout = setTimeout(next, duration);
    };

    // We are playing a song
    state.isPlaying = true;

    next();

    return this;
  }

  off() {
    return this.noTone();
  }

  stop() {
    const state = priv$5.get(this);

    /* istanbul ignore else */
    if (state.timeout) {
      clearTimeout(state.timeout);
      state.timeout = null;
    }

    return this;
  }
}

// These notes are rounded up at .5 otherwise down.
Piezo.Notes = {
  "c0": 16,
  "c#0": 17,
  "d0": 18,
  "d#0": 19,
  "e0": 21,
  "f0": 22,
  "f#0": 23,
  "g0": 25,
  "g#0": 26,
  "a0": 28,
  "a#0": 29,
  "b0": 31,
  "c1": 33,
  "c#1": 35,
  "d1": 37,
  "d#1": 39,
  "e1": 41,
  "f1": 44,
  "f#1": 47,
  "g1": 49,
  "g#1": 52,
  "a1": 55,
  "a#1": 58,
  "b1": 62,
  "c2": 65,
  "c#2": 69,
  "d2": 73,
  "d#2": 78,
  "e2": 82,
  "f2": 87,
  "f#2": 93,
  "g2": 98,
  "g#2": 104,
  "a2": 110,
  "a#2": 117,
  "b2": 124,
  "c3": 131,
  "c#3": 139,
  "d3": 147,
  "d#3": 156,
  "e3": 165,
  "f3": 175,
  "f#3": 185,
  "g3": 196,
  "g#3": 208,
  "a3": 220,
  "a#3": 233,
  "b3": 247,
  "c4": 262,
  "c#4": 277,
  "d4": 294,
  "d#4": 311,
  "e4": 330,
  "f4": 349,
  "f#4": 370,
  "g4": 392,
  "g#4": 415,
  "a4": 440,
  "a#4": 466,
  "b4": 494,
  "c5": 523,
  "c#5": 554,
  "d5": 587,
  "d#5": 622,
  "e5": 659,
  "f5": 698,
  "f#5": 740,
  "g5": 784,
  "g#5": 831,
  "a5": 880,
  "a#5": 932,
  "b5": 988,
  "c6": 1047,
  "c#6": 1109,
  "d6": 1175,
  "d#6": 1245,
  "e6": 1319,
  "f6": 1397,
  "f#6": 1480,
  "g6": 1568,
  "g#6": 1661,
  "a6": 1760,
  "a#6": 1865,
  "b6": 1976,
  "c7": 2093,
  "c#7": 2217,
  "d7": 2349,
  "d#7": 2489,
  "e7": 2637,
  "f7": 2794,
  "f#7": 2960,
  "g7": 3136,
  "g#7": 3322,
  "a7": 3520,
  "a#7": 3729,
  "b7": 3951,
  "c8": 4186,
  "c#8": 4435,
  "d8": 4699,
  "d#8": 4978,
  "e8": 5274,
  "f8": 5588,
  "f#8": 5920,
  "g8": 6272,
  "g#8": 6645,
  "a8": 7040,
  "a#8": 7459,
  "b8": 7902,
};

Piezo.Frequencies = Object.keys(Piezo.Notes).reduce((accum, note) => {
  accum[Piezo.Notes[note]] = note;
  return accum;
}, {});

Piezo.Parsers = {};
/**
 * Get the tone from the current note. note
 * could be an int, string, array or null.
 * If int or null, leave alone. Otherwise,
 * derive what the tone should be.
 * @return int | null
 */
Piezo.Parsers.hzFromInput = input => {
  let output = input;

  if (Array.isArray(input)) {
    output = input[0];
  }

  // Is it a valid frequency?
  if (typeof output === "number" &&
      Piezo.Frequencies[output]) {
    return output;
  }

  // See above: Piezo.Notes { ... }
  if (typeof output === "string") {
    output = output.toLowerCase().trim();

    // Example: c#, c
    if (output.endsWith("#") || output.length === 1) {
      output += defaultOctave;
    }

    // There will never be a 0 tone
    output = Piezo.Notes[output] || null;
  }

  // Normalize NaN, null & undefined to null
  if (isNaN(output)) {
    output = null;
  }

  return output;
};

/**
 * Obtain the beat/duration count from the current
 * note. This is either an int or undefined. Default
 * to 1.
 * @return int (default 1)
 */
Piezo.Parsers.beatFromNote = note => {
  let beat = 1;
  if (Array.isArray(note) && note[1] !== undefined) {
    // If extant, beat will be second element of note
    beat = note[1];
  }
  return beat;
};

/**
 * Validate the octave provided to ensure the value is
 * supported and won't crash the board.
 * @return bool
 */
Piezo.isValidOctave = octave => typeof octave === "number" && (octave >= 0 && octave <= 8);

/**
 * Set or get a default octave for all notes
 * @return number
 */
Piezo.defaultOctave = octave => {
  if (Piezo.isValidOctave(octave)) {
    defaultOctave = octave;
  }

  return defaultOctave;
};

Piezo.ToFrequency = tone => {
  const toneSeconds = tone / MICROSECONDS_PER_SECOND;
  const period = toneSeconds * 2;
  return Math.round(1 / period);
};

Piezo.ToTone = frequency => {
  const period = 1 / frequency;
  const duty = period / 2;
  return Math.round(duty * MICROSECONDS_PER_SECOND);
};

Piezo.ToSong = (stringSong, beats = 1) => {
  const notes = stringSong.split(" ");
  const song = [];
  let note;
  let lastNote;
  while (notes.length) {
    note = notes.shift();
    if (/^[0-9]+$/.test(note)) {
      note = parseInt(note, 10);
    }
    lastNote = song[song.length - 1];
    if (lastNote && lastNote[0] === note) {
      lastNote[1] += beats;
    } else {
      song.push([note, beats]);
    }
  }
  return song;
};


var piezo = Piezo;

const Board$5 = requireBoard();
const Collection$3 = collection;
const EVS = evshield;
const Fn$4 = fn;
const Withinable = withinable;
const Pins$2 = Board$5.Pins;

const toFixed = Fn$4.toFixed;

const priv$4 = new Map();

function analogHandler(options, callback) {
  this.io.pinMode(this.pin, this.io.MODES.ANALOG);
  this.io.analogRead(this.pin, data => {
    callback.call(this, data);
  });
}

const Controllers$3 = {
  GP2Y0A21YK: {
    // https://www.sparkfun.com/products/242
    initialize: {
      value: analogHandler
    },
    toCm: {
      value(value) {
        return toFixed(12343.85 * (value ** -1.15), 2);
      }
    }
  },
  GP2D120XJ00F: {
    // https://www.sparkfun.com/products/8959
    initialize: {
      value: analogHandler
    },
    toCm: {
      value(value) {
        return toFixed((2914 / (value + 5)) - 1, 2);
      }
    }
  },
  GP2Y0A02YK0F: {
    // https://www.sparkfun.com/products/8958
    // 15cm - 150cm
    initialize: {
      value: analogHandler
    },
    toCm: {
      value(value) {
        return toFixed(10650.08 * (value ** -0.935) - 10, 2);
      }
    }
  },
  GP2Y0A41SK0F: {
    // https://www.sparkfun.com/products/12728
    // 4cm - 30cm
    initialize: {
      value: analogHandler
    },
    toCm: {
      value(value) {
        return toFixed(2076 / (value - 11), 2);
      }
    }
  },
  GP2Y0A710K0F: {
    // https://www.adafruit.com/products/1568
    // 100cm - 500cm
    initialize: {
      value: analogHandler
    },
    toCm: {
      value(value) {
        return toFixed(3.8631e8 * (value ** -2.463343), 0);
      }
    }
  },
  SRF10: {
    ADDRESSES: {
      value: [0x70]
    },
    initialize: {
      value(options, callback) {
        const { Drivers } = requireSip();
        const address = Drivers.addressResolver(this, options);
        const msUntilNextRead = 65;

        // Set up I2C data connection
        this.io.i2cConfig(options);

        // Startup parameter
        this.io.i2cWrite(address, [0x01, 0x10]);
        this.io.i2cWrite(address, [0x02, 0xFF]);

        const read = () => {
          // 0x51 result in cm (centimeters)
          this.io.i2cWrite(address, [0x00, 0x51]);
          setTimeout(() => {
            this.io.i2cWrite(address, [0x02]);
            this.io.i2cReadOnce(address, 2, data => callback((data[0] << 8) | data[1]));
            read();
          }, msUntilNextRead);
        };

        read();
      }
    },
    toCm: {
      value(value) {
        return value;
      }
    }
  },
  // LV-MaxSonar-EZ
  // LV-MaxSonar-EZ0
  // LV-MaxSonar-EZ1
  MB1000: {
    initialize: {
      value: analogHandler
    },
    toCm: {
      value(value) {
        // From http://www.maxbotix.com/articles/032.htm
        // ADC -> inches -> cm
        //
        //
        // From intro in page 1
        // 'The LV-MaxSonar-EZ detects objects
        // from 0-inches to 254-inches (6.45-meters) and provides sonar range information from 6-
        // inches out to 254-inches with 1-inch resolution.'
        // 1inch = 2.54cm
        return toFixed((value / 2) * 2.54, 2);
      }
    }
  },
  // HRLV-MaxSonar-EZ0
  MB1003: {
    initialize: {
      value: analogHandler
    },
    toCm: {
      value(value) {
        // http://www.maxbotix.com/articles/032.htm
        //
        //
        // From intro in page 1
        // 'This sensor line features 1-mm resolution, .....'
        return toFixed(value / 2, 1);
      }
    }
  },
  // XL-MaxSonar-EZ3
  MB1230: {
    initialize: {
      value: analogHandler
    },
    toCm: {
      value(value) {
        // From http://www.maxbotix.com/articles/016.htm
        // Using a Standard Range XL-MaxSonar with an ADC (Analog Digital Converter)
        // When using a standard XL-MaxSonar with an ADC, verify that the sensor
        // and micro-controller are referencing the same power supply and ground.
        // This also assumes that the ADC being used is perfectly accurate.
        // When reading the sensor's output with the scaling in centimeters with a
        // 10-bit ADC, the range can be read directly off the ADC.
        // If the ADC output reads 700 the range in centimeters is 700 centimeters.
        //
        // ADC -> cm
        //
        //
        // From intro on page 1
        // 'The MB1200 and MB1300 sensor series detects objects from 0-cm1
        //  to 765-cm (25.1 feet) or 1068cm (35 feet) (select models) and
        // provide sonar range information from 20-cm2
        //  out to765-cm or 1068-cm (select models) with 1-cm resolution...'
        return value >> 0;
      }
    }
  },
  HCSR04: {
    initialize: {
      value(options, callback) {
        let pinValue = options.pinValue;
        const msToNextRead = 65;

        if (Pins$2.isFirmata(this)) {
          if (typeof pinValue === "string" &&
              (pinValue.length > 1 && pinValue[0] === "A")) {
            pinValue = this.io.analogPins[+pinValue.slice(1)];
          }

          pinValue = +pinValue;

          if (this.io.analogPins.includes(pinValue)) {
            options.pin = pinValue;
          }

          this.pin = options.pin;
        }

        // Private settings object
        const settings = {
          pin: options.pin,
          value: this.io.HIGH,
          pulseOut: 5,
        };

        const read = () => {
          this.io.pingRead(settings, microseconds => {
            callback(microseconds);
            setTimeout(read, msToNextRead);
          });
        };

        read();
      }
    },
    toCm: {
      value(value) {
        // https://www.sparkfun.com/products/13959
        //
        //
        // From `Product features` paragraph at page 1
        // 'Ultrasonic ranging module HC - SR04 provides 2cm - 400cm non-contact
        // measurement function, the ranging accuracy can reach to 3mm'
        return toFixed(value / 29.1 / 2, 1);
      }
    }
  },
  HCSR04I2CBACKPACK: {
    ADDRESSES: {
      value: [
        0x27
      ]
    },
    initialize: {
      value(options, callback) {
        const { Drivers } = requireSip();
        const address = Drivers.addressResolver(this, options);
        const msToNextRead = 90;

        // set up IO connection:
        this.io.i2cConfig(options);

        if (typeof options.pin === "undefined") {
          this.pin = 8;
        }

        const read = () => {
          // Read the 2 data bytes from the "register" for the pin.
          // When firmware is complete, update to:
          // this.io.i2cReadOnce(address, this.pin, 2, function(data) {
          this.io.i2cReadOnce(address, 2, data => {
            callback((data[0] << 8) + data[1]);
            setTimeout(read, msToNextRead);
          });
        };

        read();
      }
    },
    toCm: {
      value(value) {
        return toFixed(value / 29.1 / 2, 1);
      }
    }
  },
  LIDARLITE: {
    ADDRESSES: {
      value: [
        0x62
      ]
    },
    REGISTER: {
      value: {
        ENABLE: 0x00,
        READ: 0x8F,
      }
    },
    initialize: {
      value(options, callback) {
        const { Drivers } = requireSip();
        const address = Drivers.addressResolver(this, options);

        this.io.i2cConfig(options);

        const read = () => {
          this.io.i2cWrite(address, this.REGISTER.ENABLE, 0x04);
          setTimeout(() => {
            this.io.i2cReadOnce(address, this.REGISTER.READ, 2, bytes => {
              // Step 5 of Quick Start Guide
              callback((bytes[0] << 8) + bytes[1]);
              read();
            });
          }, 20);
        };

        read();
      }
    },
    toCm: {
      value(value) {

        //
        // From `Technology` paragraph at page 11
        // 'Our patented, high"accuracy"
        // measurement"technique"enables"distance"measurement"accuracy down"to 1cm..'
        return value >> 0;
      }
    }
  },
  EVS_EV3_IR: {
    initialize: {
      value(options, callback) {
        const state = priv$4.get(this);

        state.shield = EVS.shieldPort(options.pin);

        state.ev3 = new EVS(Object.assign(options, {
          io: this.io
        }));
        state.ev3.setup(state.shield, EVS.Type_EV3);
        state.ev3.read(state.shield, EVS.Proximity, EVS.Proximity_Bytes, data => callback(data[0] | (data[1] << 8)));
      }
    },
    toCm: {
      value(value) {
        return value;
      }
    }
  },
  EVS_EV3_US: {
    initialize: {
      value(options, callback) {
        const state = priv$4.get(this);

        state.shield = EVS.shieldPort(options.pin);

        state.ev3 = new EVS(Object.assign(options, {
          io: this.io
        }));
        state.ev3.setup(state.shield, EVS.Type_EV3);
        state.ev3.read(state.shield, EVS.Proximity, EVS.Proximity_Bytes, data => callback(data[0] | (data[1] << 8)));
      }
    },
    toCm: {
      value(value) {
        return value / 10;
      }
    }
  },
};

// Sensor aliases
// IR
Controllers$3["2Y0A21"] = Controllers$3.GP2Y0A21YK;
Controllers$3["2D120X"] = Controllers$3.GP2D120XJ00F;
Controllers$3["2Y0A02"] = Controllers$3.GP2Y0A02YK0F;
Controllers$3["0A41"] = Controllers$3.GP2Y0A41SK0F;
Controllers$3["0A21"] = Controllers$3.GP2Y0A21YK;
Controllers$3["0A02"] = Controllers$3.GP2Y0A02YK0F;
Controllers$3["41SK0F"] = Controllers$3.GP2Y0A41SK0F;
Controllers$3["21YK"] = Controllers$3.GP2Y0A21YK;
Controllers$3["2YK0F"] = Controllers$3.GP2Y0A02YK0F;

// Sonar
Controllers$3.MB1010 = Controllers$3.MB1000;

Controllers$3["LV-MaxSonar-EZ"] = Controllers$3.MB1000;
Controllers$3["LV-MaxSonar-EZ0"] = Controllers$3.MB1000;
Controllers$3["LV-MaxSonar-EZ1"] = Controllers$3.MB1010;
Controllers$3["HRLV-MaxSonar-EZ0"] = Controllers$3.MB1003;
Controllers$3["XL-MaxSonar-EZ3"] = Controllers$3.MB1230;

// Ping
[
  "HC-SR04",
  "SR04",
  "SRF05",
  "SRF06",
  "PARALLAXPING",
  "SEEEDPING",
  "GROVEPING",
  "PING_PULSE_IN",
  "ULTRASONIC_PING",
].forEach(alias => {
  Controllers$3[alias] = Controllers$3.HCSR04;
});

// Ping/HCSR04 I2C Backpack
[
  "HCSR04-I2C-BACKPACK",
  "HC-SR04-I2C-BACKPACK",
  "SR04-I2C-BACKPACK",
  "SR04I2CBACKPACK",
  "PINGI2CBACKPACK",
  "PING-I2C-BACKPACK",
  "HCSR04_I2C_BACKPACK",
  "HC_SR04_I2C_BACKPACK",
  "SR04_I2C_BACKPACK",
  "SR04I2CBACKPACK",
  "PINGI2CBACKPACK",
  "PING_I2C_BACKPACK",
].forEach(alias => {
  Controllers$3[alias] = Controllers$3.HCSR04I2CBACKPACK;
});


// LIDAR Lite
Controllers$3["LIDAR-Lite"] = Controllers$3.LIDARLITE;
Controllers$3.DEFAULT = Controllers$3["GP2Y0A21YK"];

/**
 * Proximity
 * @constructor
 *
 * five.Proximity("A0");
 *
 * five.Proximity({
 *  controller: "GP2Y0A41SK0F",
 *  pin: "A0",
 *  freq: 100
 * });
 *
 *
 * @param {Object} options [description]
 *
 */

class Proximity extends Withinable {
  constructor(options) {
    super();

    const pinValue = typeof options === "object" ? options.pin : options;

    Board$5.Component.call(
      this, options = Board$5.Options(options)
    );

    Board$5.Controller.call(this, Controllers$3, options);

    const state = {};
    const freq = options.freq || 25;
    let raw = 0;
    let last = 0;

    if (!this.toCm) {
      this.toCm = options.toCm || (x => x);
    }

    priv$4.set(this, state);

    Object.defineProperties(this, {
      /**
       * [read-only] Calculated centimeter value
       * @property centimeters
       * @type Number
       */
      centimeters: {
        get() {
          return this.toCm(raw);
        }
      },
      cm: {
        get() {
          return this.centimeters;
        }
      },
      /**
       * [read-only] Calculated inch value
       * @property inches
       * @type Number
       */
      inches: {
        get() {
          return toFixed(this.centimeters * 0.39, 2);
        }
      },
      in: {
        get() {
          return this.inches;
        }
      },
    });

    if (typeof this.initialize === "function") {
      options.pinValue = pinValue;
      this.initialize(options, data => raw = data);
    }

    setInterval(() => {
      if (raw === undefined) {
        return;
      }

      const data = {
        cm: this.cm,
        centimeters: this.centimeters,
        in: this.in,
        inches: this.inches
      };

      this.emit("data", data);

      if (raw !== last) {
        last = raw;
        this.emit("change", data);
      }
    }, freq);
  }

}
/**
 * new Proximity.Collection();
 */

Proximity.Collection = class extends Collection$3.Emitter {
  constructor(numsOrObjects) {
    super(numsOrObjects);
  }

  get type() {
    return Proximity;
  }
};

Collection$3.installMethodForwarding(
  Proximity.Collection.prototype, Proximity.prototype
);

Proximity.Controllers = Object.keys(Controllers$3);

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  Proximity.Controllers = Controllers$3;
  Proximity.purge = () => {
    priv$4.clear();
  };
}

var proximity = Proximity;

const Board$4 = requireBoard();
const Emitter$2 = emitter;
const Fn$3 = fn;
const Led = led;
const Sensor = sensor;

const CALIBRATED_MIN_VALUE = 0;
const CALIBRATED_MAX_VALUE = 1000;
const LINE_ON_THRESHOLD = 200;
const LINE_NOISE_THRESHOLD = 50;

const priv$3 = new Map();


const Controllers$2 = {
  DEFAULT: {
    initialize: {
      value(options) {

        if (typeof options.emitter === "undefined") {
          throw new Error("Emitter pin is required");
        }

        if (!options.pins || options.pins.length === 0) {
          throw new Error("Pins must be defined");
        }

        const state = priv$3.get(this);

        state.emitter = new Led({
          board: this.board,
          pin: options.emitter
        });

        state.sensorStates = options.pins.map((pin) => {
          const sensor = new Sensor({
            board: this.board,
            freq: state.freq,
            pin
          });

          const sensorState = {
            sensor,
            rawValue: 0,
            dataReceived: false,
          };

          sensor.on("data", value => {
            onData(this, sensorState, value);
          });

          return sensorState;
        });
      }
    }
  }
};

function onData(instance, sensorState, value) {
  const state = priv$3.get(instance);

  // Update this sensor state
  sensorState.dataReceived = true;
  sensorState.rawValue = value;

  // Check if all sensors have been read
  const allRead = state.sensorStates.every(({dataReceived}) => dataReceived);

  if (allRead) {
    instance.emit("data", instance.raw);

    if (state.autoCalibrate) {
      setCalibration(state.calibration, instance.raw);
    }

    if (instance.isCalibrated) {
      instance.emit("calibratedData", instance.values);
      instance.emit("line", instance.line);
    }

    state.sensorStates.forEach(sensorState => {
      sensorState.dataReceived = false;
    });
  }
}

function setCalibration(calibration, values) {
  values.forEach((value, i) => {
    if (calibration.min[i] === undefined || value < calibration.min[i]) {
      calibration.min[i] = value;
    }

    if (calibration.max[i] === undefined || value > calibration.max[i]) {
      calibration.max[i] = value;
    }
  });
}

function calibrationIsValid(calibration, sensors) {
  return calibration &&
    (calibration.max && calibration.max.length === sensors.length) &&
    (calibration.min && calibration.min.length === sensors.length);
}


function calibratedValues(instance) {
  return instance.raw.map((value, i) => {
    return Fn$3.constrain(
      Fn$3.scale(
        value,
        instance.calibration.min[i],
        instance.calibration.max[i],
        CALIBRATED_MIN_VALUE,
        CALIBRATED_MAX_VALUE
      ),
      CALIBRATED_MIN_VALUE,
      CALIBRATED_MAX_VALUE
    );
  });
}

function maxLineValue(instance) {
  return (instance.sensors.length - 1) * CALIBRATED_MAX_VALUE;
}

// Returns a value between 0 and (n-1)*1000
// Given 5 sensors, the value will be between 0 and 4000
function getLine(instance, whiteLine) {
  const state = priv$3.get(instance);
  let onLine = false;
  let avg = 0;
  let sum = 0;

  whiteLine = !!whiteLine;

  instance.values.forEach((value, i) => {
    value = whiteLine ? (CALIBRATED_MAX_VALUE - value) : value;

    if (value > LINE_ON_THRESHOLD) {
      onLine = true;
    }

    if (value > LINE_NOISE_THRESHOLD) {
      avg += value * i * CALIBRATED_MAX_VALUE;
      sum += value;
    }
  });

  if (!onLine) {
    const maxPoint = maxLineValue(instance) + 1;
    const centerPoint = maxPoint / 2;

    return state.lastLine < centerPoint ? 0 : maxPoint;
  }

  return state.lastLine = Math.floor(avg / sum);
}

class ReflectanceArray extends Emitter$2 {
  constructor(options) {
    super();

    Board$4.Component.call(
      this, options = Board$4.Options(options)
    );

    Board$4.Controller.call(this, Controllers$2, options);

    // Read event throttling
    const {
      autoCalibrate = false,
      freq = 25,
    } = options;

    // Make private data entry
    const state = {
      autoCalibrate,
      freq,
      lastLine: 0,
      isOn: false,
      calibration: {
        min: [],
        max: []
      },
    };

    priv$3.set(this, state);

    if (typeof this.initialize === "function") {
      this.initialize(options);
    }

    Object.defineProperties(this, {
      isOn: {
        get() {
          return state.emitter.isOn;
        }
      },
      isCalibrated: {
        get() {
          return calibrationIsValid(this.calibration, this.sensors);
        }
      },
      isOnLine: {
        get() {
          const line = this.line;
          return line > CALIBRATED_MIN_VALUE && line < maxLineValue(this);
        }
      },
      sensors: {
        get() {
          return state.sensorStates.map(({sensor}) => sensor);
        }
      },
      calibration: {
        get() {
          return state.calibration;
        }
      },
      raw: {
        get() {
          return state.sensorStates.map(({rawValue}) => rawValue);
        }
      },
      values: {
        get() {
          return this.isCalibrated ? calibratedValues(this) : this.raw;
        }
      },
      line: {
        get() {
          return this.isCalibrated ? getLine(this) : 0;
        }
      }
    });
  }

  // Public methods
  enable() {
    priv$3.get(this).emitter.on();
    return this;
  }

  disable() {
    priv$3.get(this).emitter.off();
    return this;
  }

  // Calibrate will store the min/max values for this sensor array
  // It should be called many times in order to get a lot of readings
  // on light and dark areas.  See calibrateUntil for a convenience
  // for looping until a condition is met.
  calibrate() {
    this.once("data", values => {
      setCalibration(priv$3.get(this).calibration, values);
      this.emit("calibrated");
    });
    return this;
  }

  // This will continue to calibrate until the predicate is true.
  // Allows the user to calibrate n-times, or wait for user input,
  // or base it on calibration heuristics.  However the user wants.
  calibrateUntil(predicate) {
    const loop = () => {
      this.calibrate();
      this.once("calibrated", () => {
        if (!predicate()) {
          loop();
        }
      });
    };

    loop();

    return this;
  }

  // Let the user tell us what the calibration data is
  // This allows the user to save calibration data and
  // reload it without needing to calibrate every time.
  loadCalibration(calibration) {
    if (!calibrationIsValid(calibration, this.sensors)) {
      throw new Error("Calibration data not properly set: {min: [], max: []}");
    }

    priv$3.get(this).calibration = calibration;

    return this;
  }
}

var reflectancearray = ReflectanceArray;

const Board$3 = requireBoard();
const Collection$2 = collection;
const Pins$1 = Board$3.Pins;
const priv$2 = new Map();

class Relay {
  constructor(options) {

    const pinValue = typeof options === "object" ? options.pin : options;

    Board$3.Component.call(
      this, options = Board$3.Options(options)
    );

    options.type = options.type || "NO";

    const state = {
      isInverted: options.type === "NC",
      isClosed: false,
      value: null,
    };

    priv$2.set(this, state);

    Object.defineProperties(this, {
      value: {
        get() {
          return Number(this.isClosed);
        }
      },
      type: {
        get() {
          return state.isInverted ? "NC" : "NO";
        }
      },
      isClosed: {
        get() {
          return state.isClosed;
        }
      }
    });

    if (Pins$1.isFirmata(this) &&
        (typeof pinValue === "string" && pinValue[0] === "A")) {
      this.pin = this.io.analogPins[+pinValue.slice(1)];
      this.io.pinMode(this.pin, this.io.MODES.OUTPUT);
    }
  }

  /**
   * close Close the relay circuit
   * @return {Relay}
   */
  close() {
    const state = priv$2.get(this);

    this.io.digitalWrite(
      this.pin, state.isInverted ? this.io.LOW : this.io.HIGH
    );
    state.isClosed = true;

    return this;
  }

  /**
   * open Open the relay circuit
   * @return {Relay}
   */
  open() {
    const state = priv$2.get(this);

    this.io.digitalWrite(
      this.pin, state.isInverted ? this.io.HIGH : this.io.LOW
    );
    state.isClosed = false;

    return this;
  }

  /**
   * toggle Toggle the on/off state of the relay
   * @return {Relay}
   */
  toggle() {
    const state = priv$2.get(this);

    if (state.isClosed) {
      this.open();
    } else {
      this.close();
    }

    return this;
  }
}

/**
 * Relays()
 * new Relays()
 *
 * Constructs an Array-like instance of all relays
 */
class Relays extends Collection$2 {
  constructor(numsOrObjects) {
    super(numsOrObjects);
  }
  get type() {
    return Relay;
  }
}


/*
 * Relays, on()
 *
 * Turn all relays on
 *
 * eg. collection.on();
 *
 *
 * Relays, off()
 *
 * Turn all relays off
 *
 * eg. collection.off();
 *
 *
 * Relays, open()
 *
 * Open all relays
 *
 * eg. collection.open();
 *
 *
 * Relays, close()
 *
 * Close all relays
 *
 * eg. collection.close();
 *
 *
 * Relays, toggle()
 *
 * Toggle the state of all relays
 *
 * eg. collection.toggle();
 */

Collection$2.installMethodForwarding(
  Relays.prototype, Relay.prototype
);

Relay.Collection = Relays;

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  Relay.purge = () => {
    priv$2.clear();
  };
}

var relay = Relay;

const Board$2 = requireBoard();
const Pins = Board$2.Pins;
const Expander = requireExpander();
const Collection$1 = collection;
const Emitter$1 = emitter;
const Fn$2 = fn;
const Animation = animation;

// Servo instance private data
const priv$1 = new Map();

const Controllers$1 = {
  PCA9685: {
    initialize: {
      value({address, pwmRange, frequency, pin}) {
        const state = priv$1.get(this);

        this.address = address || 0x40;
        this.pwmRange = pwmRange || [450, 1850];
        this.frequency = frequency || 50;

        state.expander = Expander.get({
          address: this.address,
          controller: this.controller,
          bus: this.bus,
          pwmRange: this.pwmRange,
          frequency: this.frequency,
        });

        this.pin = state.expander.normalize(pin);
      }
    },
    update: {
      writable: true,
      value(microseconds) {
        const state = priv$1.get(this);
        state.expander.servoWrite(this.pin, microseconds);
      }
    }
  },
  Standard: {
    initialize: {
      value({debug, pwmRange}) {

        // When in debug mode, if pin is not a PWM pin, emit an error
        if (debug && !this.board.pins.isServo(this.pin)) {
          Board$2.Pins.Error({
            pin: this.pin,
            type: "PWM",
            via: "Servo",
          });
        }

        if (Array.isArray(pwmRange)) {
          this.io.servoConfig(this.pin, pwmRange[0], pwmRange[1]);
        } else {
          this.io.pinMode(this.pin, this.mode);
        }
      }
    },
    update: {
      writable: true,
      value(degrees) {

        // If same degrees return immediately.
        if (this.last && this.last.degrees === degrees) {
          return this;
        }

        // Map value from degreeRange to pwmRange
        let microseconds = Fn$2.map(
          degrees,
          this.degreeRange[0], this.degreeRange[1],
          this.pwmRange[0], this.pwmRange[1]
        );

        // Restrict values to integers
        microseconds |= 0;

        this.io.servoWrite(this.pin, microseconds);
      }
    }
  }
};

Controllers$1.DEFAULT = Controllers$1.Standard;

/**
 * Servo
 * @constructor
 *
 * @param {Object} opts Options: pin, type, id, range
 */

class Servo extends Emitter$1 {
  constructor(options) {

    super();

    const history = [];
    let pinValue = typeof options === "object" ? options.pin : options;

    Board$2.Component.call(
      this, options = Board$2.Options(options)
    );

    this.degreeRange = options.degreeRange || [0, 180];
    this.pwmRange = options.pwmRange || [600, 2400];
    this.range = options.range || this.degreeRange;
    this.deadband = options.deadband || [90, 90];
    this.fps = options.fps || 100;
    this.offset = options.offset || 0;
    this.range = options.range || [0 - this.offset, 180 - this.offset];
    this.mode = this.io.MODES.SERVO;
    this.interval = null;
    this.value = null;
    // The type of servo determines certain alternate
    // behaviours in the API
    this.type = options.type || "standard";

    // Invert the value of all servoWrite operations
    // eg. 80 => 100, 90 => 90, 0 => 180
    if (options.isInverted) {
      console.warn("The 'isInverted' property has been renamed 'invert'");
    }
    this.invert = options.isInverted || options.invert || false;

    // StandardFirmata on Arduino allows controlling
    // servos from analog pins.
    // If we're currently operating with an Arduino
    // and the user has provided an analog pin name
    // (eg. "A0", "A5" etc.), parse out the numeric
    // value and capture the fully qualified analog
    // pin number.
    if (typeof options.controller === "undefined" && Pins.isFirmata(this)) {
      if (typeof pinValue === "string" &&
          (pinValue.length > 1 && pinValue[0] === "A")) {
        pinValue = this.io.analogPins[+pinValue.slice(1)];
      }

      pinValue = +pinValue;

      // If the board's default pin normalization
      // came up with something different, use the
      // the local value.
      if (!Number.isNaN(pinValue) && this.pin !== pinValue) {
        this.pin = pinValue;
      }
    }

    Board$2.Controller.call(this, Controllers$1, options);

    priv$1.set(this, {
      history
    });

    Object.defineProperties(this, {
      history: {
        get() {
          return history.slice(-5);
        }
      },
      last: {
        get() {
          return history[history.length - 1];
        }
      },
      position: {
        get() {
          return history.length ? history[history.length - 1].degrees : -1;
        }
      }
    });

    this.initialize(options);

    // If "startAt" is defined and center is falsy
    // set servo to min or max degrees
    if (typeof options.startAt !== "undefined") {
      this.startAt = options.startAt;
      this.to(options.startAt);
    } else {
      this.startAt = (this.degreeRange[1] - this.degreeRange[0]) / 2 + this.degreeRange[0];
    }

    // If "center" true set servo to 90deg
    if (options.center) {
      this.center();
    }

    if (options.type === "continuous") {
      this.stop();
    }
  }

  /**
   * to
   *
   * Set the servo horn's position to given degree over time.
   *
   * @param  {Number} degrees   Degrees to turn servo to.
   * @param  {Number} time      Time to spend in motion.
   * @param  {Number} rate      The rate of the motion transiton
   *
   * - or -
   *
   * @param {Object} an Animation() segment config object
   *
   * @return {Servo} instance
   */

  to(degrees, time, rate) {

    const state = priv$1.get(this);
    const options = {};

    if (typeof degrees === "object") {

      Object.assign(options, degrees);

      options.duration = degrees.duration || degrees.interval || 1000;
      options.cuePoints = degrees.cuePoints || [0, 1.0];
      options.keyFrames = degrees.keyFrames || [
        null,
        {
          value: typeof degrees.degrees === "number" ? degrees.degrees : this.startAt
        }
      ];

      options.oncomplete = () => {
        // Enforce async execution for user "oncomplete"
        process.nextTick(() => {
          if (typeof degrees.oncomplete === "function") {
            degrees.oncomplete();
          }
          this.emit("move:complete");
        });
      };


      state.isRunning = true;
      state.animation = state.animation || new Animation(this);
      state.animation.enqueue(options);

    } else {

      const target = degrees;

      // Enforce limited range of motion
      degrees = Fn$2.constrain(degrees, this.range[0], this.range[1]);

      if (typeof time !== "undefined") {

        options.duration = time;
        options.keyFrames = [null, {
          degrees
        }];
        options.fps = rate || this.fps;

        this.to(options);

      } else {

        this.value = degrees;

        degrees += this.offset;

        if (this.invert) {
          degrees = Fn$2.map(
            degrees,
            this.degreeRange[0], this.degreeRange[1],
            this.degreeRange[1], this.degreeRange[0]
          );
        }

        this.update(degrees);

        if (state.history.length > 5) {
          state.history.shift();
        }

        state.history.push({
          timestamp: Date.now(),
          degrees,
          target
        });
      }
    }

    // return this instance
    return this;
  }

  /**
   * step
   *
   * Update the servo horn's position by specified degrees (over time)
   *
   * @param  {Number} degrees   Degrees to turn servo to.
   * @param  {Number} time      Time to spend in motion.
   *
   * @return {Servo} instance
   */

  step(degrees, time) {
    return this.to(this.last.target + degrees, time);
  }

  /**
   * move Alias for Servo.prototype.to
   */
  move(degrees, time) {
    console.warn("Servo.prototype.move has been renamed to Servo.prototype.to");

    return this.to(degrees, time);
  }

  /**
   * min Set Servo to minimum degrees, defaults to 0deg
   * @param  {Number} time      Time to spend in motion.
   * @param  {Number} rate      The rate of the motion transiton
   * @return {Object} instance
   */

  min(time, rate) {
    return this.to(this.range[0], time, rate);
  }

  /**
   * max Set Servo to maximum degrees, defaults to 180deg
   * @param  {Number} time      Time to spend in motion.
   * @param  {Number} rate      The rate of the motion transiton
   * @return {[type]} [description]
   */
  max(time, rate) {
    return this.to(this.range[1], time, rate);
  }

  /**
   * center Set Servo to centerpoint, defaults to 90deg
   * @param  {Number} time      Time to spend in motion.
   * @param  {Number} rate      The rate of the motion transiton
   * @return {[type]} [description]
   */
  center(time, rate) {
    return this.to(Math.abs((this.range[0] + this.range[1]) / 2), time, rate);
  }

  /**
   * home Return Servo to startAt position
   */
  home() {
    return this.to(this.startAt);
  }

  /**
   * sweep Sweep the servo between min and max or provided range
   * @param  {Array} range constrain sweep to range
   *
   * @param {Object} options Set range or interval.
   *
   * @return {[type]} [description]
   */
  sweep(opts) {

    const options = {
      keyFrames: [{
        value: this.range[0]
      }, {
        value: this.range[1]
      }],
      metronomic: true,
      loop: true,
      easing: "inOutSine"
    };

    // If opts is an array, then assume a range was passed
    if (Array.isArray(opts)) {
      options.keyFrames = rangeToKeyFrames(opts);
    } else {
      if (typeof opts === "object" && opts !== null) {
        Object.assign(options, opts);
        /* istanbul ignore else */
        if (Array.isArray(options.range)) {
          options.keyFrames = rangeToKeyFrames(options.range);
        }
      }
    }

    return this.to(options);
  }

  /**
   * stop Stop a moving servo
   * @return {[type]} [description]
   */
  stop() {
    const state = priv$1.get(this);

    if (state.animation) {
      state.animation.stop();
    }

    if (this.type === "continuous") {
      this.to(
        this.deadband.reduce((a, b) => Math.round((a + b) / 2))
      );
    } else {
      clearInterval(this.interval);
    }

    return this;
  }
}


/**
 * Animation.normalize
 *
 * @param [number || object] keyFrames An array of step values or a keyFrame objects
 */

Servo.prototype[Animation.normalize] = function(keyFrames) {

  const last = this.last ? this.last.target : this.startAt;

  // If user passes null as the first element in keyFrames use current position
  if (keyFrames[0] === null) {
    keyFrames[0] = {
      value: last
    };
  }

  // If user passes a step as the first element in keyFrames use current position + step
  if (typeof keyFrames[0] === "number") {
    keyFrames[0] = {
      value: last + keyFrames[0]
    };
  }

  return keyFrames.map(frame => {
    const value = frame;

    /* istanbul ignore else */
    if (frame !== null) {
      // frames that are just numbers represent _step_
      if (typeof frame === "number") {
        frame = {
          step: value,
        };
      } else {
        if (typeof frame.degrees === "number") {
          frame.value = frame.degrees;
          delete frame.degrees;
        }
        if (typeof frame.copyDegrees === "number") {
          frame.copyValue = frame.copyDegrees;
          delete frame.copyDegrees;
        }
      }

      /* istanbul ignore else */
      if (!frame.easing) {
        frame.easing = "linear";
      }
    }
    return frame;
  });
};

/**
 * Animation.render
 *
 * @position [number] value to set the servo to
 */
Servo.prototype[Animation.render] = function(position) {
  return this.to(position[0]);
};

function rangeToKeyFrames(range) {
  return range.map(value => ({
    value
  }));
}

//
["clockWise", "cw", "counterClockwise", "ccw"].forEach(api => {
  Servo.prototype[api] = function(rate) {
    let range;
    rate = rate === undefined ? 1 : rate;
    /* istanbul ignore if */
    if (this.type !== "continuous") {
      this.board.error(
        "Servo",
        `Servo.prototype.${api} is only available for continuous servos`
      );
    }
    if (api === "cw" || api === "clockWise") {
      range = [rate, 0, 1, this.deadband[1] + 1, this.range[1]];
    } else {
      range = [rate, 0, 1, this.deadband[0] - 1, this.range[0]];
    }
    return this.to(Fn$2.scale.apply(null, range) | 0);
  };
});


// Servo.Continuous = function(pinOrOpts) {
//   const options = {};
//   if (typeof pinOrOpts !== "object") {
//     Object.assign(options, pinOrOpts);
//   } else {
//     options.pin = pinOrOpts;
//   }

//   options.type = "continuous";

//   return new Servo(options);
// };


Servo.Continuous = class extends Servo {
  constructor(pinOrOpts) {
    const options = {};
    if (typeof pinOrOpts === "object") {
      Object.assign(options, pinOrOpts);
    } else {
      options.pin = pinOrOpts;
    }

    options.type = "continuous";

    super(options);
  }
};

/**
 * Servos()
 * new Servos()
 */
class Servos extends Collection$1 {
  constructor(numsOrObjects) {
    super(numsOrObjects);
  }
  get type() {
    return Servo;
  }

  /**
   * Animation.normalize
   *
   * @param [number || object] keyFrames An array of step values or a keyFrame objects
   */
  [Animation.normalize](keyFrameSet) {
    return keyFrameSet.map((keyFrames, index) => {
      if (keyFrames !== null && Array.isArray(keyFrames)) {
        let servo = this[index];

        // If servo is a servoArray then user servo[0] for default values
        if (servo instanceof Servos) {
          servo = servo[0];
        }

        const last = servo.last ? servo.last.target : servo.startAt;

        // If the first keyFrameSet is null use the current position
        if (keyFrames[0] === null) {
          keyFrames[0] = {
            value: last
          };
        }

        if (Array.isArray(keyFrames)) {
          if (keyFrames[0] === null) {
            keyFrameSet[index][0] = {
              value: last
            };
          }
        }
        return this[index][Animation.normalize](keyFrames);
      }

      if (keyFrames && typeof keyFrames.degrees === "number") {
        keyFrames.value = keyFrames.degrees;
        delete keyFrames.degrees;
      }
      return keyFrames;
    });
  }

  /**
   * Animation.render
   *
   * @position [number] array of values to set the servos to
   */
  [Animation.render](position) {
    return this.each((servo, i) => servo.to(position[i]));
  }
}

/*
 * Servos, center()
 *
 * centers all servos to 90deg
 *
 * eg. array.center();

 * Servos, min()
 *
 * set all servos to the minimum degrees
 * defaults to 0
 *
 * eg. array.min();

 * Servos, max()
 *
 * set all servos to the maximum degrees
 * defaults to 180
 *
 * eg. array.max();

 * Servos, stop()
 *
 * stop all servos
 *
 * eg. array.stop();
 */

Collection$1.installMethodForwarding(
  Servos.prototype, Servo.prototype, {
    skip: [Animation.normalize, Animation.render]
  }
);

// Assign Servos Collection class as static "method" of Servo.
Servo.Collection = Servos;

/* istanbul ignore else */
if (!!process.env.IS_TEST_MODE) {
  Servo.Controllers = Controllers$1;
  Servo.purge = () => {
    priv$1.clear();
  };
}

var servo = Servo;

const Board$1 = requireBoard();
const Fn$1 = fn;
const priv = new Map();
const steppers = new Map();
const TAU = Fn$1.TAU;

const MAXSTEPPERS = 6; // correlates with MAXSTEPPERS in firmware


class Step {
  constructor(stepper) {
    this.rpm = 180;
    this.direction = -1;
    this.speed = 0;
    this.accel = 0;
    this.decel = 0;

    this.stepper = stepper;
  }

  move(steps, dir, speed, accel, decel, callback) {
    // Restore the param order... (steps, dir => dir, steps)
    this.stepper.io.stepperStep.apply(
      this.stepper.io, [this.stepper.id, dir, steps, speed, accel, decel, callback]
    );
  }
}

Step.PROPERTIES = ["rpm", "direction", "speed", "accel", "decel"];
Step.DEFAULTS = [180, -1, 0, 0, 0];


function MotorPins(pins) {
  let k = 0;
  pins = pins.slice();
  while (pins.length) {
    this[`motor${++k}`] = pins.shift();
  }
}

function isSupported({pins, MODES}) {
  return pins.some(({supportedModes}) => supportedModes.includes(MODES.STEPPER));
}

/**
 * Stepper
 *
 * Class for handling steppers using AdvancedFirmata support for asynchronous stepper control
 *
 *
 * five.Stepper({
 *  type: constant,     // io.STEPPER.TYPE.*
 *  stepsPerRev: number,  // steps to make on revolution of stepper
 *  pins: {
 *    step: number,   // pin attached to step pin on driver (used for type DRIVER)
 *    dir: number,    // pin attached to direction pin on driver (used for type DRIVER)
 *    motor1: number, // (used for type TWO_WIRE and FOUR_WIRE)
 *    motor2: number, // (used for type TWO_WIRE and FOUR_WIRE)
 *    motor3: number, // (used for type FOUR_WIRE)
 *    motor4: number, // (used for type FOUR_WIRE)
 *  }
 * });
 *
 *
 * five.Stepper({
 *  type: five.Stepper.TYPE.DRIVER,
 *  stepsPerRev: number,
 *  pins: {
 *    step: number,
 *    dir: number
 *  }
 * });
 *
 * five.Stepper({
 *  type: five.Stepper.TYPE.DRIVER,
 *  stepsPerRev: number,
 *  pins: [ step, dir ]
 * });
 *
 * five.Stepper({
 *  type: five.Stepper.TYPE.TWO_WIRE,
 *  stepsPerRev: number,
 *  pins: {
 *    motor1: number,
 *    motor2: number
 *  }
 * });
 *
 * five.Stepper({
 *  type: five.Stepper.TYPE.TWO_WIRE,
 *  stepsPerRev: number,
 *  pins: [ motor1, motor2 ]
 * });
 *
 * five.Stepper({
 *  type: five.Stepper.TYPE.FOUR_WIRE,
 *  stepsPerRev: number,
 *  pins: {
 *    motor1: number,
 *    motor2: number,
 *    motor3: number,
 *    motor4: number
 *  }
 * });
 *
 * five.Stepper({
 *  type: five.Stepper.TYPE.FOUR_WIRE,
 *  stepsPerRev: number,
 *  pins: [ motor1, motor2, motor3, motor4 ]
 * });
 *
 *
 * @param {Object} options
 *
 */

class Stepper {
  constructor(options) {
    const params = [];
    let state;

    Board$1.Component.call(
      this, options = Board$1.Options(options)
    );

    if (!isSupported(this.io)) {
      throw new Error(
        "Stepper is not supported"
      );
    }

    if (!options.pins) {
      throw new Error(
        "Stepper requires a `pins` object or array"
      );
    }

    if (!options.stepsPerRev) {
      throw new Error(
        "Stepper requires a `stepsPerRev` number value"
      );
    }

    steppers.set(this.board, steppers.get(this.board) || []);
    this.id = steppers.get(this.board).length;

    if (this.id >= MAXSTEPPERS) {
      throw new Error(
        `Stepper cannot exceed max steppers (${MAXSTEPPERS})`
      );
    }

    // Convert an array of pins to the appropriate named pin
    if (Array.isArray(this.pins)) {
      if (this.pins.length === 2) {
        // Using an array of 2 pins requres a TYPE
        // to disambiguate DRIVER and TWO_WIRE
        if (!options.type) {
          throw new Error(
            "Stepper requires a `type` number value (DRIVER, TWO_WIRE)"
          );
        }
      }

      if (options.type === Stepper.TYPE.DRIVER) {
        this.pins = {
          step: this.pins[0],
          dir: this.pins[1]
        };
      } else {
        this.pins = new MotorPins(this.pins);
      }
    }

    // Attempt to guess the type if none is provided
    if (!options.type) {
      if (this.pins.dir) {
        options.type = Stepper.TYPE.DRIVER;
      } else {
        if (this.pins.motor3) {
          options.type = Stepper.TYPE.FOUR_WIRE;
        } else {
          options.type = Stepper.TYPE.TWO_WIRE;
        }
      }
    }


    // Initial Stepper config params (same for all 3 types)
    params.push(this.id, options.type, options.stepsPerRev);


    if (options.type === Stepper.TYPE.DRIVER) {
      if (typeof this.pins.dir === "undefined" ||
          typeof this.pins.step === "undefined") {
        throw new Error(
          "Stepper.TYPE.DRIVER expects: `pins.dir`, `pins.step`"
        );
      }

      params.push(
        this.pins.dir, this.pins.step
      );
    }

    if (options.type === Stepper.TYPE.TWO_WIRE) {
      if (typeof this.pins.motor1 === "undefined" ||
          typeof this.pins.motor2 === "undefined") {
        throw new Error(
          "Stepper.TYPE.TWO_WIRE expects: `pins.motor1`, `pins.motor2`"
        );
      }

      params.push(
        this.pins.motor1, this.pins.motor2
      );
    }

    if (options.type === Stepper.TYPE.FOUR_WIRE) {
      if (typeof this.pins.motor1 === "undefined" ||
          typeof this.pins.motor2 === "undefined" ||
          typeof this.pins.motor3 === "undefined" ||
          typeof this.pins.motor4 === "undefined") {
        throw new Error(
          "Stepper.TYPE.FOUR_WIRE expects: `pins.motor1`, `pins.motor2`, `pins.motor3`, `pins.motor4`"
        );
      }

      params.push(
        this.pins.motor1, this.pins.motor2, this.pins.motor3, this.pins.motor4
      );
    }

    // Iterate the params and set each pin's mode to MODES.STEPPER
    // Params:
    // [deviceNum, type, stepsPerRev, dirOrMotor1Pin, stepOrMotor2Pin, motor3Pin, motor4Pin]
    // The first 3 are required, the remaining 2-4 will be pins
    params.slice(3).forEach((pin) => {
      this.io.pinMode(pin, this.io.MODES.STEPPER);
    });

    this.io.stepperConfig.apply(this.io, params);

    steppers.get(this.board).push(this);

    state = Step.PROPERTIES.reduce((state, key, i) => (state[key] = typeof options[key] !== "undefined" ? options[key] : Step.DEFAULTS[i], state), {
      isRunning: false,
      type: options.type,
      pins: this.pins
    });

    priv.set(this, state);

    Object.defineProperties(this, {
      type: {
        get() {
          return state.type;
        }
      },

      pins: {
        get() {
          return state.pins;
        }
      }
    });
  }

  /**
   * rpm
   *
   * Gets the rpm value or sets the rpm in revs per minute
   * making an internal conversion to speed in `0.01 * rad/s`
   *
   * @param {Number} rpm Revs per minute
   *
   * NOTE: *rpm* is optional, if missing
   * the method will behave like a getter
   *
   * @return {Stepper} this Chainable method when used as a setter
   */
  rpm(rpm) {
    const state = priv.get(this);

    if (typeof rpm === "undefined") {
      return state.rpm;
    }
    state.rpm = rpm;
    state.speed = Math.round(rpm * TAU * 100 / 60);
    return this;
  }

  /**
   * speed
   *
   * Gets the speed value or sets the speed in `0.01 * rad/s`
   * making an internal conversion to rpm
   *
   * @param {Number} speed Speed given in 0.01 * rad/s
   *
   * NOTE: *speed* is optional, if missing
   * the method will behave like a getter
   *
   * @return {Stepper} this Chainable method when used as a setter
   */
  speed(speed) {
    const state = priv.get(this);

    if (typeof speed === "undefined") {
      return state.speed;
    }
    state.speed = speed;
    state.rpm = Math.round(speed / TAU / 100 * 60);
    return this;
  }

  ccw() {
    return this.direction(0);
  }

  cw() {
    return this.direction(1);
  }

  /**
   * step
   *
   * Move stepper motor a number of steps and call the callback on completion
   *
   * @param {Number} stepsOrOpts Steps to move using current settings for speed, accel, etc.
   * @param {Object} stepsOrOpts Options object containing any of the following:
   *    stepsOrOpts = {
   *      steps:
   *      rpm:
   *      speed:
   *      direction:
   *      accel:
   *      decel:
   *    }
   *
   * NOTE: *steps* is required.
   *
   * @param {Function} callback function(err, complete)
   */
  step(stepsOrOpts, callback) {
    let steps;
    let step;
    let state;
    let params;
    let isValidStep;

    steps = typeof stepsOrOpts === "object" ?
      (stepsOrOpts.steps || 0) : Math.floor(stepsOrOpts);

    step = new Step(this);

    state = priv.get(this);

    params = [];

    isValidStep = true;

    function failback(error) {
      isValidStep = false;
      if (callback) {
        callback(error);
      }
    }

    params.push(steps);

    if (typeof stepsOrOpts === "object") {
      // If an object of property values has been provided,
      // call the correlating method with the value argument.
      Step.PROPERTIES.forEach((key) => {
        if (typeof stepsOrOpts[key] !== "undefined") {
          this[key](stepsOrOpts[key]);
        }
      });
    }

    if (!state.speed) {
      this.rpm(state.rpm);
      step.speed = this.speed();
    }


    // Ensure that the property params are set in the
    // correct order, but without rpm
    Step.PROPERTIES.slice(1).forEach((key) => {
      params.push(step[key] = this[key]());
    });


    if (steps === 0) {
      failback(
        new Error(
          "Must set a number of steps when calling `step()`"
        )
      );
    }

    if (step.direction < 0) {
      failback(
        new Error(
          "Must set a direction before calling `step()`"
        )
      );
    }

    if (isValidStep) {
      state.isRunning = true;

      params.push(complete => {
        state.isRunning = false;
        callback(null, complete);
      });

      step.move.apply(step, params);
    }

    return this;
  }
}

Object.defineProperties(Stepper, {
  TYPE: {
    value: Object.freeze({
      DRIVER: 1,
      TWO_WIRE: 2,
      FOUR_WIRE: 4
    })
  },
  RUNSTATE: {
    value: Object.freeze({
      STOP: 0,
      ACCEL: 1,
      DECEL: 2,
      RUN: 3
    })
  },
  DIRECTION: {
    value: Object.freeze({
      CCW: 0,
      CW: 1
    })
  }
});

["direction", "accel", "decel"].forEach(prop => {
  Stepper.prototype[prop] = function(value) {
    const state = priv.get(this);

    if (typeof value === "undefined") {
      return state[prop];
    }
    state[prop] = value;
    return this;
  };
});


var stepper = Stepper;

const Board = requireBoard();
const Collection = collection;
const Emitter = emitter;
const Fn = fn;

/**
 * Switch
 * @constructor
 *
 * five.Switch();
 *
 * five.Switch({
 *   pin: 10
 * });
 *
 *
 * @param {Object} options [description]
 *
 */

class Switch extends Emitter {
  constructor(options) {

    super();

    Board.Component.call(
      this, options = Board.Options(options)
    );

    // Create a 5 ms debounce boundary on event triggers
    // this avoids button events firing on
    // press noise and false positives
    const trigger = Fn.debounce(type => this.emit(type, this), 5);

    // Resolve the default type to Normally Open
    options.type = options.type || "NO";

    // Is this instance Normally Open?
    const isNormallyOpen = options.type === "NO";
    let raw = null;
    let invert = typeof options.invert !== "undefined" ?
      options.invert : (isNormallyOpen || false);

    // Logical Defaults
    let closeValue = 1;
    let openValue = 0;

    if (invert) {
      closeValue ^= 1;
      openValue ^= 1;
    }

    this.io.pinMode(this.pin, this.io.MODES.INPUT);

    if (isNormallyOpen) {
      this.io.digitalWrite(this.pin, this.io.HIGH);
    }

    this.io.digitalRead(this.pin, data => {
      raw = data;

      trigger.call(this, this.isOpen ? "open" : "close");
    });

    Object.defineProperties(this, {
      value: {
        get() {
          return Number(this.isOpen);
        }
      },
      invert: {
        get() {
          return invert;
        },
        set(value) {
          invert = value;
          closeValue = invert ? 0 : 1;
          openValue = invert ? 1 : 0;
        }
      },
      closeValue: {
        get() {
          return closeValue;
        },
        set(value) {
          closeValue = value;
          openValue = value ^ 1;
        }
      },
      openValue: {
        get() {
          return openValue;
        },
        set(value) {
          openValue = value;
          closeValue = value ^ 1;
        }
      },
      isOpen: {
        get() {
          return raw === openValue;
        }
      },
      isClosed: {
        get() {
          return raw === closeValue;
        }
      },
    });
  }
}


/**
 * Fired when the Switch is close
 *
 * @event
 * @name close
 * @memberOf Switch
 */


/**
 * Fired when the Switch is opened
 *
 * @event
 * @name open
 * @memberOf Switch
 */


/**
 * Switches()
 * new Switches()
 *
 * Constructs an Array-like instance of all servos
 */
class Switches extends Collection.Emitter {
  constructor(numsOrObjects) {
    super(numsOrObjects);
  }

  get type() {
    return Switch;
  }
}

Collection.installMethodForwarding(
  Switches.prototype, Switch.prototype
);

// Assign Switches Collection class as static "method" of Switch.
Switch.Collection = Switches;



var _switch = Switch;

johnnyFive.exports;

(function (module) {
	module.exports = {


	  CO2: co2,

	  // extract-start:apinames

	  // blokdots
	  Sunlight: requireBlokdots_sunlight(),

	  // Johnny Five
	  Accelerometer: requireAccelerometer(),
	  Animation: animation,
	  Altimeter: requireAltimeter(),
	  Barometer: requireBarometer(),
	  Board: requireBoard(),
	  Button: button,
	  Color: color,
	  Collection: collection,
	  Compass: requireCompass(),
	  ESC: esc,
	  Expander: requireExpander(),
	  Fn: fn,
	  GPS: gps,
	  Gyro: requireGyro(),
	  Hygrometer: requireHygrometer(),
	  SIP: requireSip(),
	  Keypad: keypad,
	  LCD: lcd,
	  Led: led,
	  LedControl: ledcontrol,
	  Light: light,
	  Joystick: joystick,
	  Motion: motion,
	  Motor: motor,
	  Orientation: requireOrientation(),
	  Piezo: piezo,
	  Pin: pin,
	  Proximity: proximity,
	  ReflectanceArray: reflectancearray,
	  Relay: relay,
	  Repl: repl_1,
	  Sensor: sensor,
	  Servo: servo,
	  ShiftRegister: shiftregister,
	  Stepper: stepper,
	  Switch: _switch,
	  Thermometer: requireThermometer(),
	  // extract-end:apinames
	};

	// Customized constructors
	//
	//
	module.exports.Board.Virtual = function(options) {
	  let temp;

	  if (options instanceof module.exports.Expander) {
	    temp = {
	      io: options
	    };
	  } else {
	    temp = options;
	  }

	  return new module.exports.Board(
	    Object.assign({}, {
	      repl: false,
	      debug: false,
	      sigint: false
	    }, temp)
	  );
	};

	module.exports.Sensor.Analog = module.exports.Sensor;
	module.exports.Sensor.Digital = function(options) {
	  let pin;
	  let type = "digital";

	  if (typeof options === "number" ||
	      typeof options === "string") {
	    pin = options;
	    options = {
	      type,
	      pin
	    };
	  } else {
	    options.type = type;
	  }

	  return new module.exports.Sensor(options);
	};

	// Short-handing & Aliases
	module.exports.IMU = module.exports.SIP;
	module.exports.Multi = module.exports.SIP;
	module.exports.Luxmeter = module.exports.Light;
	module.exports.Magnetometer = module.exports.Compass;
	module.exports.Ping = module.exports.Proximity;
	module.exports.Sonar = module.exports.Proximity;
	module.exports.Boards = module.exports.Board.Collection;
	module.exports.Buttons = module.exports.Button.Collection;
	module.exports.ESCs = module.exports.ESC.Collection;
	module.exports.Leds = module.exports.Led.Collection;
	module.exports.Led.RGBs = module.exports.Led.RGB.Collection;
	module.exports.Motors = module.exports.Motor.Collection;
	module.exports.Pins = module.exports.Pin.Collection;
	module.exports.Relays = module.exports.Relay.Collection;
	module.exports.Sensors = module.exports.Sensor.Collection;
	module.exports.Servos = module.exports.Servo.Collection;
	module.exports.Switches = module.exports.Switch.Collection;
	module.exports.Touchpad = module.exports.Keypad; 
} (johnnyFive));

var johnnyFiveExports = johnnyFive.exports;
var five = /*@__PURE__*/getDefaultExportFromCjs(johnnyFiveExports);

class Encoder extends EventEmitter$2 {
    constructor({ slot, board, initialValue = 0, debounce = 7, }) {
        super();
        this.value = initialValue;
        this.waveform = "";
        this.waveformTimeout;
        this.upButton = new five.Button({
            pin: slot,
            debounce,
            board,
        });
        this.downButton = new five.Button({
            pin: slot + 1,
            debounce,
            board,
        });
        this.upButton.on("up", () => {
            this.waveform += "1";
            this.handleWaveform();
        });
        this.downButton.on("up", () => {
            this.waveform += "0";
            this.handleWaveform();
        });
    }
    handleWaveform() {
        if (this.waveform.length < 2) {
            this.waveformTimeout = setTimeout(() => {
                this.waveform = "";
            }, 100);
            return;
        }
        if (this.waveformTimeout) {
            clearTimeout(this.waveformTimeout);
        }
        if (this.waveform === "01") {
            this.value = this.value + 1;
            this.emit("change", this.value);
            this.emit("up", this.value);
        }
        else if (this.waveform === "10") {
            this.value = this.value - 1;
            this.emit("change", this.value);
            this.emit("down", this.value);
        }
        this.waveform = "";
    }
    cleanUp() {
        var _a, _b, _c, _d;
        (_b = (_a = this.upButton).removeAllListeners) === null || _b === void 0 ? void 0 : _b.call(_a);
        (_d = (_c = this.downButton).removeAllListeners) === null || _d === void 0 ? void 0 : _d.call(_c);
    }
}

const INTEGRATION_NAME = "figma";
class FigmaIntegration extends EventEmitter$2 {
    constructor() {
        super();
        this.server;
        this.integration;
        getBlokdotsSocketIOServer().then((server) => {
            this.server = server;
            this.integration = server.registerIntegration({
                integrationName: INTEGRATION_NAME,
            });
        });
    }
    sendReaction(message) {
        console.log("sendReaction", message);
        this.emit("reaction", message);
        if (!this.integration) {
            console.error("Integration not initialized");
            return;
        }
        this.integration.emit("reaction", message);
    }
    cleanUp() {
        var _a;
        (_a = this.server) === null || _a === void 0 ? void 0 : _a.unregisterIntegration({
            integrationName: INTEGRATION_NAME,
        });
    }
    rotate(parameters) {
        console.log("rotate", parameters);
        this.sendReaction({
            target: parameters.layer,
            reaction: "rotate",
            parameters: { value: parameters.value, relation: parameters.relation },
            timestamp: Date.now(),
        });
    }
    setText(parameters) {
        this.sendReaction({
            target: parameters.layer,
            reaction: "setText",
            parameters: { string: parameters.string },
            timestamp: Date.now(),
        });
    }
    setPosition(parameters) {
        this.sendReaction({
            target: parameters.layer,
            reaction: "setPosition",
            parameters: {
                x: parameters.x,
                y: parameters.y,
                relation: parameters.relation,
            },
            timestamp: Date.now(),
        });
    }
    setOpacity(parameters) {
        this.sendReaction({
            target: parameters.layer,
            reaction: "setOpacity",
            parameters: { value: parameters.value / 100 },
            timestamp: Date.now(),
        });
    }
    setSize(parameters) {
        this.sendReaction({
            target: parameters.layer,
            reaction: "setSize",
            parameters: {
                width: parameters.width,
                height: parameters.height,
                relation: parameters.relation,
            },
            timestamp: Date.now(),
        });
    }
    setColor(parameters) {
        this.sendReaction({
            target: parameters.layer,
            reaction: "setColor",
            parameters: { value: parameters.value },
            timestamp: Date.now(),
        });
    }
}

class HapticLabs {
    constructor({ slot, board, initialValue = {
        track1: 0,
        track2: 0,
    }, }) {
        this.value = initialValue;
        this.track1 = new five.Pin({
            pin: slot,
            type: "digital",
            // @ts-ignore — There is an issue with the types for the johnny-five library
            board,
        });
        this.track2 = new five.Pin({
            pin: slot + 1,
            type: "digital",
            // @ts-ignore — There is an issue with the types for the johnny-five library
            board,
        });
    }
    playTrack1() {
        this.track1.high();
        this.value.track1 = 1;
    }
    stopTrack1() {
        this.track1.low();
        this.value.track1 = 0;
    }
    playTrack2() {
        this.track2.high();
        this.value.track2 = 1;
    }
    stopTrack2() {
        this.track2.low();
        this.value.track2 = 0;
    }
}

class InvertableSensor extends EventEmitter$2 {
    constructor(_a) {
        var { invert = false, board } = _a, sensorOptions = __rest(_a, ["invert", "board"]);
        super();
        this.transformValue = (value) => {
            if (this.invert) {
                value = 1023 - value;
            }
            return value;
        };
        this.j5Object = new five.Sensor(Object.assign({ board }, sensorOptions));
        this.invert = invert;
        this.j5Object.on("change", () => {
            this.emit("change", this.transformValue(this.j5Object.value));
        });
    }
    cleanUp() {
        var _a, _b;
        (_b = (_a = this.j5Object).removeAllListeners) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
}

class Joystick extends EventEmitter$2 {
    constructor({ slot, board, invertX = false, invertY = false, }) {
        super();
        this.transformValue = (value) => {
            let pressed = false;
            let x = Math.round(value.x * 100);
            let y = Math.round(value.y * 100);
            x = five.Fn.constrain(x, -50, 50);
            y = five.Fn.constrain(y, -50, 50);
            if (this.invertX)
                x *= -1;
            if (this.invertY)
                y *= -1;
            if (value.x === 1) {
                pressed = true;
                x = this.previousX || 0;
            }
            else {
                this.previousX = x;
            }
            return { x, y, pressed };
        };
        this.j5Object = new five.Joystick({
            pins: [slot, `A${parseInt(slot.substring(1)) + 1}`],
            board: board,
        });
        this.invertX = invertX;
        this.invertY = invertY;
        this.previousX;
        this.j5Object.on("change", (v) => {
            this.emit("change", this.transformValue(v));
        });
    }
    cleanUp() {
        var _a, _b;
        (_b = (_a = this.j5Object).removeAllListeners) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
}

var colorString = {exports: {}};

var colorName = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

var simpleSwizzle = {exports: {}};

var isArrayish$1 = function isArrayish(obj) {
	if (!obj || typeof obj === 'string') {
		return false;
	}

	return obj instanceof Array || Array.isArray(obj) ||
		(obj.length >= 0 && (obj.splice instanceof Function ||
			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
};

var isArrayish = isArrayish$1;

var concat = Array.prototype.concat;
var slice = Array.prototype.slice;

var swizzle$1 = simpleSwizzle.exports = function swizzle(args) {
	var results = [];

	for (var i = 0, len = args.length; i < len; i++) {
		var arg = args[i];

		if (isArrayish(arg)) {
			// http://jsperf.com/javascript-array-concat-vs-push/98
			results = concat.call(results, slice.call(arg));
		} else {
			results.push(arg);
		}
	}

	return results;
};

swizzle$1.wrap = function (fn) {
	return function () {
		return fn(swizzle$1(arguments));
	};
};

var simpleSwizzleExports = simpleSwizzle.exports;

/* MIT license */

var colorNames = colorName;
var swizzle = simpleSwizzleExports;
var hasOwnProperty = Object.hasOwnProperty;

var reverseNames = Object.create(null);

// create a list of reverse color names
for (var name in colorNames) {
	if (hasOwnProperty.call(colorNames, name)) {
		reverseNames[colorNames[name]] = name;
	}
}

var cs = colorString.exports = {
	to: {},
	get: {}
};

cs.get = function (string) {
	var prefix = string.substring(0, 3).toLowerCase();
	var val;
	var model;
	switch (prefix) {
		case 'hsl':
			val = cs.get.hsl(string);
			model = 'hsl';
			break;
		case 'hwb':
			val = cs.get.hwb(string);
			model = 'hwb';
			break;
		default:
			val = cs.get.rgb(string);
			model = 'rgb';
			break;
	}

	if (!val) {
		return null;
	}

	return {model: model, value: val};
};

cs.get.rgb = function (string) {
	if (!string) {
		return null;
	}

	var abbr = /^#([a-f0-9]{3,4})$/i;
	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
	var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
	var keyword = /^(\w+)$/;

	var rgb = [0, 0, 0, 1];
	var match;
	var i;
	var hexAlpha;

	if (match = string.match(hex)) {
		hexAlpha = match[2];
		match = match[1];

		for (i = 0; i < 3; i++) {
			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
			var i2 = i * 2;
			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha, 16) / 255;
		}
	} else if (match = string.match(abbr)) {
		match = match[1];
		hexAlpha = match[3];

		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i] + match[i], 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
		}
	} else if (match = string.match(rgba)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i + 1], 0);
		}

		if (match[4]) {
			if (match[5]) {
				rgb[3] = parseFloat(match[4]) * 0.01;
			} else {
				rgb[3] = parseFloat(match[4]);
			}
		}
	} else if (match = string.match(per)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
		}

		if (match[4]) {
			if (match[5]) {
				rgb[3] = parseFloat(match[4]) * 0.01;
			} else {
				rgb[3] = parseFloat(match[4]);
			}
		}
	} else if (match = string.match(keyword)) {
		if (match[1] === 'transparent') {
			return [0, 0, 0, 0];
		}

		if (!hasOwnProperty.call(colorNames, match[1])) {
			return null;
		}

		rgb = colorNames[match[1]];
		rgb[3] = 1;

		return rgb;
	} else {
		return null;
	}

	for (i = 0; i < 3; i++) {
		rgb[i] = clamp(rgb[i], 0, 255);
	}
	rgb[3] = clamp(rgb[3], 0, 1);

	return rgb;
};

cs.get.hsl = function (string) {
	if (!string) {
		return null;
	}

	var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
	var match = string.match(hsl);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var s = clamp(parseFloat(match[2]), 0, 100);
		var l = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

		return [h, s, l, a];
	}

	return null;
};

cs.get.hwb = function (string) {
	if (!string) {
		return null;
	}

	var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
	var match = string.match(hwb);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var w = clamp(parseFloat(match[2]), 0, 100);
		var b = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
		return [h, w, b, a];
	}

	return null;
};

cs.to.hex = function () {
	var rgba = swizzle(arguments);

	return (
		'#' +
		hexDouble(rgba[0]) +
		hexDouble(rgba[1]) +
		hexDouble(rgba[2]) +
		(rgba[3] < 1
			? (hexDouble(Math.round(rgba[3] * 255)))
			: '')
	);
};

cs.to.rgb = function () {
	var rgba = swizzle(arguments);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};

cs.to.rgb.percent = function () {
	var rgba = swizzle(arguments);

	var r = Math.round(rgba[0] / 255 * 100);
	var g = Math.round(rgba[1] / 255 * 100);
	var b = Math.round(rgba[2] / 255 * 100);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};

cs.to.hsl = function () {
	var hsla = swizzle(arguments);
	return hsla.length < 4 || hsla[3] === 1
		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
cs.to.hwb = function () {
	var hwba = swizzle(arguments);

	var a = '';
	if (hwba.length >= 4 && hwba[3] !== 1) {
		a = ', ' + hwba[3];
	}

	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};

cs.to.keyword = function (rgb) {
	return reverseNames[rgb.slice(0, 3)];
};

// helpers
function clamp(num, min, max) {
	return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
	var str = Math.round(num).toString(16).toUpperCase();
	return (str.length < 2) ? '0' + str : str;
}

var colorStringExports = colorString.exports;

// Defines a set of WS2812 LED Pixels for use

// TODO:
// Pixels can be arranged into different structures // NICE TO HAVE
// Do we have a grid which can be 1D, 2D or 3D and any size
// Pixels needs to have a length, various deets on where it is (clock etc)
// Keyframing // NICE TO HAVE
// Pixel grid should be able to:
//      - Set pixels in a range from X->Y a colour

const ColorString = colorStringExports; // used for color parsing
const events = EventEmitter$2;
const util = require$$1$1;

// create a helper to output an int so messages can be shorter
ColorString.colorValue = function colorValue(colors, g_table) {
  // colors are assumed to be an array of [r, g, b] bytes
  // colorValue returns a packed value able to be pushed to firmata rather than
  // text values.
  // if gtable is passed then it should use the supplied gamma
  // correction table to correct the received value.

  // before sending, account for gamma correction.
  colors[0] = g_table[colors[0]];
  colors[1] = g_table[colors[1]];
  colors[2] = g_table[colors[2]];

  return ((colors[0] << 16) + (colors[1] << 8) + (colors[2]));
};

// CONSTANTS
const START_SYSEX = 0xF0;
const END_SYSEX =         0xF7;
const FIRMATA_7BIT_MASK = 0x7F;
const PIXEL_SHIFT_WRAP =  0x40;
const PIXEL_COMMAND =     0x51;
const PIXEL_CONFIG =      0x01;
const PIXEL_SHOW =        0x02;
const PIXEL_SET_PIXEL =   0x03;
const PIXEL_SET_STRIP =   0x04;
const PIXEL_SHIFT =       0x05;
const SHIFT_FORWARD =     0x20;
const SHIFT_BACKWARD =    0x00;

const MAX_STRIPS = 8;

const PIN_DEFAULT = 6; // use this if not supplied

const I2C_DEFAULT =   0x42;

const GAMMA_DEFAULT = 1.0; // set to 1.0 in 0.9, 2.8 in 0.10

// helper function for building gamma values
function create_gamma_table(steps, gamma, warning) {
  // used to build a gamma table for a particular value

  if (! warning && gamma == GAMMA_DEFAULT && ! commonjsGlobal.IS_TEST_MODE) {
    console.info('INFO: Default gamma behaviour is changing');
    console.info('0.9 - gamma=1.0 - consistent with pre-gamma values');
    console.info('0.10 - gamma=2.8 - default fix for WS2812 LEDs');
    warning = true;
  }

  const g_table = new Array(steps);
  for (let i = 0; i < steps; i++) {
    g_table[i] = Math.floor(Math.pow((i / 255.0), gamma) * 255 + 0.5);
  }

  return g_table;
}

const COLOR_ORDER = {
  GRB: 0x00,
  RGB: 0x01,
  BRG: 0x02
};

const pixels = new WeakMap();

const Pixel_Controllers = {
  FIRMATA: {
    initialize: {
      value(opts) {
        // initialises the base object

        const pixel = {
          address: opts.addr,
          id: opts.addr,
          color: {
            r: 0, g: 0, b: 0, hexcode: '#000000', color: 'black', rgb: [0,0,0]
          },
          firmata: opts.firmata,
          port: opts.port,
          parent: opts.strip
        };

        return pixel;
      }
    },
    pixel_color: {
      value(color) {
        // sets the actual pixel colour
        const pixel = pixels.get(this);

        const data   = [];

        data.push(START_SYSEX);
        data.push(PIXEL_COMMAND);
        data.push(PIXEL_SET_PIXEL);
        data.push(pixel.address & FIRMATA_7BIT_MASK);
        data.push((pixel.address >> 7) & FIRMATA_7BIT_MASK);
        data.push(color & FIRMATA_7BIT_MASK);
        data.push((color >> 7) & FIRMATA_7BIT_MASK);
        data.push((color >> 14) & FIRMATA_7BIT_MASK);
        data.push((color >> 21) & FIRMATA_7BIT_MASK);
        data.push(END_SYSEX);

        pixel.port.write(new Buffer(data));
      }
    }
  },
  I2CBACKPACK: {
    initialize: {
      value(opts) {
        // initialises the base object

        const pixel = {
          address: opts.addr,
          id: opts.addr,
          color: {
            r: 0, g: 0, b: 0, hexcode: '#000000', color: 'black', rgb: [0,0,0]
          },
          io: opts.io,
          i2c_address: opts.i2c_address,
          parent: opts.strip
        };

        return pixel;
      }
    },
    pixel_color: {
      value(color) {
        // sets the actual pixel colour
        const pixel = pixels.get(this);

        const data   = [];

        data.push(PIXEL_SET_PIXEL);
        data.push(pixel.address & FIRMATA_7BIT_MASK);
        data.push((pixel.address >> 7) & FIRMATA_7BIT_MASK);
        data.push(color & FIRMATA_7BIT_MASK);
        data.push((color >> 7) & FIRMATA_7BIT_MASK);
        data.push((color >> 14) & FIRMATA_7BIT_MASK);
        data.push((color >> 21) & FIRMATA_7BIT_MASK);

        pixel.io.i2cWrite(pixel.i2c_address, data);
      }
    }
  }
};


function Pixel(opts) {
  if (!(this instanceof Pixel)) {
    return new Pixel(opts);
  }

  // we can assume this is set because the controller is set by the strip.
  const controller = Pixel_Controllers[opts.controller];

  Object.defineProperties(this, controller);

  // we use this to be able to update the address of the
  // pixel in the array if we do shift operations.
  Object.defineProperty(this, 'address', {
    get() {
      const pixel = pixels.get(this);
      return pixel.address;
    },
    set(newAddress) {
      const pixel = pixels.get(this);
      pixel.address = newAddress;
    }
  });

  pixels.set(this, this.initialize(opts));
}

Pixel.prototype.off = Pixel.prototype.clear = function() {
  // sets the pixel value to [0, 0, 0]. Equivalent to calling
  // `strip.off()` but for an individual pixel.
  this.color([0, 0, 0]);
};

Pixel.prototype.colour = Pixel.prototype.color = function(color, opts) {
  // use a particular form to set the color either
  // color = hex value or named colors or array of colors
  // opts can contain _sendmsg_ as bool. If set to false message won't be
  // sent to firmata - useful for strip level updates to keep message choke down

  const pixel = pixels.get(this);

  const options = opts || {};
  let sendmsg = true;
  if (options.sendmsg != undefined) { sendmsg = options.sendmsg; }

  let pixelcolor = null;

  if (color) {
    // get the color based on a string
    if (typeof(color) === 'object') {
      // we have an RGB array value
      pixelcolor = {
        model: 'rgb',
        value: color
      };
    } else {
      pixelcolor = ColorString.get(color);
    }
  } else {
    return pixel.color;
  }

  if (pixelcolor != null) {
    // fill out the values for the pixel and then send the message to update
    // it on the strip

    pixel.color.r = pixelcolor.value[0];
    pixel.color.g = pixelcolor.value[1];
    pixel.color.b = pixelcolor.value[2];
    pixel.color.hexcode = ColorString.to.hex(pixelcolor.value);
    pixel.color.color = ColorString.to.keyword(pixelcolor.value);
    if (pixelcolor.value.length == 4) {
      pixelcolor.value.pop();
    }
    pixel.color.rgb = pixelcolor.value;


    // console.log(pixel.parent.gtable);
    color = ColorString.colorValue(pixelcolor.value, pixel.parent.gtable);
    if (sendmsg) {
      // TODO probably should be pulling the color off the obj rather than
      // sending it to this function....
      this.pixel_color(color);
    }
  } else {
    console.log("Color supplied couldn't be parsed: " + color);
  }
};

const strips = new WeakMap();

const Controllers = {
  FIRMATA: {
    initialize: {
      value(opts) {
        const MAX_PIXELS = 216; // based on # bytes available in firmata
        const strip_length = opts.length || 6; // just an arbitrary val
        const data_pin = opts.data || PIN_DEFAULT;
        const color_order = opts.color_order || COLOR_ORDER.GRB; // default GRB
        const strip_definition = opts.strips || new Array();
        const skip_firmware_check = !!opts.skip_firmware_check;
        // do firmata / IO checks
        let firmata = opts.firmata || undefined;
        if (firmata == undefined) {
          try {
            firmata = opts.board.io;
          } catch (e) {
            if (e instanceof TypeError) {
              // there's no board
              firmata = undefined;
            }
          }
        }
        // check if we're *still* undefined
        if (firmata == undefined) {
          const err = new Error('A firmata or board object is required');
          err.name = 'NoFirmataError';
          throw err;
        }

        if (firmata.firmware.name !== 'node_pixel_firmata.ino' && !skip_firmware_check) {
          const err = new Error('Please upload NodePixel Firmata to the board');
          err.name = 'IncorrectFirmataVersionError';
          throw err;
        }

        // figure out where we are writing to
        const port = firmata.transport || firmata.sp || firmata;

        if (port.write === undefined) {
          const err = new Error('Node Pixel FIRMATA controller requires IO that can write out');
          err.name = 'NoWritablePortError';
          throw err;
        }

        const gamma = opts.gamma || GAMMA_DEFAULT; // Changing to 2.8 in v0.10

        // set up the gamma table
        const gtable = create_gamma_table(256, gamma, this.dep_warning.gamma);


        // work out the map of strips and pixels.
        if (typeof(strip_definition[0]) == 'undefined') {
          // there is nothing specified so it's probably a single strip
          // using the length and pin shorthand
          strip_definition.push( {
            pin: data_pin,
            color_order,
            length: strip_length
          });
        }

        // put in check if it's gone over value
        if (strip_definition.length > MAX_STRIPS) {
          const err = new RangeError('Maximum number of strips ' + MAX_STRIPS + ' exceeded');
          this.emit('error', err);
        }

        let total_length = 0;
        strip_definition.forEach(function(data) {
          total_length += data.length;
        });

        // put in check if there are too many pixels.
        if (total_length > MAX_PIXELS) {
          const err = new RangeError('Maximum number of pixels ' + MAX_PIXELS + ' exceeded');
          this.emit('error', err);
        }

        const pixel_list = [];

        for (let i=0; i< total_length; i++) {
          pixel_list.push(new Pixel({
            addr: i,
            firmata,
            port,
            controller: 'FIRMATA',
            strip: this
          }) );
        }

        strips.set(this, {
          pixels: pixel_list,
          data: data_pin,
          firmata,
          port,
          gtable,
          gamma
        });

        // now send the config message with length and data point.
        const data   = [];

        data[0] = START_SYSEX;
        data[1] = PIXEL_COMMAND;
        data[2] = PIXEL_CONFIG;
        strip_definition.forEach(function(strip) {
          data.push( (strip.color_order << 5) | strip.pin);
          data.push( strip.length & FIRMATA_7BIT_MASK);
          data.push( (strip.length >> 7) & FIRMATA_7BIT_MASK);
        });
        data.push(END_SYSEX);

        port.write(new Buffer(data), function(error, res) {
          let err = null;
          if (error) {
            err = error;
            this.emit('error', err);
          }
          // there is a weird bug in OSX which sometimes causes
          // a segfault if you try to write to fast. As such
          // just delay the ready event by 1msec because even this
          // is faster than hooman will perceive as a delay
          setTimeout(() => {
            this.emit('ready', err);
          }, 1);
        }.bind(this) );
      }
    },
    show: {
      value() {
        // call the frame on the strip.
        const strip = strips.get(this);

        const data   = [];
        data[0] = START_SYSEX;
        data[1] = PIXEL_COMMAND;
        data[2] = PIXEL_SHOW;
        data[3] = END_SYSEX;

        // now just write that to the port and it should show the frame.
        strip.port.write(new Buffer(data));
      }
    },
    strip_color: {
      value(color) {
        // colour work is already done this just sets it the appropriate
        // way.
        const strip = strips.get(this);
        const data   = [];

        data[0] = START_SYSEX;
        data[1] = PIXEL_COMMAND;
        data[2] = PIXEL_SET_STRIP;
        data[3] = color & FIRMATA_7BIT_MASK;
        data[4] = (color >> 7) & FIRMATA_7BIT_MASK;
        data[5] = (color >> 14) & FIRMATA_7BIT_MASK;
        data[6] = (color >> 21) & FIRMATA_7BIT_MASK;
        data[7] = END_SYSEX;

        strip.port.write(new Buffer(data));
      }
    },
    _shift: {
      value(amt, direction, wrap) {
        // shifts the strip in the appropriate direction.
        //
        const wrap_val = wrap ? PIXEL_SHIFT_WRAP : 0;
        const strip = strips.get(this);
        const data = [];
        data[0] = START_SYSEX;
        data[1] = PIXEL_COMMAND;
        data[2] = PIXEL_SHIFT;
        data[3] = (amt | direction | wrap_val) & FIRMATA_7BIT_MASK;
        data[4] = END_SYSEX;

        strip.port.write(new Buffer(data));
      }
    }
  },
  I2CBACKPACK: {
    initialize: {
      value(opts) {
        const MAX_PIXELS = 500; // based on # bytes available in firmata
        const strip_length = opts.length || 6; // just an arbitrary val
        const strip_definition = opts.strips || new Array();
        const color_order = opts.color_order || COLOR_ORDER.GRB; // default GRB
        const gamma = opts.gamma || GAMMA_DEFAULT; // Changing to 2.8 in v0.10

        // set up the gamma table
        const gtable = create_gamma_table(256, gamma, this.dep_warning.gamma);

        const io = opts.firmata || opts.board.io;

        if (!opts.address) {
          opts.address = I2C_DEFAULT;
        }

        if (io == undefined) {
          const err = new Error('An IO object is required to I2C controller');
          err.name = 'NoIOError';
          throw err;
        }

        // work out the map of strips and pixels.
        if (typeof(strip_definition[0]) == 'undefined') {
          // there is nothing specified so it's probably a single strip
          // using the length and colour type.
          strip_definition.push( {
            color_order,
            length: strip_length
          });
        } else if (parseInt(strip_definition[0], 10) != NaN) {
          // we have the array of pin lengths but do we have the colour

          for (let i = 0; i< strip_definition.length; i++) {
            const len = strip_definition[i];
            strip_definition[i] = {
              color_order,
              length: len
            };
          }
        }

        // put in check if it's gone over.
        if (strip_definition.length > MAX_STRIPS) {
          const err = new RangeError('Maximum number of strips ' + MAX_STRIPS + ' exceeded');
          this.emit('error', err);
        }

        let total_length = 0;
        strip_definition.forEach(function(data) {
          total_length += data.length;
        });

        // put in check if there are too many pixels.
        if (total_length > MAX_PIXELS) {
          const err = new RangeError('Maximum number of pixels ' + MAX_PIXELS + ' exceeded');
          this.emit('error', err);
        }

        const pixel_list = [];

        for (let i=0; i < total_length; i++) {
          pixel_list.push(new Pixel({
            addr: i,
            io,
            controller: 'I2CBACKPACK',
            i2c_address: opts.address,
            strip: this
          }) );
        }

        strips.set(this, {
          pixels: pixel_list,
          io,
          i2c_address: opts.address,
          gtable,
          gamma
        });

        // now send the config message with length and data point.
        const data   = [];

        data.push(PIXEL_CONFIG);
        strip_definition.forEach(function(strip) {
          data.push( (strip.color_order << 5) | strip.pin);
          data.push( strip.length & FIRMATA_7BIT_MASK);
          data.push( (strip.length >> 7) & FIRMATA_7BIT_MASK);
        });
        // send the I2C config message.
        io.i2cConfig(opts);
        process.nextTick(function() {
          try {
            io.i2cWrite(opts.address, data);
          } catch (e) {
            if (e instanceof Error && e.name == 'EIO') {
              this.emit('np_i2c_write_error', data);
            }
          }
          process.nextTick(function() {
            this.emit('ready', null);
          }.bind(this) );
        }.bind(this) );
      }
    },
    show: {
      value() {
        const strip = strips.get(this);
        try {
          strip.io.i2cWrite(strip.i2c_address, [PIXEL_SHOW]);
        } catch (e) {
          if (e instanceof Error && e.name == 'EIO') {
            this.emit('np_i2c_write_error', 'PIXEL_SHOW');
          }
        }
      }
    },
    strip_color: {
      value(color) {
        const strip = strips.get(this);
        const data   = [];

        data[0] = PIXEL_SET_STRIP;

        data[1] = color & FIRMATA_7BIT_MASK;
        data[2] = (color >> 7) & FIRMATA_7BIT_MASK;
        data[3] = (color >> 14) & FIRMATA_7BIT_MASK;
        data[4] = (color >> 21) & FIRMATA_7BIT_MASK;
        try {
          strip.io.i2cWrite(strip.i2c_address, data);
        } catch (e) {
          if (e instanceof Error && e.name == 'EIO') {
            this.emit('np_i2c_write_error', data);
          }
        }
      }
    },
    _shift: {
      value(amt, direction, wrap) {
        // shifts the strip in the appropriate direction.
        //
        const wrap_val = wrap ? PIXEL_SHIFT_WRAP : 0;
        const strip = strips.get(this);
        const data = [];
        data[0] = PIXEL_SHIFT;
        data[1] = (amt | direction | wrap_val) & FIRMATA_7BIT_MASK;
        try {
          strip.io.i2cWrite(strip.i2c_address, data);
        } catch (e) {
          if (e instanceof Error && e.name == 'EIO') {
            this.emit('np_i2c_write_error', data);
          }
        }
      }
    }
  }
};


function Strip(opts) {
  // opts contains an object with.
  // data: data pin for the pixel strip // DEPRECATED will be phased out.
  // length: length of the pixel strip. // DEPRECATED, will be phased out.
  // board: johnny five board object.
  // controller: controller type to use
  // firmata: actual firmata object if using firmata
  // stripShape: an array that contains lengths or optionally data pins and
  // lengths for each of them.
  //      eg: [ [6, 30], [12, 20], [7, 10] ] which would be 3 strips attached
  //      to pins 6, 12 and 7 and make a strip 60 pixels long.
  //      Otherwise [ 30, 20, 10 ] which would be 3 strips on PORTD 0-2 but
  //      still a strip 60 pixels long
  // gamma: A user specified value for gamma correction for the strip.
  //      default is 1.0 but will be changed to 2.8 over versions

  if (!(this instanceof Strip)) {
    return new Strip(opts);
  }

  let controller;

  if (typeof opts.controller === 'string') {
    controller = Controllers[opts.controller];
  } else {
    controller = opts.controller || Controllers['FIRMATA'];
  }

  this.dep_warning = {
    stripLength: false,
    gammaValue: (! typeof opts.gamma === 'undefined')
  };

  Object.defineProperties(this, controller);

  Object.defineProperty(this, 'length', {
    get() {
      const strip = strips.get(this);
      return strip.pixels.length;
    }
  });

  Object.defineProperty(this, 'gamma', {
    get() {
      const strip = strips.get(this);
      return strip.gamma;
    }
  });

  Object.defineProperty(this, 'gtable', {
    get() {
      const strip = strips.get(this);
      return strip.gtable;
    }
  });

  if (typeof this.initialize === 'function') {
    this.initialize(opts);
  }
}

util.inherits(Strip, events.EventEmitter);

Strip.prototype.pixel = function(addr) {
  const strip = strips.get(this);

  return strip.pixels[addr];
};

Strip.prototype.colour = Strip.prototype.color = function(color, opts) {
  // sets the color of the entire strip
  // use a particular form to set the color either
  // color = hex value or named colors
  // or set color null and set opt which is an object as {rgb: [rx, gx, bx]}
  // values where x is an 8-bit value (0-255);
  const strip = strips.get(this);

  let stripcolor = null;

  if (color) {
    // use text to determine the color
    if (typeof(color) === 'object') {
      // we have an RGB array value
      stripcolor = color;
    } else {
      try {
        stripcolor = ColorString.get(color).value;
      } catch (e) {
        if (e instanceof TypeError && ColorString.get(color) === null ) {
          stripcolor = null;
        }
      }
    }
  }

  if (stripcolor != null) {
    // fill out the values for the pixels and then update the strip

    for (let i = 0; i < strip.pixels.length; i++) {
      strip.pixels[i].color(color, {sendmsg: false});
    }

    // set the whole strip color to the appropriate int value
    this.strip_color(ColorString.colorValue(stripcolor, strip.gtable));
  } else {
    console.log("Supplied colour couldn't be parsed: " + color);
  }
};

Strip.prototype.off = Strip.prototype.clear = function() {
  // sets the strip to 'black', effectively setting it to 'off'
  this.color([0, 0, 0]);
  this.show();
};

Strip.prototype.shift = function(amt, direction, wrap) {
  // public version of the shift function independent of the controller.
  // this looks after the actual internal shifting of the pixels within the
  // js side and then calls the controller to mirror the same function.

  if (amt > 0) {
    const strip = strips.get(this);

    // take a copy of the pixels at the end that is being towards
    let start_element = 0;
    if (direction == SHIFT_FORWARD) {
      start_element = this.length - amt;
    }
    const tmp_pixels = strip.pixels.splice(start_element, amt);

    while (tmp_pixels.length > 0) {
      const px = tmp_pixels.pop();

      // set the pixel off if not wrapping.
      if (! wrap) {
        px.color('#000');
      }

      if (direction == SHIFT_FORWARD) {
        strip.pixels.unshift(px);
      } else {
        strip.pixels.push(px);
      }
    }

    // renumber the items so the addresses are correct for display
    strip.pixels.forEach((px, index) => {
      px.address = index;
    });

    // now get the firmware to update appropriately as well.
    this._shift(amt, direction, wrap);
  }
};

Strip.prototype.stripLength = function() {
  // gets the number of pixels in the strip

  strips.get(this);

  if (! this.dep_warning.stripLength) {
    console.info('ERROR: strip.stripLength() is deprecated in favour of strip.length');
    console.info('0.8 - notice');
    console.info('0.9 - error');
    console.info('0.10 - removal');
    this.dep_warning.stripLength = true;
  }

  throw new Error({
    name: 'NotImplemented',
    message: 'stripLength is no longer supported, use strip.length',
    toString() { return 'NotImplemented: stripLength is no longer supported' }
  });
};

// controllers for the pixel side as well.
var pixel = {
  Strip,
  COLOR_ORDER,
  FORWARD: SHIFT_FORWARD,
  BACKWARD: SHIFT_BACKWARD
};

var pixel$1 = /*@__PURE__*/getDefaultExportFromCjs(pixel);

class LEDStrip extends pixel$1.Strip {
    constructor({ pin, board, ledCount = 30, }) {
        super({
            board: board,
            controller: "FIRMATA",
            strips: [{ pin: pin, length: ledCount }],
            gamma: 2.8, // set to a gamma that works nicely for WS2812
        });
    }
}

class Metronome extends EventEmitter$2 {
    constructor(frequency = 1000) {
        super();
        this.frequency = frequency;
    }
    start() {
        if (this.interval) {
            return;
        }
        this.emit("start", {
            timestamp: Date.now(),
            frequency: this.frequency,
        });
        this.interval = setInterval(() => {
            this.emit("tick", {
                timestamp: Date.now(),
                frequency: this.frequency,
            });
        }, this.frequency);
    }
    stop() {
        clearInterval(this.interval);
        this.interval = undefined;
        this.emit("stop");
    }
    setFrequency(frequency) {
        if (this.frequency !== frequency) {
            this.frequency = frequency;
            clearInterval(this.interval);
            this.interval = setInterval(() => {
                this.emit("tick", {
                    timestamp: Date.now(),
                    frequency: this.frequency,
                });
            }, this.frequency);
        }
    }
}

var oledFont5x7 = {
  monospace: true,
  width: 5,
  height: 7,
  fontData: [
    0x00, 0x00, 0x00, 0x00, 0x00, // (space)
    0x00, 0x00, 0x5F, 0x00, 0x00, // !
    0x00, 0x07, 0x00, 0x07, 0x00, // "
    0x14, 0x7F, 0x14, 0x7F, 0x14, // #
    0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
    0x23, 0x13, 0x08, 0x64, 0x62, // %
    0x36, 0x49, 0x55, 0x22, 0x50, // &
    0x00, 0x05, 0x03, 0x00, 0x00, // '
    0x00, 0x1C, 0x22, 0x41, 0x00, // (
    0x00, 0x41, 0x22, 0x1C, 0x00, // )
    0x08, 0x2A, 0x1C, 0x2A, 0x08, // *
    0x08, 0x08, 0x3E, 0x08, 0x08, // +
    0x00, 0x50, 0x30, 0x00, 0x00, // ,
    0x08, 0x08, 0x08, 0x08, 0x08, // -
    0x00, 0x60, 0x60, 0x00, 0x00, // .
    0x20, 0x10, 0x08, 0x04, 0x02, // /
    0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
    0x00, 0x42, 0x7F, 0x40, 0x00, // 1
    0x42, 0x61, 0x51, 0x49, 0x46, // 2
    0x21, 0x41, 0x45, 0x4B, 0x31, // 3
    0x18, 0x14, 0x12, 0x7F, 0x10, // 4
    0x27, 0x45, 0x45, 0x45, 0x39, // 5
    0x3C, 0x4A, 0x49, 0x49, 0x30, // 6
    0x01, 0x71, 0x09, 0x05, 0x03, // 7
    0x36, 0x49, 0x49, 0x49, 0x36, // 8
    0x06, 0x49, 0x49, 0x29, 0x1E, // 9
    0x00, 0x36, 0x36, 0x00, 0x00, // :
    0x00, 0x56, 0x36, 0x00, 0x00, // ;
    0x00, 0x08, 0x14, 0x22, 0x41, // <
    0x14, 0x14, 0x14, 0x14, 0x14, // =
    0x41, 0x22, 0x14, 0x08, 0x00, // >
    0x02, 0x01, 0x51, 0x09, 0x06, // ?
    0x32, 0x49, 0x79, 0x41, 0x3E, // @
    0x7E, 0x11, 0x11, 0x11, 0x7E, // A
    0x7F, 0x49, 0x49, 0x49, 0x36, // B
    0x3E, 0x41, 0x41, 0x41, 0x22, // C
    0x7F, 0x41, 0x41, 0x22, 0x1C, // D
    0x7F, 0x49, 0x49, 0x49, 0x41, // E
    0x7F, 0x09, 0x09, 0x01, 0x01, // F
    0x3E, 0x41, 0x41, 0x51, 0x32, // G
    0x7F, 0x08, 0x08, 0x08, 0x7F, // H
    0x00, 0x41, 0x7F, 0x41, 0x00, // I
    0x20, 0x40, 0x41, 0x3F, 0x01, // J
    0x7F, 0x08, 0x14, 0x22, 0x41, // K
    0x7F, 0x40, 0x40, 0x40, 0x40, // L
    0x7F, 0x02, 0x04, 0x02, 0x7F, // M
    0x7F, 0x04, 0x08, 0x10, 0x7F, // N
    0x3E, 0x41, 0x41, 0x41, 0x3E, // O
    0x7F, 0x09, 0x09, 0x09, 0x06, // P
    0x3E, 0x41, 0x51, 0x21, 0x5E, // Q
    0x7F, 0x09, 0x19, 0x29, 0x46, // R
    0x46, 0x49, 0x49, 0x49, 0x31, // S
    0x01, 0x01, 0x7F, 0x01, 0x01, // T
    0x3F, 0x40, 0x40, 0x40, 0x3F, // U
    0x1F, 0x20, 0x40, 0x20, 0x1F, // V
    0x7F, 0x20, 0x18, 0x20, 0x7F, // W
    0x63, 0x14, 0x08, 0x14, 0x63, // X
    0x03, 0x04, 0x78, 0x04, 0x03, // Y
    0x61, 0x51, 0x49, 0x45, 0x43, // Z
    0x7D, 0x12, 0x12, 0x7D, 0x00, // Ä
    0x3D, 0x42, 0x42, 0x42, 0x3D, // Ö
    0x3D, 0x40, 0x40, 0x40, 0x3D, // Ü
    0x00, 0x00, 0x7F, 0x41, 0x41, // [
    0x02, 0x04, 0x08, 0x10, 0x20, // "\"
    0x41, 0x41, 0x7F, 0x00, 0x00, // ]
    0x04, 0x02, 0x01, 0x02, 0x04, // ^
    0x40, 0x40, 0x40, 0x40, 0x40, // _
    0x00, 0x01, 0x02, 0x04, 0x00, // `
    0x20, 0x54, 0x54, 0x54, 0x78, // a
    0x7F, 0x48, 0x44, 0x44, 0x38, // b
    0x38, 0x44, 0x44, 0x44, 0x20, // c
    0x38, 0x44, 0x44, 0x48, 0x7F, // d
    0x38, 0x54, 0x54, 0x54, 0x18, // e
    0x08, 0x7E, 0x09, 0x01, 0x02, // f
    0x08, 0x14, 0x54, 0x54, 0x3C, // g
    0x7F, 0x08, 0x04, 0x04, 0x78, // h
    0x00, 0x44, 0x7D, 0x40, 0x00, // i
    0x20, 0x40, 0x44, 0x3D, 0x00, // j
    0x00, 0x7F, 0x10, 0x28, 0x44, // k
    0x00, 0x41, 0x7F, 0x40, 0x00, // l
    0x7C, 0x04, 0x18, 0x04, 0x78, // m
    0x7C, 0x08, 0x04, 0x04, 0x78, // n
    0x38, 0x44, 0x44, 0x44, 0x38, // o
    0x7C, 0x14, 0x14, 0x14, 0x08, // p
    0x08, 0x14, 0x14, 0x18, 0x7C, // q
    0x7C, 0x08, 0x04, 0x04, 0x08, // r
    0x48, 0x54, 0x54, 0x54, 0x20, // s
    0x04, 0x3F, 0x44, 0x40, 0x20, // t
    0x3C, 0x40, 0x40, 0x20, 0x7C, // u
    0x1C, 0x20, 0x40, 0x20, 0x1C, // v
    0x3C, 0x40, 0x30, 0x40, 0x3C, // w
    0x44, 0x28, 0x10, 0x28, 0x44, // x
    0x0C, 0x50, 0x50, 0x50, 0x3C, // y
    0x44, 0x64, 0x54, 0x4C, 0x44, // z
    0x20, 0x55, 0x54, 0x55, 0x78, // ä
    0x3A, 0x44, 0x44, 0x3A, 0x00, // ö
    0x3A, 0x40, 0x40, 0x3A, 0x00, // ü
    0x00, 0x08, 0x36, 0x41, 0x00, // {
    0x00, 0x00, 0x7F, 0x00, 0x00, // |
    0x00, 0x41, 0x36, 0x08, 0x00, // }
    0x14, 0x3E, 0x55, 0x41, 0x22, // €
    0x08, 0x08, 0x2A, 0x1C, 0x08, // -> (ALT + 0134) † 
    0x08, 0x1C, 0x2A, 0x08, 0x08, // <- (ALT + 0135) ‡
    0x00, 0x00, 0x07, 0x05, 0x07  // °
  ],
  lookup: [' ', '!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/',
           '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@',
           'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',
           'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Ä', 'Ö', 'Ü', '[', '\\', ']', '^', '_', '`',
           'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
           'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'ä', 'ö', 'ü', '{', '|', '}', '€', '†', '‡', '°'
          ]
};

var font = /*@__PURE__*/getDefaultExportFromCjs(oledFont5x7);

var oled = {};

function pushBits(arr, n, value) {
    for (var bit = 1 << (n - 1); bit; bit = bit >>> 1) {
        arr.push(bit & value ? 1 : 0);
    }
}

// {{{1 8bit encode
function encode_8bit(data) {
    var len = data.length;
    var bits = [];

    for (var i = 0; i < len; i++) {
        pushBits(bits, 8, data[i]);
    }

    var res = {};

    var d = [0, 1, 0, 0];
    pushBits(d, 16, len);
    res.data10 = res.data27 = d.concat(bits);

    if (len < 256) {
        var d = [0, 1, 0, 0];
        pushBits(d, 8, len);
        res.data1 = d.concat(bits);
    }

    return res;
}

// {{{1 alphanumeric encode
var ALPHANUM = (function(s) {
    var res = {};
    for (var i = 0; i < s.length; i++) {
        res[s[i]] = i;
    }
    return res;
})('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:');

function encode_alphanum(str) {
    var len = str.length;
    var bits = [];

    for (var i = 0; i < len; i += 2) {
        var b = 6;
        var n = ALPHANUM[str[i]];
        if (str[i+1]) {
            b = 11;
            n = n * 45 + ALPHANUM[str[i+1]];
        }
        pushBits(bits, b, n);
    }

    var res = {};

    var d = [0, 0, 1, 0];
    pushBits(d, 13, len);
    res.data27 = d.concat(bits);

    if (len < 2048) {
        var d = [0, 0, 1, 0];
        pushBits(d, 11, len);
        res.data10 = d.concat(bits);
    }

    if (len < 512) {
        var d = [0, 0, 1, 0];
        pushBits(d, 9, len);
        res.data1 = d.concat(bits);
    }

    return res;
}

// {{{1 numeric encode
function encode_numeric(str) {
    var len = str.length;
    var bits = [];

    for (var i = 0; i < len; i += 3) {
        var s = str.substr(i, 3);
        var b = Math.ceil(s.length * 10 / 3);
        pushBits(bits, b, parseInt(s, 10));
    }

    var res = {};

    var d = [0, 0, 0, 1];
    pushBits(d, 14, len);
    res.data27 = d.concat(bits);

    if (len < 4096) {
        var d = [0, 0, 0, 1];
        pushBits(d, 12, len);
        res.data10 = d.concat(bits);
    }

    if (len < 1024) {
        var d = [0, 0, 0, 1];
        pushBits(d, 10, len);
        res.data1 = d.concat(bits);
    }

    return res;
}

// {{{1 url encode
function encode_url(str) {
    var slash = str.indexOf('/', 8) + 1 || str.length;
    var res = encode$1(str.slice(0, slash).toUpperCase(), false);

    if (slash >= str.length) {
        return res;
    }

    var path_res = encode$1(str.slice(slash), false);

    res.data27 = res.data27.concat(path_res.data27);

    if (res.data10 && path_res.data10) {
        res.data10 = res.data10.concat(path_res.data10);
    }

    if (res.data1 && path_res.data1) {
        res.data1 = res.data1.concat(path_res.data1);
    }

    return res;
}

// {{{1 Choose encode mode and generates struct with data for different version
function encode$1(data, parse_url) {
    var str;
    var t = typeof data;

    if (t == 'string' || t == 'number') {
        str = '' + data;
        data = new Buffer(str);
    } else if (Buffer.isBuffer(data)) {
        str = data.toString();
    } else if (Array.isArray(data)) {
        data = new Buffer(data);
        str = data.toString();
    } else {
        throw new Error("Bad data");
    }

    if (/^[0-9]+$/.test(str)) {
        if (data.length > 7089) {
            throw new Error("Too much data");
        }
        return encode_numeric(str);
    }

    if (/^[0-9A-Z \$%\*\+\.\/\:\-]+$/.test(str)) {
        if (data.length > 4296) {
            throw new Error("Too much data");
        }
        return encode_alphanum(str);
    }

    if (parse_url && /^https?:/i.test(str)) {
        return encode_url(str);
    }

    if (data.length > 2953) {
        throw new Error("Too much data");
    }
    return encode_8bit(data);
}

// {{{1 export functions
var encode_1 = encode$1;

// {{{1 Galois Field Math
var GF256_BASE = 285;

var EXP_TABLE = [1];
var LOG_TABLE = [];

for (var i = 1; i < 256; i++) {
    var n = EXP_TABLE[i - 1] << 1;
    if (n > 255) n = n ^ GF256_BASE;
    EXP_TABLE[i] = n;
}

for (var i = 0; i < 255; i++) {
    LOG_TABLE[EXP_TABLE[i]] = i;
}

function exp(k) {
    while (k < 0) k += 255;
    while (k > 255) k -= 255;
    return EXP_TABLE[k];
}

function log(k) {
    if (k < 1 || k > 255) {
        throw Error('Bad log(' + k + ')');
    }
    return LOG_TABLE[k];
}

// {{{1 Generator Polynomials
var POLYNOMIALS = [
    [0], // a^0 x^0
    [0, 0], // a^0 x^1 + a^0 x^0
    [0, 25, 1], // a^0 x^2 + a^25 x^1 + a^1 x^0
    // and so on...
];

function generatorPolynomial(num) {
    if (POLYNOMIALS[num]) {
        return POLYNOMIALS[num];
    }
    var prev = generatorPolynomial(num - 1);
    var res = [];

    res[0] = prev[0];
    for (var i = 1; i <= num; i++) {
        res[i] = log(exp(prev[i]) ^ exp(prev[i - 1] + num - 1));
    }
    POLYNOMIALS[num] = res;
    return res;
}

// {{{1 export functions
var errorcode = function calculate_ec(msg, ec_len) {
    // `msg` could be array or buffer
    // convert `msg` to array
    msg = [].slice.call(msg);

    // Generator Polynomial
    var poly = generatorPolynomial(ec_len);

    for (var i = 0; i < ec_len; i++) msg.push(0);
    while (msg.length > ec_len) {
        if (!msg[0]) {
            msg.shift();
            continue;
        }
        var log_k = log(msg[0]);
        for (var i = 0; i <= ec_len; i++) {
            msg[i] = msg[i] ^ exp(poly[i] + log_k);
        }
        msg.shift();
    }
    return new Buffer(msg);
};

// {{{1 Initialize matrix with zeros
function init(version) {
    var N = version * 4 + 17;
    var matrix = [];
    var zeros = new Buffer(N);
    zeros.fill(0);
    zeros = [].slice.call(zeros);
    for (var i = 0; i < N; i++) {
        matrix[i] = zeros.slice();
    }
    return matrix;
}

// {{{1 Put finders into matrix
function fillFinders(matrix) {
    var N = matrix.length;
    for (var i = -3; i <= 3; i++) {
        for (var j = -3; j <= 3; j++) {
            var max = Math.max(i, j);
            var min = Math.min(i, j);
            var pixel = (max == 2 && min >= -2) || (min == -2 && max <= 2) ? 0x80 : 0x81;
            matrix[3 + i][3 + j] = pixel;
            matrix[3 + i][N - 4 + j] = pixel;
            matrix[N - 4 + i][3 + j] = pixel;
        }
    }
    for (var i = 0; i < 8; i++) {
        matrix[7][i] = matrix[i][7] =
        matrix[7][N - i - 1] = matrix[i][N - 8] =
        matrix[N - 8][i] = matrix[N - 1 - i][7] = 0x80;
    }
}

// {{{1 Put align and timinig
function fillAlignAndTiming(matrix) {
    var N = matrix.length;
    if (N > 21) {
        var len = N - 13;
        var delta = Math.round(len / Math.ceil(len / 28));
        if (delta % 2) delta++;
        var res = [];
        for (var p = len + 6; p > 10; p -= delta) {
            res.unshift(p);
        }
        res.unshift(6);
        for (var i = 0; i < res.length; i++) {
            for (var j = 0; j < res.length; j++) {
                var x = res[i], y = res[j];
                if (matrix[x][y]) continue;
                for (var r = -2; r <=2 ; r++) {
                    for (var c = -2; c <=2 ; c++) {
                        var max = Math.max(r, c);
                        var min = Math.min(r, c);
                        var pixel = (max == 1 && min >= -1) || (min == -1 && max <= 1) ? 0x80 : 0x81;
                        matrix[x + r][y + c] = pixel;
                    }
                }
            }
        }
    }
    for (var i = 8; i < N - 8; i++) {
        matrix[6][i] = matrix[i][6] = i % 2 ? 0x80 : 0x81;
    }
}

// {{{1 Fill reserved areas with zeroes
function fillStub(matrix) {
    var N = matrix.length;
    for (var i = 0; i < 8; i++) {
        if (i != 6) {
            matrix[8][i] = matrix[i][8] = 0x80;
        }
        matrix[8][N - 1 - i] = 0x80;
        matrix[N - 1 - i][8] = 0x80;
    }
    matrix[8][8] = 0x80;
    matrix[N - 8][8] = 0x81;

    if (N < 45) return;

    for (var i = N - 11; i < N - 8; i++) {
        for (var j = 0; j < 6; j++) {
            matrix[i][j] = matrix[j][i] = 0x80;
        }
    }
}

// {{{1 Fill reserved areas
var fillReserved = (function() {
    var FORMATS = Array(32);
    var VERSIONS = Array(40);

    var gf15 = 0x0537;
    var gf18 = 0x1f25;
    var formats_mask = 0x5412;

    for (var format = 0; format < 32; format++) {
        var res = format << 10;
        for (var i = 5; i > 0; i--) {
            if (res >>> (9 + i)) {
                res = res ^ (gf15 << (i - 1));
            }
        }
        FORMATS[format] = (res | (format << 10)) ^ formats_mask;
    }

    for (var version = 7; version <= 40; version++) {
        var res = version << 12;
        for (var i = 6; i > 0; i--) {
            if (res >>> (11 + i)) {
                res = res ^ (gf18 << (i - 1));
            }
        }
        VERSIONS[version] = (res | (version << 12));
    }

    var EC_LEVELS = { L: 1, M: 0, Q: 3, H: 2 };

    return function fillReserved(matrix, ec_level, mask) {
        var N = matrix.length;
        var format = FORMATS[EC_LEVELS[ec_level] << 3 | mask];
        function F(k) { return format >> k & 1 ? 0x81 : 0x80 }        for (var i = 0; i < 8; i++) {
            matrix[8][N - 1 - i] = F(i);
            if (i < 6) matrix[i][8] = F(i);
        }
        for (var i = 8; i < 15; i++) {
            matrix[N - 15 + i][8] = F(i);
            if (i > 8) matrix[8][14 - i] = F(i);
        }
        matrix[7][8] = F(6);
        matrix[8][8] = F(7);
        matrix[8][7] = F(8);

        var version = VERSIONS[(N - 17)/4];
        if (!version) return;
        function V(k) { return version >> k & 1 ? 0x81 : 0x80 }        for (var i = 0; i < 6; i++) {
            for (var j = 0; j < 3; j++) {
                matrix[N - 11 + j][i] = matrix[i][N - 11 + j] = V(i * 3 + j);
            }
        }
    }
})();

// {{{1 Fill data
var fillData = (function() {
    var MASK_FUNCTIONS = [
        function(i, j) { return (i + j) % 2 == 0 },
        function(i, j) { return i % 2 == 0 },
        function(i, j) { return j % 3 == 0 },
        function(i, j) { return (i + j) % 3 == 0 },
        function(i, j) { return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0 },
        function(i, j) { return (i * j) % 2 + (i * j) % 3 == 0 },
        function(i, j) { return ( (i * j) % 2 + (i * j) % 3) % 2 == 0 },
        function(i, j) { return ( (i * j) % 3 + (i + j) % 2) % 2 == 0 }
    ];

    return function fillData(matrix, data, mask) {
        var N = matrix.length;
        var row, col, dir = -1;
        row = col = N - 1;
        var mask_fn = MASK_FUNCTIONS[mask];
        var len = data.blocks[data.blocks.length - 1].length;

        for (var i = 0; i < len; i++) {
            for (var b = 0; b < data.blocks.length; b++) {
                if (data.blocks[b].length <= i) continue;
                put(data.blocks[b][i]);
            }
        }

        len = data.ec_len;
        for (var i = 0; i < len; i++) {
            for (var b = 0; b < data.ec.length; b++) {
                put(data.ec[b][i]);
            }
        }

        if (col > -1) {
            do {
                matrix[row][col] = mask_fn(row, col) ? 1 : 0;
            } while (next());
        }

        function put(byte) {
            for (var mask = 0x80; mask; mask = mask >> 1) {
                var pixel = !!(mask & byte);
                if (mask_fn(row, col)) pixel = !pixel;
                matrix[row][col] = pixel ? 1 : 0;
                next();
            }
        }

        function next() {
            do {
                if ((col % 2) ^ (col < 6)) {
                    if (dir < 0 && row == 0 || dir > 0 && row == N - 1) {
                        col--;
                        dir = -dir;
                    } else {
                        col++;
                        row += dir;
                    }
                } else {
                    col--;
                }
                if (col == 6) {
                    col--;
                }
                if (col < 0) {
                    return false;
                }
            } while (matrix[row][col] & 0xf0);
            return true;
        }
    }
})();

// {{{1 Calculate penalty
function calculatePenalty(matrix) {
    var N = matrix.length;
    var penalty = 0;
    // Rule 1
    for (var i = 0; i < N; i++) {
        var pixel = matrix[i][0] & 1;
        var len = 1;
        for (var j = 1; j < N; j++) {
            var p = matrix[i][j] & 1;
            if (p == pixel) {
                len++;
                continue;
            }
            if (len >= 5) {
                penalty += len - 2;
            }
            pixel = p;
            len = 1;
        }
        if (len >= 5) {
            penalty += len - 2;
        }
    }
    for (var j = 0; j < N; j++) {
        var pixel = matrix[0][j] & 1;
        var len = 1;
        for (var i = 1; i < N; i++) {
            var p = matrix[i][j] & 1;
            if (p == pixel) {
                len++;
                continue;
            }
            if (len >= 5) {
                penalty += len - 2;
            }
            pixel = p;
            len = 1;
        }
        if (len >= 5) {
            penalty += len - 2;
        }
    }

    // Rule 2
    for (var i = 0; i < N - 1; i++) {
        for (var j = 0; j < N - 1; j++) {
            var s = matrix[i][j] + matrix[i][j + 1] + matrix[i + 1][j] + matrix[i + 1][j + 1] & 7;
            if (s == 0 || s == 4) {
                penalty += 3;
            }
        }
    }

    // Rule 3
    function I(k) { return matrix[i][j + k] & 1 }    function J(k) { return matrix[i + k][j] & 1 }    for (var i = 0; i < N; i++) {
        for (var j = 0; j < N; j++) {
            if (j < N - 6 && I(0) && !I(1) && I(2) && I(3) && I(4) && !I(5) && I(6)) {
                if (j >= 4 && !(I(-4) || I(-3) || I(-2) || I(-1))) {
                    penalty += 40;
                }
                if (j < N - 10 && !(I(7) || I(8) || I(9) || I(10))) {
                    penalty += 40;
                }
            }

            if (i < N - 6 && J(0) && !J(1) && J(2) && J(3) && J(4) && !J(5) && J(6)) {
                if (i >= 4 && !(J(-4) || J(-3) || J(-2) || J(-1))) {
                    penalty += 40;
                }
                if (i < N - 10 && !(J(7) || J(8) || J(9) || J(10))) {
                    penalty += 40;
                }
            }
        }
    }

    // Rule 4
    var numDark = 0;
    for (var i = 0; i < N; i++) {
        for (var j = 0; j < N; j++) {
            if (matrix[i][j] & 1) numDark++;
        }
    }
    penalty += 10 * Math.floor(Math.abs(10 - 20 * numDark/(N * N)));

    return penalty;
}

// {{{1 All-in-one function
function getMatrix(data) {
    var matrix = init(data.version);
    fillFinders(matrix);
    fillAlignAndTiming(matrix);
    fillStub(matrix);

    var penalty = Infinity;
    var bestMask = 0;
    for (var mask = 0; mask < 8; mask++) {
        fillData(matrix, data, mask);
        fillReserved(matrix, data.ec_level, mask);
        var p = calculatePenalty(matrix);
        if (p < penalty) {
            penalty = p;
            bestMask = mask;
        }
    }

    fillData(matrix, data, bestMask);
    fillReserved(matrix, data.ec_level, bestMask);

    return matrix.map(function(row) {
        return row.map(function(cell) {
            return cell & 1;
        });
    });
}

// {{{1 export functions
var matrix$1 = {
    getMatrix: getMatrix,
    init: init,
    fillFinders: fillFinders,
    fillAlignAndTiming: fillAlignAndTiming,
    fillStub: fillStub,
    fillReserved: fillReserved,
    fillData: fillData,
    calculatePenalty: calculatePenalty,
};

var encode = encode_1;
var calculateEC = errorcode;
var matrix = matrix$1;

function _deepCopy(obj) {
    return JSON.parse(JSON.stringify(obj));
}

var EC_LEVELS = ['L', 'M', 'Q', 'H'];

// {{{1 Versions
var versions = [
    [], // there is no version 0
    // total number of codewords, (number of ec codewords, number of blocks) * ( L, M, Q, H )
    [26, 7, 1, 10, 1, 13, 1, 17, 1],
    [44, 10, 1, 16, 1, 22, 1, 28, 1],
    [70, 15, 1, 26, 1, 36, 2, 44, 2],
    [100, 20, 1, 36, 2, 52, 2, 64, 4],
    [134, 26, 1, 48, 2, 72, 4, 88, 4], // 5
    [172, 36, 2, 64, 4, 96, 4, 112, 4],
    [196, 40, 2, 72, 4, 108, 6, 130, 5],
    [242, 48, 2, 88, 4, 132, 6, 156, 6],
    [292, 60, 2, 110, 5, 160, 8, 192, 8],
    [346, 72, 4, 130, 5, 192, 8, 224, 8], // 10
    [404, 80, 4, 150, 5, 224, 8, 264, 11],
    [466, 96, 4, 176, 8, 260, 10, 308, 11],
    [532, 104, 4, 198, 9, 288, 12, 352, 16],
    [581, 120, 4, 216, 9, 320, 16, 384, 16],
    [655, 132, 6, 240, 10, 360, 12, 432, 18], // 15
    [733, 144, 6, 280, 10, 408, 17, 480, 16],
    [815, 168, 6, 308, 11, 448, 16, 532, 19],
    [901, 180, 6, 338, 13, 504, 18, 588, 21],
    [991, 196, 7, 364, 14, 546, 21, 650, 25],
    [1085, 224, 8, 416, 16, 600, 20, 700, 25], // 20
    [1156, 224, 8, 442, 17, 644, 23, 750, 25],
    [1258, 252, 9, 476, 17, 690, 23, 816, 34],
    [1364, 270, 9, 504, 18, 750, 25, 900, 30],
    [1474, 300, 10, 560, 20, 810, 27, 960, 32],
    [1588, 312, 12, 588, 21, 870, 29, 1050, 35], // 25
    [1706, 336, 12, 644, 23, 952, 34, 1110, 37],
    [1828, 360, 12, 700, 25, 1020, 34, 1200, 40],
    [1921, 390, 13, 728, 26, 1050, 35, 1260, 42],
    [2051, 420, 14, 784, 28, 1140, 38, 1350, 45],
    [2185, 450, 15, 812, 29, 1200, 40, 1440, 48], // 30
    [2323, 480, 16, 868, 31, 1290, 43, 1530, 51],
    [2465, 510, 17, 924, 33, 1350, 45, 1620, 54],
    [2611, 540, 18, 980, 35, 1440, 48, 1710, 57],
    [2761, 570, 19, 1036, 37, 1530, 51, 1800, 60],
    [2876, 570, 19, 1064, 38, 1590, 53, 1890, 63], // 35
    [3034, 600, 20, 1120, 40, 1680, 56, 1980, 66],
    [3196, 630, 21, 1204, 43, 1770, 59, 2100, 70],
    [3362, 660, 22, 1260, 45, 1860, 62, 2220, 74],
    [3532, 720, 24, 1316, 47, 1950, 65, 2310, 77],
    [3706, 750, 25, 1372, 49, 2040, 68, 2430, 81] // 40
];

versions = versions.map(function(v, index) {
    if (!index) return {};

    var res = {
    };
    for (var i = 1; i < 8; i += 2) {
        var length = v[0] - v[i];
        var num_template = v[i+1];
        var ec_level = EC_LEVELS[(i/2)|0];
        var level = {
            version: index,
            ec_level: ec_level,
            data_len: length,
            ec_len: v[i] / num_template,
            blocks: [],
            ec: []
        };

        for (var k = num_template, n = length; k > 0; k--) {
            var block = (n / k)|0;
            level.blocks.push(block);
            n -= block;

        }
        res[ec_level] = level;
    }
    return res;
});

// {{{1 Get version template
function getTemplate(message, ec_level) {
    var i = 1;
    var len;

    if (message.data1) {
        len = Math.ceil(message.data1.length / 8);
    } else {
        i = 10;
    }
    for (/* i */; i < 10; i++) {
        var version = versions[i][ec_level];
        if (version.data_len >= len) {
            return _deepCopy(version);
        }
    }

    if (message.data10) {
        len = Math.ceil(message.data10.length / 8);
    } else {
        i = 27;
    }
    for (/* i */; i < 27; i++) {
        var version = versions[i][ec_level];
        if (version.data_len >= len) {
            return _deepCopy(version);
        }
    }

    len = Math.ceil(message.data27.length / 8);
    for (/* i */; i < 41; i++) {
        var version = versions[i][ec_level];
        if (version.data_len >= len) {
            return _deepCopy(version);
        }
    }
    throw new Error("Too much data");
}

// {{{1 Fill template
function fillTemplate(message, template) {
    var blocks = new Buffer(template.data_len);
    blocks.fill(0);

    if (template.version < 10) {
        message = message.data1;
    } else if (template.version < 27) {
        message = message.data10;
    } else {
        message = message.data27;
    }

    var len = message.length;

    for (var i = 0; i < len; i += 8) {
        var b = 0;
        for (var j = 0; j < 8; j++) {
            b = (b << 1) | (message[i + j] ? 1 : 0);
        }
        blocks[i / 8] = b;
    }

    var pad = 236;
    for (var i = Math.ceil((len + 4) / 8); i < blocks.length; i++) {
        blocks[i] = pad;
        pad = (pad == 236) ? 17 : 236;
    }

    var offset = 0;
    template.blocks = template.blocks.map(function(n) {
        var b = blocks.slice(offset, offset + n);
        offset += n;
        template.ec.push(calculateEC(b, template.ec_len));
        return b;
    });

    return template;
}

// {{{1 All-in-one
function QR$1(text, ec_level, parse_url) {
    ec_level = EC_LEVELS.indexOf(ec_level) > -1 ? ec_level : 'M';
    var message = encode(text, parse_url);
    var data = fillTemplate(message, getTemplate(message, ec_level));
    return matrix.getMatrix(data);
}

// {{{1 export functions
var qrBase = {
    QR: QR$1,
    getTemplate: getTemplate,
    fillTemplate: fillTemplate,
};

var crc32$1 = {exports: {}};

var crc32buffer;
var hasRequiredCrc32buffer;

function requireCrc32buffer () {
	if (hasRequiredCrc32buffer) return crc32buffer;
	hasRequiredCrc32buffer = 1;

	var crc_table = [];

	for (var n = 0; n < 256; n++) {
	    var c = crc_table[n] = new Buffer(4);
	    c.writeUInt32BE(n, 0);

	    for (var k = 0; k < 8; k++) {
	        var b0 = c[0] & 1;
	        var b1 = c[1] & 1;
	        var b2 = c[2] & 1;
	        var b3 = c[3] & 1;

	        c[0] = (c[0] >> 1) ^ (b3 ? 0xed : 0);
	        c[1] = (c[1] >> 1) ^ (b3 ? 0xb8 : 0) ^ (b0 ? 0x80 : 0);
	        c[2] = (c[2] >> 1) ^ (b3 ? 0x83 : 0) ^ (b1 ? 0x80 : 0);
	        c[3] = (c[3] >> 1) ^ (b3 ? 0x20 : 0) ^ (b2 ? 0x80 : 0);
	    }
	}

	function update(c, buf) {
	    var l = buf.length;
	    for (var n = 0; n < l; n++) {
	        var e = crc_table[c[3] ^ buf[n]];
	        c[3] = e[3] ^ c[2];
	        c[2] = e[2] ^ c[1];
	        c[1] = e[1] ^ c[0];
	        c[0] = e[0];
	    }
	}

	function crc32(/* arguments */) {
	    var l = arguments.length;
	    var c = new Buffer(4);
	    c.fill(0xff);

	    for (var i = 0; i < l; i++) {
	        update(c, new Buffer(arguments[i]));
	    }

	    c[0] = c[0] ^ 0xff;
	    c[1] = c[1] ^ 0xff;
	    c[2] = c[2] ^ 0xff;
	    c[3] = c[3] ^ 0xff;

	    return c.readUInt32BE(0);
	}

	crc32buffer = crc32;
	return crc32buffer;
}

(function() {

// ARMv6 (Raspberry Pi) has bug in bitwise operations
// https://code.google.com/p/v8/issues/detail?id=3757
// https://github.com/alexeyten/qr-image/issues/13
if (process.arch === 'arm') {
    crc32$1.exports = requireCrc32buffer();
    return;
}

var crc_table = [];

(function() {
    for (var n = 0; n < 256; n++) {
        var c = n;
        for (var k = 0; k < 8; k++) {
            if (c & 1) {
                c = 0xedb88320 ^ (c >>> 1);
            } else {
                c = c >>> 1;
            }
        }
        crc_table[n] = c >>> 0;
    }
})();

function update(c, buf) {
    var l = buf.length;
    for (var n = 0; n < l; n++) {
        c = crc_table[(c ^ buf[n]) & 0xff] ^ (c >>> 8);
    }
    return c;
}

function crc32(/* arguments */) {
    var l = arguments.length;
    var c = -1;
    for (var i = 0; i < l; i++) {
        c = update(c, new Buffer(arguments[i]));
    }
    c = (c ^ -1) >>> 0;
    return c;
}

crc32$1.exports = crc32;
    
})();

var crc32Exports = crc32$1.exports;

var zlib = require$$0$5;

var crc32 = crc32Exports;

var PNG_HEAD = new Buffer([137,80,78,71,13,10,26,10]);
var PNG_IHDR = new Buffer([0,0,0,13,73,72,68,82,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0]);
var PNG_IDAT = new Buffer([0,0,0,0,73,68,65,84]);
var PNG_IEND = new Buffer([0,0,0,0,73,69,78,68,174,66,96,130]);

function png$1(bitmap, stream) {
    stream.push(PNG_HEAD);

    var IHDR = Buffer.concat([PNG_IHDR]);
    IHDR.writeUInt32BE(bitmap.size, 8);
    IHDR.writeUInt32BE(bitmap.size, 12);
    IHDR.writeUInt32BE(crc32(IHDR.slice(4, -4)), 21);
    stream.push(IHDR);

    var IDAT = Buffer.concat([
        PNG_IDAT,
        zlib.deflateSync(bitmap.data, { level: 9 }),
        new Buffer(4)
    ]);
    IDAT.writeUInt32BE(IDAT.length - 12, 0);
    IDAT.writeUInt32BE(crc32(IDAT.slice(4, -4)), IDAT.length - 4);
    stream.push(IDAT);

    stream.push(PNG_IEND);
    stream.push(null);
}

function bitmap(matrix, size, margin) {
    var N = matrix.length;
    var X = (N + 2 * margin) * size;
    var data = new Buffer((X + 1) * X);
    data.fill(255);
    for (var i = 0; i < X; i++) {
        data[i * (X + 1)] = 0;
    }

    for (var i = 0; i < N; i++) {
        for (var j = 0; j < N; j++) {
            if (matrix[i][j]) {
                var offset = ((margin + i) * (X + 1) + (margin + j)) * size + 1;
                data.fill(0, offset, offset + size);
                for (var c = 1; c < size; c++) {
                    data.copy(data, offset + c * (X + 1), offset, offset + size);
                }
            }
        }
    }

    return {
        data: data,
        size: X
    }
}

var png_1 = {
    bitmap: bitmap,
    png: png$1
};

function matrix2path(matrix) {
    var N = matrix.length;
    var filled = [];
    for (var row = -1; row <= N; row++) {
        filled[row] = [];
    }

    var path = [];
    for (var row = 0; row < N; row++) {
        for (var col = 0; col < N; col++) {
            if (filled[row][col]) continue;
            filled[row][col] = 1;
            if (isDark(row, col)) {
                if (!isDark(row - 1, col)) {
                    path.push(plot(row, col, 'right'));
                }
            } else {
                if (isDark(row, col - 1)) {
                    path.push(plot(row, col, 'down'));
                }
            }
        }
    }
    return path;

    function isDark(row, col) {
        if (row < 0 || col < 0 || row >= N || col >= N) return false;
        return !!matrix[row][col];
    }

    function plot(row0, col0, dir) {
        filled[row0][col0] = 1;
        var res = [];
        res.push(['M',  col0, row0 ]);
        var row = row0;
        var col = col0;
        var len = 0;
        do {
            switch (dir) {
            case 'right':
                filled[row][col] = 1;
                if (isDark(row, col)) {
                    filled[row - 1][col] = 1;
                    if (isDark(row - 1, col)) {
                        res.push(['h', len]);
                        len = 0;
                        dir = 'up';
                    } else {
                        len++;
                        col++;
                    }
                } else {
                    res.push(['h', len]);
                    len = 0;
                    dir = 'down';
                }
                break;
            case 'left':
                filled[row - 1][col - 1] = 1;
                if (isDark(row - 1, col - 1)) {
                    filled[row][col - 1] = 1;
                    if (isDark(row, col - 1)) {
                        res.push(['h', -len]);
                        len = 0;
                        dir = 'down';
                    } else {
                        len++;
                        col--;
                    }
                } else {
                    res.push(['h', -len]);
                    len = 0;
                    dir = 'up';
                }
                break;
            case 'down':
                filled[row][col - 1] = 1;
                if (isDark(row, col - 1)) {
                    filled[row][col] = 1;
                    if (isDark(row, col)) {
                        res.push(['v', len]);
                        len = 0;
                        dir = 'right';
                    } else {
                        len++;
                        row++;
                    }
                } else {
                    res.push(['v', len]);
                    len = 0;
                    dir = 'left';
                }
                break;
            case 'up':
                filled[row - 1][col] = 1;
                if (isDark(row - 1, col)) {
                    filled[row - 1][col - 1] = 1;
                    if (isDark(row - 1, col - 1)) {
                        res.push(['v', -len]);
                        len = 0;
                        dir = 'left';
                    } else {
                        len++;
                        row--;
                    }
                } else {
                    res.push(['v', -len]);
                    len = 0;
                    dir = 'right';
                }
                break;
            }
        } while (row != row0 || col != col0);
        return res;
    }
}

function pushSVGPath(matrix, stream, margin) {
    matrix2path(matrix).forEach(function(subpath) {
        var res = '';
        for (var k = 0; k < subpath.length; k++) {
            var item = subpath[k];
            switch (item[0]) {
            case 'M':
                res += 'M' + (item[1] + margin) + ' ' + (item[2] + margin);
                break;
            default:
                res += item.join('');
            }
        }
        res += 'z';
        stream.push(res);
    });
}

function SVG_object(matrix, margin) {
    var stream = [];
    pushSVGPath(matrix, stream, margin);

    var result = {
        size: matrix.length + 2 * margin,
        path: stream.filter(Boolean).join('')
    };

    return result;
}

function SVG(matrix, stream, margin, size) {
    var X = matrix.length + 2 * margin;
    stream.push('<svg xmlns="http://www.w3.org/2000/svg" ');
    if (size > 0) {
        var XY = X * size;
        stream.push('width="' + XY + '" height="' + XY + '" ');
    }
    stream.push('viewBox="0 0 ' + X + ' ' + X + '">');
    stream.push('<path d="');
    pushSVGPath(matrix, stream, margin);
    stream.push('"/></svg>');
    stream.push(null);
}

function EPS(matrix, stream, margin) {
    var N = matrix.length;
    var scale = 9;
    var X = (N + 2 * margin) * scale;
    stream.push([
        '%!PS-Adobe-3.0 EPSF-3.0',
        '%%BoundingBox: 0 0 ' + X + ' ' + X,
        '/h { 0 rlineto } bind def',
        '/v { 0 exch neg rlineto } bind def',
        '/M { neg ' + (N + margin) + ' add moveto } bind def',
        '/z { closepath } bind def',
        scale + ' ' + scale + ' scale',
        ''
    ].join('\n'));

    matrix2path(matrix).forEach(function(subpath) {
        var res = '';
        for (var k = 0; k < subpath.length; k++) {
            var item = subpath[k];
            switch (item[0]) {
            case 'M':
                res += (item[1] + margin) + ' ' + item[2] + ' M ';
                break;
            default:
                res += item[1] + ' ' + item[0] + ' ';
            }
        }
        res += 'z\n';
        stream.push(res);
    });

    stream.push('fill\n%%EOF\n');
    stream.push(null);
}

function PDF(matrix, stream, margin) {
    // TODO deflate
    var N = matrix.length;
    var scale = 9;
    var X = (N + 2 * margin) * scale;
    var data = [
        '%PDF-1.0\n\n',
        '1 0 obj << /Type /Catalog /Pages 2 0 R >> endobj\n',
        '2 0 obj << /Type /Pages /Count 1 /Kids [ 3 0 R ] >> endobj\n',
    ];
    data.push('3 0 obj << /Type /Page /Parent 2 0 R /Resources <<>> ' +
        '/Contents 4 0 R /MediaBox [ 0 0 ' + X + ' ' + X + ' ] >> endobj\n');

    var path = scale + ' 0 0 ' + scale + ' 0 0 cm\n';
    path += matrix2path(matrix).map(function(subpath) {
        var res = '';
        var x, y;
        for (var k = 0; k < subpath.length; k++) {
            var item = subpath[k];
            switch (item[0]) {
            case 'M':
                x = item[1] + margin;
                y = N - item[2] + margin;
                res += x + ' ' + y + ' m ';
                break;
            case 'h':
                x += item[1];
                res += x + ' ' + y + ' l ';
                break;
            case 'v':
                y -= item[1];
                res += x + ' ' + y + ' l ';
                break;
            }
        }
        res += 'h';
        return res;
    }).join('\n');
    path += '\nf\n';
    data.push('4 0 obj << /Length ' + path.length + ' >> stream\n' +
        path + 'endstream\nendobj\n');

    var xref = 'xref\n0 5\n0000000000 65535 f \n';
    for (var i = 1, l = data[0].length; i < 5; i++) {
        xref += ('0000000000' + l).substr(-10) + ' 00000 n \n';
        l += data[i].length;
    }
    data.push(
        xref,
        'trailer << /Root 1 0 R /Size 5 >>\n',
        'startxref\n' + l + '\n%%EOF\n'
    );
    stream.push(data.join(''));
    stream.push(null);
}

var vector$1 = {
    svg: SVG,
    eps: EPS,
    pdf: PDF,
    svg_object: SVG_object
};

var Readable = require$$0.Readable;

var QR = qrBase.QR;
var png = png_1;
var vector = vector$1;

var fn_noop = function() {};

var BITMAP_OPTIONS = {
    parse_url: false,
    ec_level: 'M',
    size: 5,
    margin: 4,
    customize: null
};

var VECTOR_OPTIONS = {
    parse_url: false,
    ec_level: 'M',
    margin: 1,
    size: 0
};

function get_options(options, force_type) {
    if (typeof options === 'string') {
        options = { 'ec_level': options };
    } else {
        options = options || {};
    }
    var _options = {
        type: String(force_type || options.type || 'png').toLowerCase()
    };

    var defaults = _options.type == 'png' ? BITMAP_OPTIONS : VECTOR_OPTIONS;

    for (var k in defaults) {
        _options[k] = k in options ? options[k] : defaults[k];
    }

    return _options;
}

function qr_image(text, options) {
    options = get_options(options);

    var matrix = QR(text, options.ec_level, options.parse_url);
    var stream = new Readable();
    stream._read = fn_noop;

    switch (options.type) {
    case 'svg':
    case 'pdf':
    case 'eps':
        process.nextTick(function() {
            vector[options.type](matrix, stream, options.margin, options.size);
        });
        break;
    case 'svgpath':
        // deprecated, use svg_object method
        process.nextTick(function() {
            var obj = vector.svg_object(matrix, options.margin, options.size);
            stream.push(obj.path);
            stream.push(null);
        });
        break;
    case 'png':
    default:
        process.nextTick(function() {
            var bitmap = png.bitmap(matrix, options.size, options.margin);
            if (options.customize) {
                options.customize(bitmap);
            }
            png.png(bitmap, stream);
        });
    }

    return stream;
}

function qr_image_sync(text, options) {
    options = get_options(options);

    var matrix = QR(text, options.ec_level, options.parse_url);
    var stream = [];
    var result;

    switch (options.type) {
    case 'svg':
    case 'pdf':
    case 'eps':
        vector[options.type](matrix, stream, options.margin, options.size);
        result = stream.filter(Boolean).join('');
        break;
    case 'png':
    default:
        var bitmap = png.bitmap(matrix, options.size, options.margin);
        if (options.customize) {
            options.customize(bitmap);
        }
        png.png(bitmap, stream);
        result = Buffer.concat(stream.filter(Boolean));
    }

    return result;
}

function svg_object(text, options) {
    options = get_options(options, 'svg');

    var matrix = QR(text, options.ec_level);
    return vector.svg_object(matrix, options.margin);
}

var qr$1 = {
    matrix: QR,
    image: qr_image,
    imageSync: qr_image_sync,
    svgObject: svg_object
};

var qr$2 = /*@__PURE__*/getDefaultExportFromCjs(qr$1);

Object.defineProperty(oled, "__esModule", { value: true });
var qr = null;
try {
    qr = qr$1;
}
catch (err) {
}
var Protocol;
(function (Protocol) {
    Protocol[Protocol["I2C"] = 0] = "I2C";
    Protocol[Protocol["SPI"] = 1] = "SPI";
})(Protocol || (Protocol = {}));
var TransferType;
(function (TransferType) {
    TransferType[TransferType["Command"] = 0] = "Command";
    TransferType[TransferType["Data"] = 1] = "Data";
})(TransferType || (TransferType = {}));
var Oled = (function () {
    function Oled(board, five, opts) {
        this.HEIGHT = opts.height || 32;
        this.WIDTH = opts.width || 128;
        this.ADDRESS = opts.address || 0x3c;
        this.PROTOCOL = opts.address ? Protocol.I2C : Protocol.SPI;
        this.MICROVIEW = opts.microview || false;
        this.SECONDARYPIN = opts.secondaryPin || 12;
        this.RESETPIN = opts.resetPin === undefined ? 4 : opts.resetPin;
        this.DATA = opts.data || 0x40;
        this.COMMAND = opts.command || 0x00;
        this.cursor_x = 0;
        this.cursor_y = 0;
        this.buffer = Buffer.alloc((this.WIDTH * this.HEIGHT) / 8);
        this.buffer.fill(0x00);
        this.dirtyBytes = [];
        this.board = board;
        this.five = five;
        var config = {
            '128x32': {
                multiplex: 0x1f,
                compins: 0x02,
                coloffset: 0,
            },
            '128x64': {
                multiplex: 0x3f,
                compins: 0x12,
                coloffset: 0,
            },
            '96x16': {
                multiplex: 0x0f,
                compins: 0x2,
                coloffset: 0,
            },
            '64x48': {
                multiplex: 0x2f,
                compins: 0x12,
                coloffset: this.MICROVIEW ? 32 : 0,
            },
        };
        if (this.MICROVIEW) {
            this.SPIconfig = {
                dcPin: 8,
                ssPin: 10,
                rstPin: 7,
                clkPin: 13,
                mosiPin: 11,
            };
        }
        else if (this.PROTOCOL === Protocol.SPI) {
            this.SPIconfig = {
                dcPin: 11,
                ssPin: this.SECONDARYPIN,
                rstPin: 13,
                clkPin: 10,
                mosiPin: 9,
            };
        }
        var screenSize = "".concat(this.WIDTH, "x").concat(this.HEIGHT);
        this.screenConfig = config[screenSize];
        if (this.PROTOCOL === Protocol.I2C) {
            this._setUpI2C(opts);
        }
        else {
            this._setUpSPI();
        }
        this._initialise();
    }
    Oled.prototype._initialise = function () {
        var initSeq = [
            Oled.DISPLAY_OFF,
            Oled.SET_DISPLAY_CLOCK_DIV,
            0x80,
            Oled.SET_MULTIPLEX,
            this.screenConfig.multiplex,
            Oled.SET_DISPLAY_OFFSET,
            0x00,
            Oled.SET_START_LINE,
            Oled.CHARGE_PUMP,
            0x14,
            Oled.MEMORY_MODE,
            0x00,
            Oled.SEG_REMAP,
            Oled.COM_SCAN_DEC,
            Oled.SET_COM_PINS,
            this.screenConfig.compins,
            Oled.SET_CONTRAST,
            0x8f,
            Oled.SET_PRECHARGE,
            0xf1,
            Oled.SET_VCOM_DETECT,
            0x40,
            Oled.DISPLAY_ALL_ON_RESUME,
            Oled.NORMAL_DISPLAY,
            Oled.DISPLAY_ON,
        ];
        for (var i = 0; i < initSeq.length; i++) {
            this._transfer(TransferType.Command, initSeq[i]);
        }
    };
    Oled.prototype._setUpSPI = function () {
        this.dcPin = new this.five.Pin(this.SPIconfig.dcPin);
        this.ssPin = new this.five.Pin(this.SPIconfig.ssPin);
        this.clkPin = new this.five.Pin(this.SPIconfig.clkPin);
        this.mosiPin = new this.five.Pin(this.SPIconfig.mosiPin);
        this.rstPin = new this.five.Pin(this.SPIconfig.rstPin);
        this.rstPin.low();
        this.rstPin.high();
        this.ssPin.high();
    };
    Oled.prototype._setUpI2C = function (opts) {
        this.board.io.i2cConfig(opts);
        if (this.rstPin) {
            this.rstPin = new this.five.Pin({
                pin: this.RESETPIN,
                board: this.board,
            });
            this.rstPin.low();
            this.rstPin.high();
        }
    };
    Oled.prototype._transfer = function (type, val) {
        var control;
        if (type === TransferType.Data) {
            control = this.DATA;
        }
        else if (type === TransferType.Command) {
            control = this.COMMAND;
        }
        else {
            return;
        }
        if (this.PROTOCOL === Protocol.I2C) {
            this.board.io.i2cWrite(this.ADDRESS, [control, val]);
        }
        else {
            this._writeSPI(val, type);
        }
    };
    Oled.prototype._writeSPI = function (byte, mode) {
        if (mode === TransferType.Command) {
            this.dcPin.low();
        }
        else {
            this.dcPin.high();
        }
        this.ssPin.low();
        for (var bit = 7; bit >= 0; bit--) {
            this.clkPin.low();
            if (byte & (1 << bit)) {
                this.mosiPin.high();
            }
            else {
                this.mosiPin.low();
            }
            this.clkPin.high();
        }
        this.ssPin.high();
    };
    Oled.prototype._readI2C = function (fn) {
        this.board.io.i2cReadOnce(this.ADDRESS, 1, function (data) {
            fn(data);
        });
    };
    Oled.prototype._waitUntilReady = function (callback) {
        var oled = this;
        var tick = function (callback) {
            oled._readI2C(function (byte) {
                var busy = (byte >> 7) & 1;
                if (!busy) {
                    callback();
                }
                else {
                    console.log("I'm busy!");
                    setTimeout(tick, 0);
                }
            });
        };
        if (this.PROTOCOL === Protocol.I2C) {
            setTimeout(function () {
                tick(callback);
            }, 0);
        }
        else {
            callback();
        }
    };
    Oled.prototype.setCursor = function (x, y) {
        this.cursor_x = x;
        this.cursor_y = y;
    };
    Oled.prototype._invertColor = function (color) {
        return color === 0 ? 1 : 0;
    };
    Oled.prototype.writeString = function (font, size, string, color, wrap, linespacing, sync) {
        var immed = typeof sync === 'undefined' ? true : sync;
        var wordArr = string.split(' ');
        var len = wordArr.length;
        var offset = this.cursor_x;
        var padding = 0;
        var letspace = 1;
        var leading = linespacing || 2;
        for (var i = 0; i < len; i += 1) {
            if (i < len - 1)
                wordArr[i] += ' ';
            var stringArr = wordArr[i].split('');
            var slen = stringArr.length;
            var compare = font.width * size * slen + size * (len - 1);
            if (wrap && len > 1 && offset >= this.WIDTH - compare) {
                offset = 1;
                this.cursor_y += font.height * size + size + leading;
                this.setCursor(offset, this.cursor_y);
            }
            for (var i_1 = 0; i_1 < slen; i_1 += 1) {
                var charBuf = this._findCharBuf(font, stringArr[i_1]);
                var charBytes = this._readCharBytes(charBuf);
                this._drawChar(font, charBytes, size, color, false);
                this.fillRect(offset - padding, this.cursor_y, padding, font.height * size, this._invertColor(color), false);
                padding = stringArr[i_1] === ' ' ? 0 : size + letspace;
                offset += font.width * size + padding;
                if (wrap && offset >= this.WIDTH - font.width - letspace) {
                    offset = 1;
                    this.cursor_y += font.height * size + size + leading;
                }
                this.setCursor(offset, this.cursor_y);
            }
        }
        if (immed) {
            this._updateDirtyBytes(this.dirtyBytes);
        }
    };
    Oled.prototype._drawChar = function (font, byteArray, size, color, sync) {
        var x = this.cursor_x;
        var y = this.cursor_y;
        var c = 0;
        var pagePos = 0;
        for (var i = 0; i < byteArray.length; i += 1) {
            pagePos = Math.floor(i / font.width) * 8;
            for (var j = 0; j < 8; j += 1) {
                var pixelState = byteArray[i][j] === 1 ? color : this._invertColor(color);
                var xpos = void 0;
                var ypos = void 0;
                if (size === 1) {
                    xpos = x + c;
                    ypos = y + j + pagePos;
                    this.drawPixel([xpos, ypos, pixelState], false);
                }
                else {
                    xpos = x + i * size;
                    ypos = y + j * size;
                    this.fillRect(xpos, ypos, size, size, pixelState, false);
                }
            }
            c = c < font.width - 1 ? (c += 1) : 0;
        }
    };
    Oled.prototype._readCharBytes = function (byteArray) {
        var bitArr = [];
        var bitCharArr = [];
        for (var i = 0; i < byteArray.length; i += 1) {
            var byte = byteArray[i];
            for (var j = 0; j < 8; j += 1) {
                var bit = (byte >> j) & 1;
                bitArr.push(bit);
            }
            bitCharArr.push(bitArr);
            bitArr = [];
        }
        return bitCharArr;
    };
    Oled.prototype._findCharBuf = function (font, c) {
        var charLength = Math.ceil((font.width * font.height) / 8);
        var cBufPos = font.lookup.indexOf(c) * charLength;
        return font.fontData.slice(cBufPos, cBufPos + charLength);
    };
    Oled.prototype.update = function () {
        var _this = this;
        this._waitUntilReady(function () {
            var displaySeq = [
                Oled.COLUMN_ADDR,
                _this.screenConfig.coloffset,
                _this.screenConfig.coloffset + _this.WIDTH - 1,
                Oled.PAGE_ADDR,
                0,
                _this.HEIGHT / 8 - 1,
            ];
            var displaySeqLen = displaySeq.length;
            var bufferLen = _this.buffer.length;
            for (var i = 0; i < displaySeqLen; i += 1) {
                _this._transfer(TransferType.Command, displaySeq[i]);
            }
            for (var i = 0; i < bufferLen; i += 1) {
                _this._transfer(TransferType.Data, _this.buffer[i]);
            }
        });
        this.dirtyBytes = [];
    };
    Oled.prototype.updateDirty = function () {
        this._updateDirtyBytes(this.dirtyBytes);
    };
    Oled.prototype.dimDisplay = function (bool) {
        var contrast;
        if (bool) {
            contrast = 0;
        }
        else {
            contrast = 0xcf;
        }
        this._transfer(TransferType.Command, Oled.SET_CONTRAST);
        this._transfer(TransferType.Command, contrast);
    };
    Oled.prototype.turnOffDisplay = function () {
        this._transfer(TransferType.Command, Oled.DISPLAY_OFF);
    };
    Oled.prototype.turnOnDisplay = function () {
        this._transfer(TransferType.Command, Oled.DISPLAY_ON);
    };
    Oled.prototype.clearDisplay = function (sync) {
        var immed = typeof sync === 'undefined' ? true : sync;
        for (var i = 0; i < this.buffer.length; i += 1) {
            if (this.buffer[i] !== 0x00) {
                this.buffer[i] = 0x00;
                if (this.dirtyBytes.indexOf(i) === -1) {
                    this.dirtyBytes.push(i);
                }
            }
        }
        if (immed) {
            this._updateDirtyBytes(this.dirtyBytes);
        }
    };
    Oled.prototype.invertDisplay = function (bool) {
        if (bool) {
            this._transfer(TransferType.Command, Oled.INVERT_DISPLAY);
        }
        else {
            this._transfer(TransferType.Command, Oled.NORMAL_DISPLAY);
        }
    };
    Oled.prototype.drawBitmap = function (pixels, sync) {
        var immed = typeof sync === 'undefined' ? true : sync;
        for (var i = 0; i < pixels.length; i++) {
            var x = Math.floor(i % this.WIDTH);
            var y = Math.floor(i / this.WIDTH);
            this.drawPixel([x, y, pixels[i]], false);
        }
        if (immed) {
            this._updateDirtyBytes(this.dirtyBytes);
        }
    };
    Oled.prototype._isSinglePixel = function (pixels) {
        return typeof pixels[0] !== 'object';
    };
    Oled.prototype.drawPixel = function (pixels, sync) {
        var _this = this;
        var immed = typeof sync === 'undefined' ? true : sync;
        if (this._isSinglePixel(pixels))
            pixels = [pixels];
        pixels.forEach(function (el) {
            var x = el[0], y = el[1], color = el[2];
            if (x > _this.WIDTH || y > _this.HEIGHT)
                return;
            var byte = 0;
            var page = Math.floor(y / 8);
            var pageShift = 0x01 << (y - 8 * page);
            page === 0 ? (byte = x) : (byte = x + _this.WIDTH * page);
            if (color === 0) {
                _this.buffer[byte] &= ~pageShift;
            }
            else {
                _this.buffer[byte] |= pageShift;
            }
            if (_this.dirtyBytes.indexOf(byte) === -1) {
                _this.dirtyBytes.push(byte);
            }
        }, this);
        if (immed) {
            this._updateDirtyBytes(this.dirtyBytes);
        }
    };
    Oled.prototype._updateDirtyBytes = function (byteArray) {
        var _this = this;
        var blen = byteArray.length;
        this._waitUntilReady(function () {
            var pageStart = Infinity;
            var pageEnd = 0;
            var colStart = Infinity;
            var colEnd = 0;
            var any = false;
            for (var i = 0; i < blen; i += 1) {
                var b = byteArray[i];
                if (b >= 0 && b < _this.buffer.length) {
                    var page = (b / _this.WIDTH) | 0;
                    if (page < pageStart)
                        pageStart = page;
                    if (page > pageEnd)
                        pageEnd = page;
                    var col = b % _this.WIDTH;
                    if (col < colStart)
                        colStart = col;
                    if (col > colEnd)
                        colEnd = col;
                    any = true;
                }
            }
            if (!any)
                return;
            var displaySeq = [
                Oled.COLUMN_ADDR,
                colStart,
                colEnd,
                Oled.PAGE_ADDR,
                pageStart,
                pageEnd,
            ];
            var displaySeqLen = displaySeq.length;
            for (var i = 0; i < displaySeqLen; i += 1) {
                _this._transfer(TransferType.Command, displaySeq[i]);
            }
            for (var i = pageStart; i <= pageEnd; i += 1) {
                for (var j = colStart; j <= colEnd; j += 1) {
                    _this._transfer(TransferType.Data, _this.buffer[_this.WIDTH * i + j]);
                }
            }
        });
        this.dirtyBytes = [];
    };
    Oled.prototype.drawLine = function (x0, y0, x1, y1, color, sync) {
        var immed = typeof sync === 'undefined' ? true : sync;
        var dx = Math.abs(x1 - x0);
        var sx = x0 < x1 ? 1 : -1;
        var dy = Math.abs(y1 - y0);
        var sy = y0 < y1 ? 1 : -1;
        var err = (dx > dy ? dx : -dy) / 2;
        while (true) {
            this.drawPixel([x0, y0, color], false);
            if (x0 === x1 && y0 === y1)
                break;
            var e2 = err;
            if (e2 > -dx) {
                err -= dy;
                x0 += sx;
            }
            if (e2 < dy) {
                err += dx;
                y0 += sy;
            }
        }
        if (immed) {
            this._updateDirtyBytes(this.dirtyBytes);
        }
    };
    Oled.prototype.drawRect = function (x, y, w, h, color, sync) {
        var immed = typeof sync === 'undefined' ? true : sync;
        this.drawLine(x, y, x + w, y, color, false);
        this.drawLine(x, y + 1, x, y + h - 1, color, false);
        this.drawLine(x + w, y + 1, x + w, y + h - 1, color, false);
        this.drawLine(x, y + h - 1, x + w, y + h - 1, color, false);
        if (immed) {
            this._updateDirtyBytes(this.dirtyBytes);
        }
    };
    Oled.prototype.drawQRCode = function (x, y, data, margin, sync) {
        if (margin === void 0) { margin = 4; }
        if (qr) {
            var immed = typeof sync === 'undefined' ? true : sync;
            var matrix = qr.matrix(data);
            var pixels = matrix.flat();
            var bitmap = pixels.map(function (pixel) { return (pixel ? 0 : 1); });
            var width = Math.sqrt(pixels.length);
            this.fillRect(x, y, width + margin * 2, width + margin * 2, 1);
            for (var i = 0; i < bitmap.length; i++) {
                var px = Math.floor(i % width);
                var py = Math.floor(i / width);
                px += margin + x;
                py += margin + y;
                this.drawPixel([px, py, bitmap[i]], false);
            }
            if (immed) {
                this._updateDirtyBytes(this.dirtyBytes);
            }
        }
        else {
            console.log('Missing optional dependency: qr-image');
        }
    };
    Oled.prototype.fillRect = function (x, y, w, h, color, sync) {
        var immed = typeof sync === 'undefined' ? true : sync;
        for (var i = x; i < x + w; i += 1) {
            this.drawLine(i, y, i, y + h - 1, color, false);
        }
        if (immed) {
            this._updateDirtyBytes(this.dirtyBytes);
        }
    };
    Oled.prototype.drawCircle = function (x0, y0, r, color, sync) {
        var immed = typeof sync === 'undefined' ? true : sync;
        var f = 1 - r;
        var ddF_x = 1;
        var ddF_y = -2 * r;
        var x = 0;
        var y = r;
        this.drawPixel([
            [x0, y0 + r, color],
            [x0, y0 - r, color],
            [x0 + r, y0, color],
            [x0 - r, y0, color],
        ], false);
        while (x < y) {
            if (f >= 0) {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }
            x++;
            ddF_x += 2;
            f += ddF_x;
            this.drawPixel([
                [x0 + x, y0 + y, color],
                [x0 - x, y0 + y, color],
                [x0 + x, y0 - y, color],
                [x0 - x, y0 - y, color],
                [x0 + y, y0 + x, color],
                [x0 - y, y0 + x, color],
                [x0 + y, y0 - x, color],
                [x0 - y, y0 - x, color],
            ], false);
        }
        if (immed) {
            this._updateDirtyBytes(this.dirtyBytes);
        }
    };
    Oled.prototype.startScroll = function (dir, start, stop) {
        var _this = this;
        var cmdSeq = [];
        switch (dir) {
            case 'right':
                cmdSeq.push(Oled.RIGHT_HORIZONTAL_SCROLL);
                break;
            case 'left':
                cmdSeq.push(Oled.LEFT_HORIZONTAL_SCROLL);
                break;
            case 'left diagonal':
                cmdSeq.push(Oled.SET_VERTICAL_SCROLL_AREA, 0x00, this.HEIGHT, Oled.VERTICAL_AND_LEFT_HORIZONTAL_SCROLL, 0x00, start, 0x00, stop, 0x01, Oled.ACTIVATE_SCROLL);
                break;
            case 'right diagonal':
                cmdSeq.push(Oled.SET_VERTICAL_SCROLL_AREA, 0x00, this.HEIGHT, Oled.VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL, 0x00, start, 0x00, stop, 0x01, Oled.ACTIVATE_SCROLL);
                break;
        }
        this._waitUntilReady(function () {
            if (dir === 'right' || dir === 'left') {
                cmdSeq.push(0x00, start, 0x00, stop, 0x00, 0xff, Oled.ACTIVATE_SCROLL);
            }
            for (var i = 0; i < cmdSeq.length; i += 1) {
                _this._transfer(TransferType.Command, cmdSeq[i]);
            }
        });
    };
    Oled.prototype.stopScroll = function () {
        this._transfer(TransferType.Command, Oled.DEACTIVATE_SCROLL);
    };
    Oled.DISPLAY_OFF = 0xae;
    Oled.DISPLAY_ON = 0xaf;
    Oled.SET_DISPLAY_CLOCK_DIV = 0xd5;
    Oled.SET_MULTIPLEX = 0xa8;
    Oled.SET_DISPLAY_OFFSET = 0xd3;
    Oled.SET_START_LINE = 0x00;
    Oled.CHARGE_PUMP = 0x8d;
    Oled.EXTERNAL_VCC = false;
    Oled.MEMORY_MODE = 0x20;
    Oled.SEG_REMAP = 0xa1;
    Oled.COM_SCAN_DEC = 0xc8;
    Oled.COM_SCAN_INC = 0xc0;
    Oled.SET_COM_PINS = 0xda;
    Oled.SET_CONTRAST = 0x81;
    Oled.SET_PRECHARGE = 0xd9;
    Oled.SET_VCOM_DETECT = 0xdb;
    Oled.DISPLAY_ALL_ON_RESUME = 0xa4;
    Oled.NORMAL_DISPLAY = 0xa6;
    Oled.COLUMN_ADDR = 0x21;
    Oled.PAGE_ADDR = 0x22;
    Oled.INVERT_DISPLAY = 0xa7;
    Oled.ACTIVATE_SCROLL = 0x2f;
    Oled.DEACTIVATE_SCROLL = 0x2e;
    Oled.SET_VERTICAL_SCROLL_AREA = 0xa3;
    Oled.RIGHT_HORIZONTAL_SCROLL = 0x26;
    Oled.LEFT_HORIZONTAL_SCROLL = 0x27;
    Oled.VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29;
    Oled.VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2a;
    return Oled;
}());
var _default = oled.default = Oled;

const OLED_WIDTH = 128;
const OLED_HEIGHT = 64;
class OLED extends _default {
    constructor({ board, five }) {
        super(board, five, {
            width: 128,
            height: 64,
            address: 0x3c,
            resetPin: null,
        });
        this.previousBitmap = null;
        this.drawingIsBlocked = false;
        this.drawingBuffer = Array(OLED_WIDTH * OLED_HEIGHT).fill(null);
        this.clearDisplay = () => {
            this.drawBitmapOptimized(Array(OLED_WIDTH * OLED_HEIGHT).fill(0));
        };
    }
    drawString(string) {
        const buffer = addStringToBuffer(1, 1, string, 1);
        this.drawBitmapOptimized(buffer);
    }
    drawQRCodeNew(data, apply = true) {
        const buffer = addQrCodeToBuffer(1, 1, data, 4);
        if (apply) {
            this.drawBitmapOptimized(buffer);
        }
        return buffer;
    }
    drawValue(label, value, apply = true) {
        const buffer = addTextToBuffer([
            { x: 1, y: 1, string: label, size: 1 },
            { x: 1, y: 24, string: value, size: 2 },
        ]);
        if (apply) {
            this.drawBitmapOptimized(buffer);
        }
        return buffer;
    }
    drawBitmapOptimized(bitmap) {
        if (this.previousBitmap) {
            // get all the pixels that changed
            const updatePixels = [];
            for (let i = 0; i < bitmap.length; i++) {
                if (this.previousBitmap[i] !== bitmap[i]) {
                    const [col, row] = indexToCoords(i);
                    // x, y, color
                    updatePixels.push([col, row, bitmap[i]]);
                }
            }
            // update them on the OLED
            this.updatePixelsBlocking(updatePixels);
            this.previousBitmap = bitmap;
        }
        else {
            this.drawBitmap(bitmap);
            this.previousBitmap = bitmap;
        }
    }
    updatePixelsBlocking(pixels) {
        if (this.drawingIsBlocked) {
            pixels.forEach(([col, row, color]) => {
                const index = coordsToIndex(col, row);
                this.drawingBuffer[index] = color;
            });
            return;
        }
        let blockingTime = 50 + (2000 / 8096) * pixels.length;
        this.drawingIsBlocked = true;
        // console.log("blocking for", blockingTime, "ms, drawing", pixels.length);
        setTimeout(() => {
            this.drawingIsBlocked = false;
            const pixels = [];
            this.drawingBuffer.forEach((color, i) => {
                if (color !== null) {
                    const [col, row] = indexToCoords(i);
                    pixels.push([col, row, color]);
                }
            });
            // console.log(
            //   "unbocking after",
            //   blockingTime,
            //   "ms, updating",
            //   pixels.length,
            //   "pixels"
            // );
            this.drawingBuffer = Array(OLED_WIDTH * OLED_HEIGHT).fill(null);
            if (pixels.length > 0) {
                this.updatePixelsBlocking(pixels);
            }
        }, blockingTime);
        this.drawPixel(pixels);
    }
}
/**
 * Returns a clear buffer the size of the OLED Screen
 */
const getClearBuffer = () => Array(OLED_WIDTH * OLED_HEIGHT).fill(0);
/**
 * Adds a QR code to the buffer given, if none is given a clear one is created
 */
const addQrCodeToBuffer = (x, y, data, margin = 2, size = 2, buffer = getClearBuffer()) => {
    const matrix = qr$2.matrix(data);
    const pixels = matrix.flat();
    const width = Math.sqrt(pixels.length);
    for (let xi = x; xi < x + width * size + 2 * margin; xi++) {
        for (let yi = y; yi < y + width * size + 2 * margin; yi++) {
            const index = coordsToIndex(xi, yi);
            buffer[index] = 1;
        }
    }
    for (let i = 0; i < pixels.length; i++) {
        let px = Math.floor(i % width) * size;
        let py = Math.floor(i / width) * size;
        // add margin and offset from top-left
        px += margin + x;
        py += margin + y;
        for (let xi = px; xi < px + size; xi++) {
            for (let yi = py; yi < py + size; yi++) {
                const index = coordsToIndex(xi, yi);
                buffer[index] = pixels[i] ? 0 : 1;
            }
        }
    }
    return buffer;
};
/**
 * Adds an individual character to the buffer given, if none is given a clear one is created
 */
const addCharToBuffer = (x, y, byteArray, size, buffer = getClearBuffer()) => {
    // loop through the byte array containing the hexes for the char
    for (let i = 0; i < byteArray.length; i += 1) {
        for (let j = 0; j < 8; j += 1) {
            // pull color out (invert the color if user chose black)
            const pixelState = byteArray[i][j];
            let xpos;
            let ypos;
            // standard font size
            if (size === 1) {
                xpos = x + i;
                ypos = y + j;
                const index = coordsToIndex(xpos, ypos);
                buffer[index] = pixelState ? 1 : 0;
            }
            else {
                xpos = x + i * size;
                ypos = y + j * size;
                for (let xi = 0; xi < size; xi++) {
                    for (let yi = 0; yi < size; yi++) {
                        const index = coordsToIndex(xpos + xi, ypos + yi);
                        buffer[index] = pixelState ? 1 : 0;
                    }
                }
            }
        }
    }
    return buffer;
};
// https://github.com/baltazorr/oled-i2c-bus/blob/master/oled.js
/**
 * Gets the bytes for a character from the font object
 */
const findCharBuf = (c) => {
    // use the lookup array as a ref to find where the current char bytes start
    let cBufPos = font.lookup.indexOf(c) * font.width;
    // slice just the current char's bytes out of the fontData array and return
    let cBuf = font.fontData.slice(cBufPos, cBufPos + font.width);
    return cBuf;
};
/**
 * Reads the bytes for a character and returns a 2D array of bits
 */
const readCharBytes = (byteArray, charHeight) => {
    let bitArr = [], bitCharArr = [];
    // loop through each byte supplied for a char
    for (let i = 0; i < byteArray.length; i += 1) {
        // set current byte
        let byte = byteArray[i];
        // read each byte
        for (let j = 0; j < charHeight; j += 1) {
            // shift bits right until all are read
            let bit = (byte >> j) & 1;
            bitArr.push(bit);
        }
        // push to array containing flattened bit sequence
        bitCharArr.push(bitArr);
        // clear bits for next byte
        bitArr = [];
    }
    return bitCharArr;
};
const LETTER_SPACING = 2;
const LINE_SPACING = 3;
/**
 * Adds a string of characters to the buffer given, if none is given a clear one is created
 * */
const addStringToBuffer = (x, y, string, size = 1, buffer = getClearBuffer()) => {
    const charsPerRow = Math.floor(((OLED_WIDTH - x) / (font.width + LETTER_SPACING)) * size);
    let wordArr = string.split(" ");
    let acc = "";
    while (wordArr.length > 0) {
        let word = wordArr[0];
        let hasLinebreak = false;
        // If the word contains a newline, split it and only take the first part
        // the rest of the word gets inserted back into the array, no matter if
        // it contains more newlines — they will be handled in the next iteration
        if (word.includes("\n")) {
            const s = word.split("\n");
            hasLinebreak = true;
            word = s.shift();
            wordArr.splice(1, 0, s.join("\n"));
        }
        const wordLength = word.length;
        let charsTillEndOfRow = charsPerRow - (acc.length % charsPerRow);
        if (wordLength + 1 > charsTillEndOfRow) {
            for (let j = 0; j < charsTillEndOfRow; j++) {
                acc += " ";
            }
        }
        else if (acc.length % charsPerRow !== 0) {
            // This word did not break into a new line and it is not the first word
            // of the line, so we need to add a space in front of it
            word = " " + word;
        }
        acc += word;
        // If this word contained a newline, we need to add spaces to the end of the line,
        // unless the word ended exactly at the end of the line (and its not a newline character itself)
        if (hasLinebreak && (word.length === 0 || acc.length % charsPerRow !== 0)) {
            charsTillEndOfRow = charsPerRow - (acc.length % charsPerRow);
            for (let j = 0; j < charsTillEndOfRow; j++) {
                acc += " ";
            }
        }
        wordArr.shift();
    }
    acc.split("").forEach((char, char_index) => {
        const charBuf = findCharBuf(char);
        const bytes = readCharBytes(charBuf, font.height);
        const lineY = Math.floor(char_index / charsPerRow);
        const charX = char_index - lineY * charsPerRow;
        let xpos = x + charX * ((font.width + LETTER_SPACING) * size);
        let ypos = y + lineY * ((font.height + LINE_SPACING) * size);
        buffer = addCharToBuffer(xpos, ypos, bytes, size, buffer);
    });
    return buffer;
};
/**
 * Adds the text to the buffer given, if none is given a clear one is created
 */
const addTextToBuffer = (text, buffer = getClearBuffer()) => {
    text.forEach((t) => {
        buffer = addStringToBuffer(t.x, t.y, t.string, t.size, buffer);
    });
    return buffer;
};
const indexToCoords = (i) => {
    const row = Math.floor(i / OLED_WIDTH);
    const col = i - OLED_WIDTH * row; // i % OLED_WIDTH?
    return [col, row];
};
const coordsToIndex = (col, row) => {
    return col + row * OLED_WIDTH;
};

class SignalTower extends EventEmitter$2 {
    constructor() {
        super();
        this.value = undefined;
    }
    send(message) {
        this.value = message;
        this.emit("send", this.value);
    }
}

class SocketIOIntegration extends EventEmitter$2 {
    constructor(integrationName = "blokdots", messageEventName = "blokdots", format = { message: "msg", value: "val" }) {
        super();
        this.integrationName = integrationName;
        this.messageEventName = messageEventName;
        this.format = format;
        this.server;
        this.integration;
        this.onMessage = this.onMessage.bind(this);
        getBlokdotsSocketIOServer().then((server) => {
            this.server = server;
            this.integration = server.registerIntegration({
                integrationName: this.integrationName,
                handlers: [
                    {
                        eventName: this.messageEventName,
                        callback: this.onMessage,
                    },
                ],
            });
        });
    }
    onMessage(data) {
        const message = {
            message: data[this.format.message],
            value: data[this.format.value],
            direction: "in",
        };
        this.emit("received", message);
        this.emit("updateState", message);
    }
    send(message, shouldUpdateState = true) {
        var _a;
        if (!message.direction)
            message.direction = "out";
        this.emit("send", message);
        (_a = this.integration) === null || _a === void 0 ? void 0 : _a.emit(this.messageEventName, {
            [this.format.message]: message.message,
            [this.format.value]: message.value,
        });
        if (shouldUpdateState) {
            this.emit("updateState", message);
        }
    }
    cleanUp() {
        var _a;
        (_a = this.server) === null || _a === void 0 ? void 0 : _a.unregisterIntegration({
            integrationName: this.integrationName,
            handlers: [
                {
                    eventName: this.messageEventName,
                    callback: this.onMessage,
                },
            ],
        });
    }
}

class Timer extends EventEmitter$2 {
    constructor(value = 0) {
        super();
        this.value = value;
        this.interval;
    }
    startInterval() {
        if (this.interval) {
            clearInterval(this.interval);
        }
        this.interval = setInterval(() => {
            this.value++;
            this.emit("change", this.value);
        }, 1000);
    }
    start() {
        if (this.interval) {
            return;
        }
        this.startInterval();
        this.emit("start");
    }
    stop() {
        clearInterval(this.interval);
        this.interval = undefined;
        this.emit("stop");
    }
    reset() {
        this.startInterval();
        this.value = 0;
        this.emit("change", this.value);
        this.emit("reset");
    }
    setTo(value) {
        this.value = value;
        this.emit("change", this.value);
    }
}

const utils = {
    rgbToHex: (r, g, b) => {
        return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    },
    hexToRgb: (hex) => {
        let result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result
            ? [
                parseInt(result[1], 16),
                parseInt(result[2], 16),
                parseInt(result[3], 16),
            ]
            : null;
    },
};

exports.BLOKDOTS_SOCKET_IO_SERVER_DEFAULT_PORT = BLOKDOTS_SOCKET_IO_SERVER_DEFAULT_PORT;
exports.Counter = Counter;
exports.Encoder = Encoder;
exports.FigmaIntegration = FigmaIntegration;
exports.HapticLabs = HapticLabs;
exports.InvertableSensor = InvertableSensor;
exports.Joystick = Joystick;
exports.LEDStrip = LEDStrip;
exports.Metronome = Metronome;
exports.OLED_HEIGHT = OLED_HEIGHT;
exports.OLED_WIDTH = OLED_WIDTH;
exports.Oled = OLED;
exports.SignalTower = SignalTower;
exports.SocketIOIntegration = SocketIOIntegration;
exports.Timer = Timer;
exports.addTextToBuffer = addTextToBuffer;
exports.getBlokdotsSocketIOServer = getBlokdotsSocketIOServer;
exports.getBlokdotsSocketIOServerAddress = getBlokdotsSocketIOServerAddress;
exports.utils = utils;
